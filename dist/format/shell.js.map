{"version":3,"file":"shell.js","sources":["../../src/format/shell.ts"],"sourcesContent":["import { FormatterFactory } from './index.js';\n\nexport const formatShell: FormatterFactory =\n  (prefix = '') =>\n  ({ Name, Value }) =>\n    `export ${prefix}${Name}=${escapeForShell(Value)}`;\n\n/**\n * Escapes a string to be safely used as a shell variable value.\n * - Escapes single quotes, double quotes, backslashes\n * - Converts newlines to \\n, tabs to \\t, etc.\n * - Wraps in single quotes (preferred for POSIX shells)\n */\nexport function escapeForShell(value: string): string {\n  return (\n    '\"' +\n    value\n      .replace(/\\\\/g, '\\\\\\\\') // Escape backslashes\n      .replace(/\"/g, '\\\\\"') // Escape double quotes\n      .replace(/\\n/g, '\\\\n') // Newlines\n      .replace(/\\r/g, '\\\\r') // Carriage returns\n      .replace(/\\t/g, '\\\\t') + // Tabs\n    '\"'\n  );\n}\n"],"names":[],"mappings":"AAEO,MAAM,WAAW,GACtB,CAAC,MAAM,GAAG,EAAE,KACZ,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,KACd,CAAA,OAAA,EAAU,MAAM,CAAA,EAAG,IAAI,CAAA,CAAA,EAAI,cAAc,CAAC,KAAK,CAAC;AAEpD;;;;;AAKG;AACG,SAAU,cAAc,CAAC,KAAa,EAAA;AAC1C,IAAA,QACE,GAAG;QACH;AACG,aAAA,OAAO,CAAC,KAAK,EAAE,MAAM,CAAC;AACtB,aAAA,OAAO,CAAC,IAAI,EAAE,KAAK,CAAC;AACpB,aAAA,OAAO,CAAC,KAAK,EAAE,KAAK,CAAC;AACrB,aAAA,OAAO,CAAC,KAAK,EAAE,KAAK,CAAC;AACrB,aAAA,OAAO,CAAC,KAAK,EAAE,KAAK,CAAC;AACxB,QAAA,GAAG;AAEP;;;;"}