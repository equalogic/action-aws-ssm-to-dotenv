{"version":3,"file":"DocTypeReader.js","sources":["../../../../../node_modules/fast-xml-parser/src/xmlparser/DocTypeReader.js"],"sourcesContent":["import {isName} from '../util.js';\n\n//TODO: handle comments\nexport default function readDocType(xmlData, i){\n    \n    const entities = {};\n    if( xmlData[i + 3] === 'O' &&\n         xmlData[i + 4] === 'C' &&\n         xmlData[i + 5] === 'T' &&\n         xmlData[i + 6] === 'Y' &&\n         xmlData[i + 7] === 'P' &&\n         xmlData[i + 8] === 'E')\n    {    \n        i = i+9;\n        let angleBracketsCount = 1;\n        let hasBody = false, comment = false;\n        let exp = \"\";\n        for(;i<xmlData.length;i++){\n            if (xmlData[i] === '<' && !comment) { //Determine the tag type\n                if( hasBody && hasSeq(xmlData, \"!ENTITY\",i)){\n                    i += 7; \n                    let entityName, val;\n                    [entityName, val,i] = readEntityExp(xmlData,i+1);\n                    if(val.indexOf(\"&\") === -1) //Parameter entities are not supported\n                        entities[ entityName ] = {\n                            regx : RegExp( `&${entityName};`,\"g\"),\n                            val: val\n                        };\n                }\n                else if( hasBody && hasSeq(xmlData, \"!ELEMENT\",i))  {\n                    i += 8;//Not supported\n                    const {index} = readElementExp(xmlData,i+1);\n                    i = index;\n                }else if( hasBody && hasSeq(xmlData, \"!ATTLIST\",i)){\n                    i += 8;//Not supported\n                    // const {index} = readAttlistExp(xmlData,i+1);\n                    // i = index;\n                }else if( hasBody && hasSeq(xmlData, \"!NOTATION\",i)) {\n                    i += 9;//Not supported\n                    const {index} = readNotationExp(xmlData,i+1);\n                    i = index;\n                }else if( hasSeq(xmlData, \"!--\",i) ) comment = true;\n                else throw new Error(`Invalid DOCTYPE`);\n\n                angleBracketsCount++;\n                exp = \"\";\n            } else if (xmlData[i] === '>') { //Read tag content\n                if(comment){\n                    if( xmlData[i - 1] === \"-\" && xmlData[i - 2] === \"-\"){\n                        comment = false;\n                        angleBracketsCount--;\n                    }\n                }else{\n                    angleBracketsCount--;\n                }\n                if (angleBracketsCount === 0) {\n                  break;\n                }\n            }else if( xmlData[i] === '['){\n                hasBody = true;\n            }else{\n                exp += xmlData[i];\n            }\n        }\n        if(angleBracketsCount !== 0){\n            throw new Error(`Unclosed DOCTYPE`);\n        }\n    }else{\n        throw new Error(`Invalid Tag instead of DOCTYPE`);\n    }\n    return {entities, i};\n}\n\nconst skipWhitespace = (data, index) => {\n    while (index < data.length && /\\s/.test(data[index])) {\n        index++;\n    }\n    return index;\n};\n\nfunction readEntityExp(xmlData, i) {    \n    //External entities are not supported\n    //    <!ENTITY ext SYSTEM \"http://normal-website.com\" >\n\n    //Parameter entities are not supported\n    //    <!ENTITY entityname \"&anotherElement;\">\n\n    //Internal entities are supported\n    //    <!ENTITY entityname \"replacement text\">\n\n    // Skip leading whitespace after <!ENTITY\n    i = skipWhitespace(xmlData, i);\n\n    // Read entity name\n    let entityName = \"\";\n    while (i < xmlData.length && !/\\s/.test(xmlData[i]) && xmlData[i] !== '\"' && xmlData[i] !== \"'\") {\n        entityName += xmlData[i];\n        i++;\n    }\n    validateEntityName(entityName);\n\n    // Skip whitespace after entity name\n    i = skipWhitespace(xmlData, i);\n\n    // Check for unsupported constructs (external entities or parameter entities)\n    if (xmlData.substring(i, i + 6).toUpperCase() === \"SYSTEM\") {\n        throw new Error(\"External entities are not supported\");\n    }else if (xmlData[i] === \"%\") {\n        throw new Error(\"Parameter entities are not supported\");\n    }\n\n    // Read entity value (internal entity)\n    let entityValue = \"\";\n    [i, entityValue] = readIdentifierVal(xmlData, i, \"entity\");\n    i--;\n    return [entityName, entityValue, i ];\n}\n\nfunction readNotationExp(xmlData, i) {\n    // Skip leading whitespace after <!NOTATION\n    i = skipWhitespace(xmlData, i);\n\n    // Read notation name\n    let notationName = \"\";\n    while (i < xmlData.length && !/\\s/.test(xmlData[i])) {\n        notationName += xmlData[i];\n        i++;\n    }\n    validateEntityName(notationName);\n\n    // Skip whitespace after notation name\n    i = skipWhitespace(xmlData, i);\n\n    // Check identifier type (SYSTEM or PUBLIC)\n    const identifierType = xmlData.substring(i, i + 6).toUpperCase();\n    if (identifierType !== \"SYSTEM\" && identifierType !== \"PUBLIC\") {\n        throw new Error(`Expected SYSTEM or PUBLIC, found \"${identifierType}\"`);\n    }\n    i += identifierType.length;\n\n    // Skip whitespace after identifier type\n    i = skipWhitespace(xmlData, i);\n\n    // Read public identifier (if PUBLIC)\n    let publicIdentifier = null;\n    let systemIdentifier = null;\n\n    if (identifierType === \"PUBLIC\") {\n        [i, publicIdentifier ] = readIdentifierVal(xmlData, i, \"publicIdentifier\");\n\n        // Skip whitespace after public identifier\n        i = skipWhitespace(xmlData, i);\n\n        // Optionally read system identifier\n        if (xmlData[i] === '\"' || xmlData[i] === \"'\") {\n            [i, systemIdentifier ] = readIdentifierVal(xmlData, i,\"systemIdentifier\");\n        }\n    } else if (identifierType === \"SYSTEM\") {\n        // Read system identifier (mandatory for SYSTEM)\n        [i, systemIdentifier ] = readIdentifierVal(xmlData, i, \"systemIdentifier\");\n\n        if (!systemIdentifier) {\n            throw new Error(\"Missing mandatory system identifier for SYSTEM notation\");\n        }\n    }\n    \n    return {notationName, publicIdentifier, systemIdentifier, index: --i};\n}\n\nfunction readIdentifierVal(xmlData, i, type) {\n    let identifierVal = \"\";\n    const startChar = xmlData[i];\n    if (startChar !== '\"' && startChar !== \"'\") {\n        throw new Error(`Expected quoted string, found \"${startChar}\"`);\n    }\n    i++;\n\n    while (i < xmlData.length && xmlData[i] !== startChar) {\n        identifierVal += xmlData[i];\n        i++;\n    }\n\n    if (xmlData[i] !== startChar) {\n        throw new Error(`Unterminated ${type} value`);\n    }\n    i++;\n    return [i, identifierVal];\n}\n\nfunction readElementExp(xmlData, i) {\n    // <!ELEMENT br EMPTY>\n    // <!ELEMENT div ANY>\n    // <!ELEMENT title (#PCDATA)>\n    // <!ELEMENT book (title, author+)>\n    // <!ELEMENT name (content-model)>\n    \n    // Skip leading whitespace after <!ELEMENT\n    i = skipWhitespace(xmlData, i);\n\n    // Read element name\n    let elementName = \"\";\n    while (i < xmlData.length && !/\\s/.test(xmlData[i])) {\n        elementName += xmlData[i];\n        i++;\n    }\n\n    // Validate element name\n    if (!validateEntityName(elementName)) {\n        throw new Error(`Invalid element name: \"${elementName}\"`);\n    }\n\n    // Skip whitespace after element name\n    i = skipWhitespace(xmlData, i);\n    let contentModel = \"\";\n    // Expect '(' to start content model\n    if(xmlData[i] === \"E\" && hasSeq(xmlData, \"MPTY\",i)) i+=4;\n    else if(xmlData[i] === \"A\" && hasSeq(xmlData, \"NY\",i)) i+=2;\n    else if (xmlData[i] === \"(\") {\n        i++; // Move past '('\n\n        // Read content model\n        while (i < xmlData.length && xmlData[i] !== \")\") {\n            contentModel += xmlData[i];\n            i++;\n        }\n        if (xmlData[i] !== \")\") {\n            throw new Error(\"Unterminated content model\");\n        }\n\n    }else{\n        throw new Error(`Invalid Element Expression, found \"${xmlData[i]}\"`);\n    }\n    \n    return {\n        elementName,\n        contentModel: contentModel.trim(),\n        index: i\n    };\n}\n\nfunction readAttlistExp(xmlData, i) {\n    // Skip leading whitespace after <!ATTLIST\n    i = skipWhitespace(xmlData, i);\n\n    // Read element name\n    let elementName = \"\";\n    while (i < xmlData.length && !/\\s/.test(xmlData[i])) {\n        elementName += xmlData[i];\n        i++;\n    }\n\n    // Validate element name\n    validateEntityName(elementName)\n\n    // Skip whitespace after element name\n    i = skipWhitespace(xmlData, i);\n\n    // Read attribute name\n    let attributeName = \"\";\n    while (i < xmlData.length && !/\\s/.test(xmlData[i])) {\n        attributeName += xmlData[i];\n        i++;\n    }\n\n    // Validate attribute name\n    if (!validateEntityName(attributeName)) {\n        throw new Error(`Invalid attribute name: \"${attributeName}\"`);\n    }\n\n    // Skip whitespace after attribute name\n    i = skipWhitespace(xmlData, i);\n\n    // Read attribute type\n    let attributeType = \"\";\n    if (xmlData.substring(i, i + 8).toUpperCase() === \"NOTATION\") {\n        attributeType = \"NOTATION\";\n        i += 8; // Move past \"NOTATION\"\n\n        // Skip whitespace after \"NOTATION\"\n        i = skipWhitespace(xmlData, i);\n\n        // Expect '(' to start the list of notations\n        if (xmlData[i] !== \"(\") {\n            throw new Error(`Expected '(', found \"${xmlData[i]}\"`);\n        }\n        i++; // Move past '('\n\n        // Read the list of allowed notations\n        let allowedNotations = [];\n        while (i < xmlData.length && xmlData[i] !== \")\") {\n            let notation = \"\";\n            while (i < xmlData.length && xmlData[i] !== \"|\" && xmlData[i] !== \")\") {\n                notation += xmlData[i];\n                i++;\n            }\n\n            // Validate notation name\n            notation = notation.trim();\n            if (!validateEntityName(notation)) {\n                throw new Error(`Invalid notation name: \"${notation}\"`);\n            }\n\n            allowedNotations.push(notation);\n\n            // Skip '|' separator or exit loop\n            if (xmlData[i] === \"|\") {\n                i++; // Move past '|'\n                i = skipWhitespace(xmlData, i); // Skip optional whitespace after '|'\n            }\n        }\n\n        if (xmlData[i] !== \")\") {\n            throw new Error(\"Unterminated list of notations\");\n        }\n        i++; // Move past ')'\n\n        // Store the allowed notations as part of the attribute type\n        attributeType += \" (\" + allowedNotations.join(\"|\") + \")\";\n    } else {\n        // Handle simple types (e.g., CDATA, ID, IDREF, etc.)\n        while (i < xmlData.length && !/\\s/.test(xmlData[i])) {\n            attributeType += xmlData[i];\n            i++;\n        }\n\n        // Validate simple attribute type\n        const validTypes = [\"CDATA\", \"ID\", \"IDREF\", \"IDREFS\", \"ENTITY\", \"ENTITIES\", \"NMTOKEN\", \"NMTOKENS\"];\n        if (!validTypes.includes(attributeType.toUpperCase())) {\n            throw new Error(`Invalid attribute type: \"${attributeType}\"`);\n        }\n    }\n\n    // Skip whitespace after attribute type\n    i = skipWhitespace(xmlData, i);\n\n    // Read default value\n    let defaultValue = \"\";\n    if (xmlData.substring(i, i + 8).toUpperCase() === \"#REQUIRED\") {\n        defaultValue = \"#REQUIRED\";\n        i += 8;\n    } else if (xmlData.substring(i, i + 7).toUpperCase() === \"#IMPLIED\") {\n        defaultValue = \"#IMPLIED\";\n        i += 7;\n    } else {\n        [i, defaultValue] = readIdentifierVal(xmlData, i, \"ATTLIST\");\n    }\n\n    return {\n        elementName,\n        attributeName,\n        attributeType,\n        defaultValue,\n        index: i\n    }\n}\n\nfunction hasSeq(data, seq,i){\n    for(let j=0;j<seq.length;j++){\n        if(seq[j]!==data[i+j+1]) return false;\n    }\n    return true;\n}\n\nfunction validateEntityName(name){\n    if (isName(name))\n\treturn name;\n    else\n        throw new Error(`Invalid entity name ${name}`);\n}\n"],"names":[],"mappings":"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","x_google_ignoreList":[0]}