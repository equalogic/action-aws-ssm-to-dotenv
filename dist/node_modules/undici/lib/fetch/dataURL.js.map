{"version":3,"file":"dataURL.js","sources":["../../../../../node_modules/undici/lib/fetch/dataURL.js"],"sourcesContent":["const assert = require('assert')\nconst { atob } = require('buffer')\nconst { isomorphicDecode } = require('./util')\n\nconst encoder = new TextEncoder()\n\n/**\n * @see https://mimesniff.spec.whatwg.org/#http-token-code-point\n */\nconst HTTP_TOKEN_CODEPOINTS = /^[!#$%&'*+-.^_|~A-Za-z0-9]+$/\nconst HTTP_WHITESPACE_REGEX = /(\\u000A|\\u000D|\\u0009|\\u0020)/ // eslint-disable-line\n/**\n * @see https://mimesniff.spec.whatwg.org/#http-quoted-string-token-code-point\n */\nconst HTTP_QUOTED_STRING_TOKENS = /[\\u0009|\\u0020-\\u007E|\\u0080-\\u00FF]/ // eslint-disable-line\n\n// https://fetch.spec.whatwg.org/#data-url-processor\n/** @param {URL} dataURL */\nfunction dataURLProcessor (dataURL) {\n  // 1. Assert: dataURL’s scheme is \"data\".\n  assert(dataURL.protocol === 'data:')\n\n  // 2. Let input be the result of running the URL\n  // serializer on dataURL with exclude fragment\n  // set to true.\n  let input = URLSerializer(dataURL, true)\n\n  // 3. Remove the leading \"data:\" string from input.\n  input = input.slice(5)\n\n  // 4. Let position point at the start of input.\n  const position = { position: 0 }\n\n  // 5. Let mimeType be the result of collecting a\n  // sequence of code points that are not equal\n  // to U+002C (,), given position.\n  let mimeType = collectASequenceOfCodePointsFast(\n    ',',\n    input,\n    position\n  )\n\n  // 6. Strip leading and trailing ASCII whitespace\n  // from mimeType.\n  // Undici implementation note: we need to store the\n  // length because if the mimetype has spaces removed,\n  // the wrong amount will be sliced from the input in\n  // step #9\n  const mimeTypeLength = mimeType.length\n  mimeType = removeASCIIWhitespace(mimeType, true, true)\n\n  // 7. If position is past the end of input, then\n  // return failure\n  if (position.position >= input.length) {\n    return 'failure'\n  }\n\n  // 8. Advance position by 1.\n  position.position++\n\n  // 9. Let encodedBody be the remainder of input.\n  const encodedBody = input.slice(mimeTypeLength + 1)\n\n  // 10. Let body be the percent-decoding of encodedBody.\n  let body = stringPercentDecode(encodedBody)\n\n  // 11. If mimeType ends with U+003B (;), followed by\n  // zero or more U+0020 SPACE, followed by an ASCII\n  // case-insensitive match for \"base64\", then:\n  if (/;(\\u0020){0,}base64$/i.test(mimeType)) {\n    // 1. Let stringBody be the isomorphic decode of body.\n    const stringBody = isomorphicDecode(body)\n\n    // 2. Set body to the forgiving-base64 decode of\n    // stringBody.\n    body = forgivingBase64(stringBody)\n\n    // 3. If body is failure, then return failure.\n    if (body === 'failure') {\n      return 'failure'\n    }\n\n    // 4. Remove the last 6 code points from mimeType.\n    mimeType = mimeType.slice(0, -6)\n\n    // 5. Remove trailing U+0020 SPACE code points from mimeType,\n    // if any.\n    mimeType = mimeType.replace(/(\\u0020)+$/, '')\n\n    // 6. Remove the last U+003B (;) code point from mimeType.\n    mimeType = mimeType.slice(0, -1)\n  }\n\n  // 12. If mimeType starts with U+003B (;), then prepend\n  // \"text/plain\" to mimeType.\n  if (mimeType.startsWith(';')) {\n    mimeType = 'text/plain' + mimeType\n  }\n\n  // 13. Let mimeTypeRecord be the result of parsing\n  // mimeType.\n  let mimeTypeRecord = parseMIMEType(mimeType)\n\n  // 14. If mimeTypeRecord is failure, then set\n  // mimeTypeRecord to text/plain;charset=US-ASCII.\n  if (mimeTypeRecord === 'failure') {\n    mimeTypeRecord = parseMIMEType('text/plain;charset=US-ASCII')\n  }\n\n  // 15. Return a new data: URL struct whose MIME\n  // type is mimeTypeRecord and body is body.\n  // https://fetch.spec.whatwg.org/#data-url-struct\n  return { mimeType: mimeTypeRecord, body }\n}\n\n// https://url.spec.whatwg.org/#concept-url-serializer\n/**\n * @param {URL} url\n * @param {boolean} excludeFragment\n */\nfunction URLSerializer (url, excludeFragment = false) {\n  if (!excludeFragment) {\n    return url.href\n  }\n\n  const href = url.href\n  const hashLength = url.hash.length\n\n  return hashLength === 0 ? href : href.substring(0, href.length - hashLength)\n}\n\n// https://infra.spec.whatwg.org/#collect-a-sequence-of-code-points\n/**\n * @param {(char: string) => boolean} condition\n * @param {string} input\n * @param {{ position: number }} position\n */\nfunction collectASequenceOfCodePoints (condition, input, position) {\n  // 1. Let result be the empty string.\n  let result = ''\n\n  // 2. While position doesn’t point past the end of input and the\n  // code point at position within input meets the condition condition:\n  while (position.position < input.length && condition(input[position.position])) {\n    // 1. Append that code point to the end of result.\n    result += input[position.position]\n\n    // 2. Advance position by 1.\n    position.position++\n  }\n\n  // 3. Return result.\n  return result\n}\n\n/**\n * A faster collectASequenceOfCodePoints that only works when comparing a single character.\n * @param {string} char\n * @param {string} input\n * @param {{ position: number }} position\n */\nfunction collectASequenceOfCodePointsFast (char, input, position) {\n  const idx = input.indexOf(char, position.position)\n  const start = position.position\n\n  if (idx === -1) {\n    position.position = input.length\n    return input.slice(start)\n  }\n\n  position.position = idx\n  return input.slice(start, position.position)\n}\n\n// https://url.spec.whatwg.org/#string-percent-decode\n/** @param {string} input */\nfunction stringPercentDecode (input) {\n  // 1. Let bytes be the UTF-8 encoding of input.\n  const bytes = encoder.encode(input)\n\n  // 2. Return the percent-decoding of bytes.\n  return percentDecode(bytes)\n}\n\n// https://url.spec.whatwg.org/#percent-decode\n/** @param {Uint8Array} input */\nfunction percentDecode (input) {\n  // 1. Let output be an empty byte sequence.\n  /** @type {number[]} */\n  const output = []\n\n  // 2. For each byte byte in input:\n  for (let i = 0; i < input.length; i++) {\n    const byte = input[i]\n\n    // 1. If byte is not 0x25 (%), then append byte to output.\n    if (byte !== 0x25) {\n      output.push(byte)\n\n    // 2. Otherwise, if byte is 0x25 (%) and the next two bytes\n    // after byte in input are not in the ranges\n    // 0x30 (0) to 0x39 (9), 0x41 (A) to 0x46 (F),\n    // and 0x61 (a) to 0x66 (f), all inclusive, append byte\n    // to output.\n    } else if (\n      byte === 0x25 &&\n      !/^[0-9A-Fa-f]{2}$/i.test(String.fromCharCode(input[i + 1], input[i + 2]))\n    ) {\n      output.push(0x25)\n\n    // 3. Otherwise:\n    } else {\n      // 1. Let bytePoint be the two bytes after byte in input,\n      // decoded, and then interpreted as hexadecimal number.\n      const nextTwoBytes = String.fromCharCode(input[i + 1], input[i + 2])\n      const bytePoint = Number.parseInt(nextTwoBytes, 16)\n\n      // 2. Append a byte whose value is bytePoint to output.\n      output.push(bytePoint)\n\n      // 3. Skip the next two bytes in input.\n      i += 2\n    }\n  }\n\n  // 3. Return output.\n  return Uint8Array.from(output)\n}\n\n// https://mimesniff.spec.whatwg.org/#parse-a-mime-type\n/** @param {string} input */\nfunction parseMIMEType (input) {\n  // 1. Remove any leading and trailing HTTP whitespace\n  // from input.\n  input = removeHTTPWhitespace(input, true, true)\n\n  // 2. Let position be a position variable for input,\n  // initially pointing at the start of input.\n  const position = { position: 0 }\n\n  // 3. Let type be the result of collecting a sequence\n  // of code points that are not U+002F (/) from\n  // input, given position.\n  const type = collectASequenceOfCodePointsFast(\n    '/',\n    input,\n    position\n  )\n\n  // 4. If type is the empty string or does not solely\n  // contain HTTP token code points, then return failure.\n  // https://mimesniff.spec.whatwg.org/#http-token-code-point\n  if (type.length === 0 || !HTTP_TOKEN_CODEPOINTS.test(type)) {\n    return 'failure'\n  }\n\n  // 5. If position is past the end of input, then return\n  // failure\n  if (position.position > input.length) {\n    return 'failure'\n  }\n\n  // 6. Advance position by 1. (This skips past U+002F (/).)\n  position.position++\n\n  // 7. Let subtype be the result of collecting a sequence of\n  // code points that are not U+003B (;) from input, given\n  // position.\n  let subtype = collectASequenceOfCodePointsFast(\n    ';',\n    input,\n    position\n  )\n\n  // 8. Remove any trailing HTTP whitespace from subtype.\n  subtype = removeHTTPWhitespace(subtype, false, true)\n\n  // 9. If subtype is the empty string or does not solely\n  // contain HTTP token code points, then return failure.\n  if (subtype.length === 0 || !HTTP_TOKEN_CODEPOINTS.test(subtype)) {\n    return 'failure'\n  }\n\n  const typeLowercase = type.toLowerCase()\n  const subtypeLowercase = subtype.toLowerCase()\n\n  // 10. Let mimeType be a new MIME type record whose type\n  // is type, in ASCII lowercase, and subtype is subtype,\n  // in ASCII lowercase.\n  // https://mimesniff.spec.whatwg.org/#mime-type\n  const mimeType = {\n    type: typeLowercase,\n    subtype: subtypeLowercase,\n    /** @type {Map<string, string>} */\n    parameters: new Map(),\n    // https://mimesniff.spec.whatwg.org/#mime-type-essence\n    essence: `${typeLowercase}/${subtypeLowercase}`\n  }\n\n  // 11. While position is not past the end of input:\n  while (position.position < input.length) {\n    // 1. Advance position by 1. (This skips past U+003B (;).)\n    position.position++\n\n    // 2. Collect a sequence of code points that are HTTP\n    // whitespace from input given position.\n    collectASequenceOfCodePoints(\n      // https://fetch.spec.whatwg.org/#http-whitespace\n      char => HTTP_WHITESPACE_REGEX.test(char),\n      input,\n      position\n    )\n\n    // 3. Let parameterName be the result of collecting a\n    // sequence of code points that are not U+003B (;)\n    // or U+003D (=) from input, given position.\n    let parameterName = collectASequenceOfCodePoints(\n      (char) => char !== ';' && char !== '=',\n      input,\n      position\n    )\n\n    // 4. Set parameterName to parameterName, in ASCII\n    // lowercase.\n    parameterName = parameterName.toLowerCase()\n\n    // 5. If position is not past the end of input, then:\n    if (position.position < input.length) {\n      // 1. If the code point at position within input is\n      // U+003B (;), then continue.\n      if (input[position.position] === ';') {\n        continue\n      }\n\n      // 2. Advance position by 1. (This skips past U+003D (=).)\n      position.position++\n    }\n\n    // 6. If position is past the end of input, then break.\n    if (position.position > input.length) {\n      break\n    }\n\n    // 7. Let parameterValue be null.\n    let parameterValue = null\n\n    // 8. If the code point at position within input is\n    // U+0022 (\"), then:\n    if (input[position.position] === '\"') {\n      // 1. Set parameterValue to the result of collecting\n      // an HTTP quoted string from input, given position\n      // and the extract-value flag.\n      parameterValue = collectAnHTTPQuotedString(input, position, true)\n\n      // 2. Collect a sequence of code points that are not\n      // U+003B (;) from input, given position.\n      collectASequenceOfCodePointsFast(\n        ';',\n        input,\n        position\n      )\n\n    // 9. Otherwise:\n    } else {\n      // 1. Set parameterValue to the result of collecting\n      // a sequence of code points that are not U+003B (;)\n      // from input, given position.\n      parameterValue = collectASequenceOfCodePointsFast(\n        ';',\n        input,\n        position\n      )\n\n      // 2. Remove any trailing HTTP whitespace from parameterValue.\n      parameterValue = removeHTTPWhitespace(parameterValue, false, true)\n\n      // 3. If parameterValue is the empty string, then continue.\n      if (parameterValue.length === 0) {\n        continue\n      }\n    }\n\n    // 10. If all of the following are true\n    // - parameterName is not the empty string\n    // - parameterName solely contains HTTP token code points\n    // - parameterValue solely contains HTTP quoted-string token code points\n    // - mimeType’s parameters[parameterName] does not exist\n    // then set mimeType’s parameters[parameterName] to parameterValue.\n    if (\n      parameterName.length !== 0 &&\n      HTTP_TOKEN_CODEPOINTS.test(parameterName) &&\n      (parameterValue.length === 0 || HTTP_QUOTED_STRING_TOKENS.test(parameterValue)) &&\n      !mimeType.parameters.has(parameterName)\n    ) {\n      mimeType.parameters.set(parameterName, parameterValue)\n    }\n  }\n\n  // 12. Return mimeType.\n  return mimeType\n}\n\n// https://infra.spec.whatwg.org/#forgiving-base64-decode\n/** @param {string} data */\nfunction forgivingBase64 (data) {\n  // 1. Remove all ASCII whitespace from data.\n  data = data.replace(/[\\u0009\\u000A\\u000C\\u000D\\u0020]/g, '')  // eslint-disable-line\n\n  // 2. If data’s code point length divides by 4 leaving\n  // no remainder, then:\n  if (data.length % 4 === 0) {\n    // 1. If data ends with one or two U+003D (=) code points,\n    // then remove them from data.\n    data = data.replace(/=?=$/, '')\n  }\n\n  // 3. If data’s code point length divides by 4 leaving\n  // a remainder of 1, then return failure.\n  if (data.length % 4 === 1) {\n    return 'failure'\n  }\n\n  // 4. If data contains a code point that is not one of\n  //  U+002B (+)\n  //  U+002F (/)\n  //  ASCII alphanumeric\n  // then return failure.\n  if (/[^+/0-9A-Za-z]/.test(data)) {\n    return 'failure'\n  }\n\n  const binary = atob(data)\n  const bytes = new Uint8Array(binary.length)\n\n  for (let byte = 0; byte < binary.length; byte++) {\n    bytes[byte] = binary.charCodeAt(byte)\n  }\n\n  return bytes\n}\n\n// https://fetch.spec.whatwg.org/#collect-an-http-quoted-string\n// tests: https://fetch.spec.whatwg.org/#example-http-quoted-string\n/**\n * @param {string} input\n * @param {{ position: number }} position\n * @param {boolean?} extractValue\n */\nfunction collectAnHTTPQuotedString (input, position, extractValue) {\n  // 1. Let positionStart be position.\n  const positionStart = position.position\n\n  // 2. Let value be the empty string.\n  let value = ''\n\n  // 3. Assert: the code point at position within input\n  // is U+0022 (\").\n  assert(input[position.position] === '\"')\n\n  // 4. Advance position by 1.\n  position.position++\n\n  // 5. While true:\n  while (true) {\n    // 1. Append the result of collecting a sequence of code points\n    // that are not U+0022 (\") or U+005C (\\) from input, given\n    // position, to value.\n    value += collectASequenceOfCodePoints(\n      (char) => char !== '\"' && char !== '\\\\',\n      input,\n      position\n    )\n\n    // 2. If position is past the end of input, then break.\n    if (position.position >= input.length) {\n      break\n    }\n\n    // 3. Let quoteOrBackslash be the code point at position within\n    // input.\n    const quoteOrBackslash = input[position.position]\n\n    // 4. Advance position by 1.\n    position.position++\n\n    // 5. If quoteOrBackslash is U+005C (\\), then:\n    if (quoteOrBackslash === '\\\\') {\n      // 1. If position is past the end of input, then append\n      // U+005C (\\) to value and break.\n      if (position.position >= input.length) {\n        value += '\\\\'\n        break\n      }\n\n      // 2. Append the code point at position within input to value.\n      value += input[position.position]\n\n      // 3. Advance position by 1.\n      position.position++\n\n    // 6. Otherwise:\n    } else {\n      // 1. Assert: quoteOrBackslash is U+0022 (\").\n      assert(quoteOrBackslash === '\"')\n\n      // 2. Break.\n      break\n    }\n  }\n\n  // 6. If the extract-value flag is set, then return value.\n  if (extractValue) {\n    return value\n  }\n\n  // 7. Return the code points from positionStart to position,\n  // inclusive, within input.\n  return input.slice(positionStart, position.position)\n}\n\n/**\n * @see https://mimesniff.spec.whatwg.org/#serialize-a-mime-type\n */\nfunction serializeAMimeType (mimeType) {\n  assert(mimeType !== 'failure')\n  const { parameters, essence } = mimeType\n\n  // 1. Let serialization be the concatenation of mimeType’s\n  //    type, U+002F (/), and mimeType’s subtype.\n  let serialization = essence\n\n  // 2. For each name → value of mimeType’s parameters:\n  for (let [name, value] of parameters.entries()) {\n    // 1. Append U+003B (;) to serialization.\n    serialization += ';'\n\n    // 2. Append name to serialization.\n    serialization += name\n\n    // 3. Append U+003D (=) to serialization.\n    serialization += '='\n\n    // 4. If value does not solely contain HTTP token code\n    //    points or value is the empty string, then:\n    if (!HTTP_TOKEN_CODEPOINTS.test(value)) {\n      // 1. Precede each occurence of U+0022 (\") or\n      //    U+005C (\\) in value with U+005C (\\).\n      value = value.replace(/(\\\\|\")/g, '\\\\$1')\n\n      // 2. Prepend U+0022 (\") to value.\n      value = '\"' + value\n\n      // 3. Append U+0022 (\") to value.\n      value += '\"'\n    }\n\n    // 5. Append value to serialization.\n    serialization += value\n  }\n\n  // 3. Return serialization.\n  return serialization\n}\n\n/**\n * @see https://fetch.spec.whatwg.org/#http-whitespace\n * @param {string} char\n */\nfunction isHTTPWhiteSpace (char) {\n  return char === '\\r' || char === '\\n' || char === '\\t' || char === ' '\n}\n\n/**\n * @see https://fetch.spec.whatwg.org/#http-whitespace\n * @param {string} str\n */\nfunction removeHTTPWhitespace (str, leading = true, trailing = true) {\n  let lead = 0\n  let trail = str.length - 1\n\n  if (leading) {\n    for (; lead < str.length && isHTTPWhiteSpace(str[lead]); lead++);\n  }\n\n  if (trailing) {\n    for (; trail > 0 && isHTTPWhiteSpace(str[trail]); trail--);\n  }\n\n  return str.slice(lead, trail + 1)\n}\n\n/**\n * @see https://infra.spec.whatwg.org/#ascii-whitespace\n * @param {string} char\n */\nfunction isASCIIWhitespace (char) {\n  return char === '\\r' || char === '\\n' || char === '\\t' || char === '\\f' || char === ' '\n}\n\n/**\n * @see https://infra.spec.whatwg.org/#strip-leading-and-trailing-ascii-whitespace\n */\nfunction removeASCIIWhitespace (str, leading = true, trailing = true) {\n  let lead = 0\n  let trail = str.length - 1\n\n  if (leading) {\n    for (; lead < str.length && isASCIIWhitespace(str[lead]); lead++);\n  }\n\n  if (trailing) {\n    for (; trail > 0 && isASCIIWhitespace(str[trail]); trail--);\n  }\n\n  return str.slice(lead, trail + 1)\n}\n\nmodule.exports = {\n  dataURLProcessor,\n  URLSerializer,\n  collectASequenceOfCodePoints,\n  collectASequenceOfCodePointsFast,\n  stringPercentDecode,\n  parseMIMEType,\n  collectAnHTTPQuotedString,\n  serializeAMimeType\n}\n"],"names":["require$$1","require$$2"],"mappings":";;;;;;;;;;AAAA,CAAA,MAAM,MAAM,GAAG;CACf,MAAM,EAAE,IAAI,EAAE,GAAGA;CACjB,MAAM,EAAE,gBAAgB,EAAE,GAAGC,WAAA;;CAE7B,MAAM,OAAO,GAAG,IAAI,WAAW;;AAE/B;AACA;AACA;AACA,CAAA,MAAM,qBAAqB,GAAG;CAC9B,MAAM,qBAAqB,GAAG,gCAA+B;AAC7D;AACA;AACA;CACA,MAAM,yBAAyB,GAAG,uCAAsC;;AAExE;AACA;CACA,SAAS,gBAAgB,EAAE,OAAO,EAAE;AACpC;AACA,GAAE,MAAM,CAAC,OAAO,CAAC,QAAQ,KAAK,OAAO;;AAErC;AACA;AACA;AACA,GAAE,IAAI,KAAK,GAAG,aAAa,CAAC,OAAO,EAAE,IAAI;;AAEzC;AACA,GAAE,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC;;AAEvB;AACA,GAAE,MAAM,QAAQ,GAAG,EAAE,QAAQ,EAAE,CAAC;;AAEhC;AACA;AACA;GACE,IAAI,QAAQ,GAAG,gCAAgC;AACjD,KAAI,GAAG;AACP,KAAI,KAAK;KACL;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAE,MAAM,cAAc,GAAG,QAAQ,CAAC;GAChC,QAAQ,GAAG,qBAAqB,CAAC,QAAQ,EAAE,IAAI,EAAE,IAAI;;AAEvD;AACA;GACE,IAAI,QAAQ,CAAC,QAAQ,IAAI,KAAK,CAAC,MAAM,EAAE;AACzC,KAAI,OAAO;AACX,GAAA;;AAEA;GACE,QAAQ,CAAC,QAAQ;;AAEnB;GACE,MAAM,WAAW,GAAG,KAAK,CAAC,KAAK,CAAC,cAAc,GAAG,CAAC;;AAEpD;AACA,GAAE,IAAI,IAAI,GAAG,mBAAmB,CAAC,WAAW;;AAE5C;AACA;AACA;AACA,GAAE,IAAI,uBAAuB,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE;AAC9C;AACA,KAAI,MAAM,UAAU,GAAG,gBAAgB,CAAC,IAAI;;AAE5C;AACA;AACA,KAAI,IAAI,GAAG,eAAe,CAAC,UAAU;;AAErC;AACA,KAAI,IAAI,IAAI,KAAK,SAAS,EAAE;AAC5B,OAAM,OAAO;AACb,KAAA;;AAEA;KACI,QAAQ,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE;;AAEnC;AACA;KACI,QAAQ,GAAG,QAAQ,CAAC,OAAO,CAAC,YAAY,EAAE,EAAE;;AAEhD;KACI,QAAQ,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE;AACnC,GAAA;;AAEA;AACA;AACA,GAAE,IAAI,QAAQ,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE;KAC5B,QAAQ,GAAG,YAAY,GAAG;AAC9B,GAAA;;AAEA;AACA;AACA,GAAE,IAAI,cAAc,GAAG,aAAa,CAAC,QAAQ;;AAE7C;AACA;AACA,GAAE,IAAI,cAAc,KAAK,SAAS,EAAE;AACpC,KAAI,cAAc,GAAG,aAAa,CAAC,6BAA6B;AAChE,GAAA;;AAEA;AACA;AACA;AACA,GAAE,OAAO,EAAE,QAAQ,EAAE,cAAc,EAAE,IAAI;AACzC,CAAA;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAA,SAAS,aAAa,EAAE,GAAG,EAAE,eAAe,GAAG,KAAK,EAAE;GACpD,IAAI,CAAC,eAAe,EAAE;KACpB,OAAO,GAAG,CAAC;AACf,GAAA;;AAEA,GAAE,MAAM,IAAI,GAAG,GAAG,CAAC;AACnB,GAAE,MAAM,UAAU,GAAG,GAAG,CAAC,IAAI,CAAC;;AAE9B,GAAE,OAAO,UAAU,KAAK,CAAC,GAAG,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,GAAG,UAAU;AAC7E,CAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,CAAA,SAAS,4BAA4B,EAAE,SAAS,EAAE,KAAK,EAAE,QAAQ,EAAE;AACnE;GACE,IAAI,MAAM,GAAG;;AAEf;AACA;AACA,GAAE,OAAO,QAAQ,CAAC,QAAQ,GAAG,KAAK,CAAC,MAAM,IAAI,SAAS,CAAC,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,EAAE;AAClF;AACA,KAAI,MAAM,IAAI,KAAK,CAAC,QAAQ,CAAC,QAAQ;;AAErC;KACI,QAAQ,CAAC,QAAQ;AACrB,GAAA;;AAEA;AACA,GAAE,OAAO;AACT,CAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,CAAA,SAAS,gCAAgC,EAAE,IAAI,EAAE,KAAK,EAAE,QAAQ,EAAE;GAChE,MAAM,GAAG,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,EAAE,QAAQ,CAAC,QAAQ;AACnD,GAAE,MAAM,KAAK,GAAG,QAAQ,CAAC;;AAEzB,GAAE,IAAI,GAAG,KAAK,EAAE,EAAE;AAClB,KAAI,QAAQ,CAAC,QAAQ,GAAG,KAAK,CAAC;AAC9B,KAAI,OAAO,KAAK,CAAC,KAAK,CAAC,KAAK;AAC5B,GAAA;;GAEE,QAAQ,CAAC,QAAQ,GAAG;GACpB,OAAO,KAAK,CAAC,KAAK,CAAC,KAAK,EAAE,QAAQ,CAAC,QAAQ;AAC7C,CAAA;;AAEA;AACA;CACA,SAAS,mBAAmB,EAAE,KAAK,EAAE;AACrC;AACA,GAAE,MAAM,KAAK,GAAG,OAAO,CAAC,MAAM,CAAC,KAAK;;AAEpC;GACE,OAAO,aAAa,CAAC,KAAK;AAC5B,CAAA;;AAEA;AACA;CACA,SAAS,aAAa,EAAE,KAAK,EAAE;AAC/B;AACA;GACE,MAAM,MAAM,GAAG;;AAEjB;AACA,GAAE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACzC,KAAI,MAAM,IAAI,GAAG,KAAK,CAAC,CAAC;;AAExB;AACA,KAAI,IAAI,IAAI,KAAK,IAAI,EAAE;AACvB,OAAM,MAAM,CAAC,IAAI,CAAC,IAAI;;AAEtB;AACA;AACA;AACA;AACA;AACA,KAAA,CAAK,MAAM;OACL,IAAI,KAAK,IAAI;OACb,CAAC,mBAAmB,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;OACzE;AACN,OAAM,MAAM,CAAC,IAAI,CAAC,IAAI;;AAEtB;AACA,KAAA,CAAK,MAAM;AACX;AACA;AACA,OAAM,MAAM,YAAY,GAAG,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC;OACnE,MAAM,SAAS,GAAG,MAAM,CAAC,QAAQ,CAAC,YAAY,EAAE,EAAE;;AAExD;AACA,OAAM,MAAM,CAAC,IAAI,CAAC,SAAS;;AAE3B;AACA,OAAM,CAAC,IAAI;AACX,KAAA;AACA,GAAA;;AAEA;AACA,GAAE,OAAO,UAAU,CAAC,IAAI,CAAC,MAAM;AAC/B,CAAA;;AAEA;AACA;CACA,SAAS,aAAa,EAAE,KAAK,EAAE;AAC/B;AACA;GACE,KAAK,GAAG,oBAAoB,CAAC,KAAK,EAAE,IAAI,EAAE,IAAI;;AAEhD;AACA;AACA,GAAE,MAAM,QAAQ,GAAG,EAAE,QAAQ,EAAE,CAAC;;AAEhC;AACA;AACA;GACE,MAAM,IAAI,GAAG,gCAAgC;AAC/C,KAAI,GAAG;AACP,KAAI,KAAK;KACL;AACJ;;AAEA;AACA;AACA;AACA,GAAE,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;AAC9D,KAAI,OAAO;AACX,GAAA;;AAEA;AACA;GACE,IAAI,QAAQ,CAAC,QAAQ,GAAG,KAAK,CAAC,MAAM,EAAE;AACxC,KAAI,OAAO;AACX,GAAA;;AAEA;GACE,QAAQ,CAAC,QAAQ;;AAEnB;AACA;AACA;GACE,IAAI,OAAO,GAAG,gCAAgC;AAChD,KAAI,GAAG;AACP,KAAI,KAAK;KACL;AACJ;;AAEA;GACE,OAAO,GAAG,oBAAoB,CAAC,OAAO,EAAE,KAAK,EAAE,IAAI;;AAErD;AACA;AACA,GAAE,IAAI,OAAO,CAAC,MAAM,KAAK,CAAC,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE;AACpE,KAAI,OAAO;AACX,GAAA;;AAEA,GAAE,MAAM,aAAa,GAAG,IAAI,CAAC,WAAW;AACxC,GAAE,MAAM,gBAAgB,GAAG,OAAO,CAAC,WAAW;;AAE9C;AACA;AACA;AACA;GACE,MAAM,QAAQ,GAAG;KACf,IAAI,EAAE,aAAa;KACnB,OAAO,EAAE,gBAAgB;AAC7B;AACA,KAAI,UAAU,EAAE,IAAI,GAAG,EAAE;AACzB;KACI,OAAO,EAAE,CAAC,EAAE,aAAa,CAAC,CAAC,EAAE,gBAAgB,CAAC;AAClD;;AAEA;GACE,OAAO,QAAQ,CAAC,QAAQ,GAAG,KAAK,CAAC,MAAM,EAAE;AAC3C;KACI,QAAQ,CAAC,QAAQ;;AAErB;AACA;AACA,KAAI,4BAA4B;AAChC;AACA,OAAM,IAAI,IAAI,qBAAqB,CAAC,IAAI,CAAC,IAAI,CAAC;AAC9C,OAAM,KAAK;OACL;AACN;;AAEA;AACA;AACA;KACI,IAAI,aAAa,GAAG,4BAA4B;OAC9C,CAAC,IAAI,KAAK,IAAI,KAAK,GAAG,IAAI,IAAI,KAAK,GAAG;AAC5C,OAAM,KAAK;OACL;AACN;;AAEA;AACA;AACA,KAAI,aAAa,GAAG,aAAa,CAAC,WAAW;;AAE7C;KACI,IAAI,QAAQ,CAAC,QAAQ,GAAG,KAAK,CAAC,MAAM,EAAE;AAC1C;AACA;OACM,IAAI,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAK,GAAG,EAAE;SACpC;AACR,OAAA;;AAEA;OACM,QAAQ,CAAC,QAAQ;AACvB,KAAA;;AAEA;KACI,IAAI,QAAQ,CAAC,QAAQ,GAAG,KAAK,CAAC,MAAM,EAAE;OACpC;AACN,KAAA;;AAEA;KACI,IAAI,cAAc,GAAG;;AAEzB;AACA;KACI,IAAI,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAK,GAAG,EAAE;AAC1C;AACA;AACA;OACM,cAAc,GAAG,yBAAyB,CAAC,KAAK,EAAE,QAAQ,EAAE,IAAI;;AAEtE;AACA;AACA,OAAM,gCAAgC;AACtC,SAAQ,GAAG;AACX,SAAQ,KAAK;SACL;AACR;;AAEA;AACA,KAAA,CAAK,MAAM;AACX;AACA;AACA;OACM,cAAc,GAAG,gCAAgC;AACvD,SAAQ,GAAG;AACX,SAAQ,KAAK;SACL;AACR;;AAEA;OACM,cAAc,GAAG,oBAAoB,CAAC,cAAc,EAAE,KAAK,EAAE,IAAI;;AAEvE;AACA,OAAM,IAAI,cAAc,CAAC,MAAM,KAAK,CAAC,EAAE;SAC/B;AACR,OAAA;AACA,KAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;KACI;AACJ,OAAM,aAAa,CAAC,MAAM,KAAK,CAAC;AAChC,OAAM,qBAAqB,CAAC,IAAI,CAAC,aAAa,CAAC;AAC/C,QAAO,cAAc,CAAC,MAAM,KAAK,CAAC,IAAI,yBAAyB,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;AACrF,OAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,GAAG,CAAC,aAAa;OACtC;OACA,QAAQ,CAAC,UAAU,CAAC,GAAG,CAAC,aAAa,EAAE,cAAc;AAC3D,KAAA;AACA,GAAA;;AAEA;AACA,GAAE,OAAO;AACT,CAAA;;AAEA;AACA;CACA,SAAS,eAAe,EAAE,IAAI,EAAE;AAChC;GACE,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,mCAAmC,EAAE,EAAE,EAAC;;AAE9D;AACA;GACE,IAAI,IAAI,CAAC,MAAM,GAAG,CAAC,KAAK,CAAC,EAAE;AAC7B;AACA;KACI,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE;AAClC,GAAA;;AAEA;AACA;GACE,IAAI,IAAI,CAAC,MAAM,GAAG,CAAC,KAAK,CAAC,EAAE;AAC7B,KAAI,OAAO;AACX,GAAA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAE,IAAI,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;AACnC,KAAI,OAAO;AACX,GAAA;;AAEA,GAAE,MAAM,MAAM,GAAG,IAAI,CAAC,IAAI;GACxB,MAAM,KAAK,GAAG,IAAI,UAAU,CAAC,MAAM,CAAC,MAAM;;AAE5C,GAAE,KAAK,IAAI,IAAI,GAAG,CAAC,EAAE,IAAI,GAAG,MAAM,CAAC,MAAM,EAAE,IAAI,EAAE,EAAE;KAC/C,KAAK,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC,UAAU,CAAC,IAAI;AACxC,GAAA;;AAEA,GAAE,OAAO;AACT,CAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAA,SAAS,yBAAyB,EAAE,KAAK,EAAE,QAAQ,EAAE,YAAY,EAAE;AACnE;AACA,GAAE,MAAM,aAAa,GAAG,QAAQ,CAAC;;AAEjC;GACE,IAAI,KAAK,GAAG;;AAEd;AACA;GACE,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAK,GAAG;;AAEzC;GACE,QAAQ,CAAC,QAAQ;;AAEnB;GACE,OAAO,IAAI,EAAE;AACf;AACA;AACA;KACI,KAAK,IAAI,4BAA4B;OACnC,CAAC,IAAI,KAAK,IAAI,KAAK,GAAG,IAAI,IAAI,KAAK,IAAI;AAC7C,OAAM,KAAK;OACL;AACN;;AAEA;KACI,IAAI,QAAQ,CAAC,QAAQ,IAAI,KAAK,CAAC,MAAM,EAAE;OACrC;AACN,KAAA;;AAEA;AACA;AACA,KAAI,MAAM,gBAAgB,GAAG,KAAK,CAAC,QAAQ,CAAC,QAAQ;;AAEpD;KACI,QAAQ,CAAC,QAAQ;;AAErB;AACA,KAAI,IAAI,gBAAgB,KAAK,IAAI,EAAE;AACnC;AACA;OACM,IAAI,QAAQ,CAAC,QAAQ,IAAI,KAAK,CAAC,MAAM,EAAE;AAC7C,SAAQ,KAAK,IAAI;SACT;AACR,OAAA;;AAEA;AACA,OAAM,KAAK,IAAI,KAAK,CAAC,QAAQ,CAAC,QAAQ;;AAEtC;OACM,QAAQ,CAAC,QAAQ;;AAEvB;AACA,KAAA,CAAK,MAAM;AACX;AACA,OAAM,MAAM,CAAC,gBAAgB,KAAK,GAAG;;AAErC;OACM;AACN,KAAA;AACA,GAAA;;AAEA;GACE,IAAI,YAAY,EAAE;AACpB,KAAI,OAAO;AACX,GAAA;;AAEA;AACA;GACE,OAAO,KAAK,CAAC,KAAK,CAAC,aAAa,EAAE,QAAQ,CAAC,QAAQ;AACrD,CAAA;;AAEA;AACA;AACA;CACA,SAAS,kBAAkB,EAAE,QAAQ,EAAE;AACvC,GAAE,MAAM,CAAC,QAAQ,KAAK,SAAS;AAC/B,GAAE,MAAM,EAAE,UAAU,EAAE,OAAO,EAAE,GAAG;;AAElC;AACA;GACE,IAAI,aAAa,GAAG;;AAEtB;AACA,GAAE,KAAK,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,IAAI,UAAU,CAAC,OAAO,EAAE,EAAE;AAClD;AACA,KAAI,aAAa,IAAI;;AAErB;AACA,KAAI,aAAa,IAAI;;AAErB;AACA,KAAI,aAAa,IAAI;;AAErB;AACA;KACI,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;AAC5C;AACA;OACM,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,SAAS,EAAE,MAAM;;AAE7C;OACM,KAAK,GAAG,GAAG,GAAG;;AAEpB;AACA,OAAM,KAAK,IAAI;AACf,KAAA;;AAEA;AACA,KAAI,aAAa,IAAI;AACrB,GAAA;;AAEA;AACA,GAAE,OAAO;AACT,CAAA;;AAEA;AACA;AACA;AACA;CACA,SAAS,gBAAgB,EAAE,IAAI,EAAE;AACjC,GAAE,OAAO,IAAI,KAAK,IAAI,IAAI,IAAI,KAAK,IAAI,IAAI,IAAI,KAAK,IAAI,IAAI,IAAI,KAAK;AACrE,CAAA;;AAEA;AACA;AACA;AACA;CACA,SAAS,oBAAoB,EAAE,GAAG,EAAE,OAAO,GAAG,IAAI,EAAE,QAAQ,GAAG,IAAI,EAAE;GACnE,IAAI,IAAI,GAAG;AACb,GAAE,IAAI,KAAK,GAAG,GAAG,CAAC,MAAM,GAAG;;GAEzB,IAAI,OAAO,EAAE;AACf,KAAI,OAAO,IAAI,GAAG,GAAG,CAAC,MAAM,IAAI,gBAAgB,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,EAAE,CAAC;AACpE,GAAA;;GAEE,IAAI,QAAQ,EAAE;AAChB,KAAI,OAAO,KAAK,GAAG,CAAC,IAAI,gBAAgB,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC;AAC9D,GAAA;;GAEE,OAAO,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,GAAG,CAAC;AAClC,CAAA;;AAEA;AACA;AACA;AACA;CACA,SAAS,iBAAiB,EAAE,IAAI,EAAE;AAClC,GAAE,OAAO,IAAI,KAAK,IAAI,IAAI,IAAI,KAAK,IAAI,IAAI,IAAI,KAAK,IAAI,IAAI,IAAI,KAAK,IAAI,IAAI,IAAI,KAAK;AACtF,CAAA;;AAEA;AACA;AACA;CACA,SAAS,qBAAqB,EAAE,GAAG,EAAE,OAAO,GAAG,IAAI,EAAE,QAAQ,GAAG,IAAI,EAAE;GACpE,IAAI,IAAI,GAAG;AACb,GAAE,IAAI,KAAK,GAAG,GAAG,CAAC,MAAM,GAAG;;GAEzB,IAAI,OAAO,EAAE;AACf,KAAI,OAAO,IAAI,GAAG,GAAG,CAAC,MAAM,IAAI,iBAAiB,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,EAAE,CAAC;AACrE,GAAA;;GAEE,IAAI,QAAQ,EAAE;AAChB,KAAI,OAAO,KAAK,GAAG,CAAC,IAAI,iBAAiB,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC;AAC/D,GAAA;;GAEE,OAAO,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,GAAG,CAAC;AAClC,CAAA;;AAEA,CAAA,OAAc,GAAG;AACjB,GAAE,gBAAgB;AAClB,GAAE,aAAa;AACf,GAAE,4BAA4B;AAC9B,GAAE,gCAAgC;AAClC,GAAE,mBAAmB;AACrB,GAAE,aAAa;AACf,GAAE,yBAAyB;GACzB;AACF;;;;;;","x_google_ignoreList":[0]}