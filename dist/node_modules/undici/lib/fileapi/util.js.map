{"version":3,"file":"util.js","sources":["../../../../../node_modules/undici/lib/fileapi/util.js"],"sourcesContent":["'use strict'\n\nconst {\n  kState,\n  kError,\n  kResult,\n  kAborted,\n  kLastProgressEventFired\n} = require('./symbols')\nconst { ProgressEvent } = require('./progressevent')\nconst { getEncoding } = require('./encoding')\nconst { DOMException } = require('../fetch/constants')\nconst { serializeAMimeType, parseMIMEType } = require('../fetch/dataURL')\nconst { types } = require('util')\nconst { StringDecoder } = require('string_decoder')\nconst { btoa } = require('buffer')\n\n/** @type {PropertyDescriptor} */\nconst staticPropertyDescriptors = {\n  enumerable: true,\n  writable: false,\n  configurable: false\n}\n\n/**\n * @see https://w3c.github.io/FileAPI/#readOperation\n * @param {import('./filereader').FileReader} fr\n * @param {import('buffer').Blob} blob\n * @param {string} type\n * @param {string?} encodingName\n */\nfunction readOperation (fr, blob, type, encodingName) {\n  // 1. If fr’s state is \"loading\", throw an InvalidStateError\n  //    DOMException.\n  if (fr[kState] === 'loading') {\n    throw new DOMException('Invalid state', 'InvalidStateError')\n  }\n\n  // 2. Set fr’s state to \"loading\".\n  fr[kState] = 'loading'\n\n  // 3. Set fr’s result to null.\n  fr[kResult] = null\n\n  // 4. Set fr’s error to null.\n  fr[kError] = null\n\n  // 5. Let stream be the result of calling get stream on blob.\n  /** @type {import('stream/web').ReadableStream} */\n  const stream = blob.stream()\n\n  // 6. Let reader be the result of getting a reader from stream.\n  const reader = stream.getReader()\n\n  // 7. Let bytes be an empty byte sequence.\n  /** @type {Uint8Array[]} */\n  const bytes = []\n\n  // 8. Let chunkPromise be the result of reading a chunk from\n  //    stream with reader.\n  let chunkPromise = reader.read()\n\n  // 9. Let isFirstChunk be true.\n  let isFirstChunk = true\n\n  // 10. In parallel, while true:\n  // Note: \"In parallel\" just means non-blocking\n  // Note 2: readOperation itself cannot be async as double\n  // reading the body would then reject the promise, instead\n  // of throwing an error.\n  ;(async () => {\n    while (!fr[kAborted]) {\n      // 1. Wait for chunkPromise to be fulfilled or rejected.\n      try {\n        const { done, value } = await chunkPromise\n\n        // 2. If chunkPromise is fulfilled, and isFirstChunk is\n        //    true, queue a task to fire a progress event called\n        //    loadstart at fr.\n        if (isFirstChunk && !fr[kAborted]) {\n          queueMicrotask(() => {\n            fireAProgressEvent('loadstart', fr)\n          })\n        }\n\n        // 3. Set isFirstChunk to false.\n        isFirstChunk = false\n\n        // 4. If chunkPromise is fulfilled with an object whose\n        //    done property is false and whose value property is\n        //    a Uint8Array object, run these steps:\n        if (!done && types.isUint8Array(value)) {\n          // 1. Let bs be the byte sequence represented by the\n          //    Uint8Array object.\n\n          // 2. Append bs to bytes.\n          bytes.push(value)\n\n          // 3. If roughly 50ms have passed since these steps\n          //    were last invoked, queue a task to fire a\n          //    progress event called progress at fr.\n          if (\n            (\n              fr[kLastProgressEventFired] === undefined ||\n              Date.now() - fr[kLastProgressEventFired] >= 50\n            ) &&\n            !fr[kAborted]\n          ) {\n            fr[kLastProgressEventFired] = Date.now()\n            queueMicrotask(() => {\n              fireAProgressEvent('progress', fr)\n            })\n          }\n\n          // 4. Set chunkPromise to the result of reading a\n          //    chunk from stream with reader.\n          chunkPromise = reader.read()\n        } else if (done) {\n          // 5. Otherwise, if chunkPromise is fulfilled with an\n          //    object whose done property is true, queue a task\n          //    to run the following steps and abort this algorithm:\n          queueMicrotask(() => {\n            // 1. Set fr’s state to \"done\".\n            fr[kState] = 'done'\n\n            // 2. Let result be the result of package data given\n            //    bytes, type, blob’s type, and encodingName.\n            try {\n              const result = packageData(bytes, type, blob.type, encodingName)\n\n              // 4. Else:\n\n              if (fr[kAborted]) {\n                return\n              }\n\n              // 1. Set fr’s result to result.\n              fr[kResult] = result\n\n              // 2. Fire a progress event called load at the fr.\n              fireAProgressEvent('load', fr)\n            } catch (error) {\n              // 3. If package data threw an exception error:\n\n              // 1. Set fr’s error to error.\n              fr[kError] = error\n\n              // 2. Fire a progress event called error at fr.\n              fireAProgressEvent('error', fr)\n            }\n\n            // 5. If fr’s state is not \"loading\", fire a progress\n            //    event called loadend at the fr.\n            if (fr[kState] !== 'loading') {\n              fireAProgressEvent('loadend', fr)\n            }\n          })\n\n          break\n        }\n      } catch (error) {\n        if (fr[kAborted]) {\n          return\n        }\n\n        // 6. Otherwise, if chunkPromise is rejected with an\n        //    error error, queue a task to run the following\n        //    steps and abort this algorithm:\n        queueMicrotask(() => {\n          // 1. Set fr’s state to \"done\".\n          fr[kState] = 'done'\n\n          // 2. Set fr’s error to error.\n          fr[kError] = error\n\n          // 3. Fire a progress event called error at fr.\n          fireAProgressEvent('error', fr)\n\n          // 4. If fr’s state is not \"loading\", fire a progress\n          //    event called loadend at fr.\n          if (fr[kState] !== 'loading') {\n            fireAProgressEvent('loadend', fr)\n          }\n        })\n\n        break\n      }\n    }\n  })()\n}\n\n/**\n * @see https://w3c.github.io/FileAPI/#fire-a-progress-event\n * @see https://dom.spec.whatwg.org/#concept-event-fire\n * @param {string} e The name of the event\n * @param {import('./filereader').FileReader} reader\n */\nfunction fireAProgressEvent (e, reader) {\n  // The progress event e does not bubble. e.bubbles must be false\n  // The progress event e is NOT cancelable. e.cancelable must be false\n  const event = new ProgressEvent(e, {\n    bubbles: false,\n    cancelable: false\n  })\n\n  reader.dispatchEvent(event)\n}\n\n/**\n * @see https://w3c.github.io/FileAPI/#blob-package-data\n * @param {Uint8Array[]} bytes\n * @param {string} type\n * @param {string?} mimeType\n * @param {string?} encodingName\n */\nfunction packageData (bytes, type, mimeType, encodingName) {\n  // 1. A Blob has an associated package data algorithm, given\n  //    bytes, a type, a optional mimeType, and a optional\n  //    encodingName, which switches on type and runs the\n  //    associated steps:\n\n  switch (type) {\n    case 'DataURL': {\n      // 1. Return bytes as a DataURL [RFC2397] subject to\n      //    the considerations below:\n      //  * Use mimeType as part of the Data URL if it is\n      //    available in keeping with the Data URL\n      //    specification [RFC2397].\n      //  * If mimeType is not available return a Data URL\n      //    without a media-type. [RFC2397].\n\n      // https://datatracker.ietf.org/doc/html/rfc2397#section-3\n      // dataurl    := \"data:\" [ mediatype ] [ \";base64\" ] \",\" data\n      // mediatype  := [ type \"/\" subtype ] *( \";\" parameter )\n      // data       := *urlchar\n      // parameter  := attribute \"=\" value\n      let dataURL = 'data:'\n\n      const parsed = parseMIMEType(mimeType || 'application/octet-stream')\n\n      if (parsed !== 'failure') {\n        dataURL += serializeAMimeType(parsed)\n      }\n\n      dataURL += ';base64,'\n\n      const decoder = new StringDecoder('latin1')\n\n      for (const chunk of bytes) {\n        dataURL += btoa(decoder.write(chunk))\n      }\n\n      dataURL += btoa(decoder.end())\n\n      return dataURL\n    }\n    case 'Text': {\n      // 1. Let encoding be failure\n      let encoding = 'failure'\n\n      // 2. If the encodingName is present, set encoding to the\n      //    result of getting an encoding from encodingName.\n      if (encodingName) {\n        encoding = getEncoding(encodingName)\n      }\n\n      // 3. If encoding is failure, and mimeType is present:\n      if (encoding === 'failure' && mimeType) {\n        // 1. Let type be the result of parse a MIME type\n        //    given mimeType.\n        const type = parseMIMEType(mimeType)\n\n        // 2. If type is not failure, set encoding to the result\n        //    of getting an encoding from type’s parameters[\"charset\"].\n        if (type !== 'failure') {\n          encoding = getEncoding(type.parameters.get('charset'))\n        }\n      }\n\n      // 4. If encoding is failure, then set encoding to UTF-8.\n      if (encoding === 'failure') {\n        encoding = 'UTF-8'\n      }\n\n      // 5. Decode bytes using fallback encoding encoding, and\n      //    return the result.\n      return decode(bytes, encoding)\n    }\n    case 'ArrayBuffer': {\n      // Return a new ArrayBuffer whose contents are bytes.\n      const sequence = combineByteSequences(bytes)\n\n      return sequence.buffer\n    }\n    case 'BinaryString': {\n      // Return bytes as a binary string, in which every byte\n      //  is represented by a code unit of equal value [0..255].\n      let binaryString = ''\n\n      const decoder = new StringDecoder('latin1')\n\n      for (const chunk of bytes) {\n        binaryString += decoder.write(chunk)\n      }\n\n      binaryString += decoder.end()\n\n      return binaryString\n    }\n  }\n}\n\n/**\n * @see https://encoding.spec.whatwg.org/#decode\n * @param {Uint8Array[]} ioQueue\n * @param {string} encoding\n */\nfunction decode (ioQueue, encoding) {\n  const bytes = combineByteSequences(ioQueue)\n\n  // 1. Let BOMEncoding be the result of BOM sniffing ioQueue.\n  const BOMEncoding = BOMSniffing(bytes)\n\n  let slice = 0\n\n  // 2. If BOMEncoding is non-null:\n  if (BOMEncoding !== null) {\n    // 1. Set encoding to BOMEncoding.\n    encoding = BOMEncoding\n\n    // 2. Read three bytes from ioQueue, if BOMEncoding is\n    //    UTF-8; otherwise read two bytes.\n    //    (Do nothing with those bytes.)\n    slice = BOMEncoding === 'UTF-8' ? 3 : 2\n  }\n\n  // 3. Process a queue with an instance of encoding’s\n  //    decoder, ioQueue, output, and \"replacement\".\n\n  // 4. Return output.\n\n  const sliced = bytes.slice(slice)\n  return new TextDecoder(encoding).decode(sliced)\n}\n\n/**\n * @see https://encoding.spec.whatwg.org/#bom-sniff\n * @param {Uint8Array} ioQueue\n */\nfunction BOMSniffing (ioQueue) {\n  // 1. Let BOM be the result of peeking 3 bytes from ioQueue,\n  //    converted to a byte sequence.\n  const [a, b, c] = ioQueue\n\n  // 2. For each of the rows in the table below, starting with\n  //    the first one and going down, if BOM starts with the\n  //    bytes given in the first column, then return the\n  //    encoding given in the cell in the second column of that\n  //    row. Otherwise, return null.\n  if (a === 0xEF && b === 0xBB && c === 0xBF) {\n    return 'UTF-8'\n  } else if (a === 0xFE && b === 0xFF) {\n    return 'UTF-16BE'\n  } else if (a === 0xFF && b === 0xFE) {\n    return 'UTF-16LE'\n  }\n\n  return null\n}\n\n/**\n * @param {Uint8Array[]} sequences\n */\nfunction combineByteSequences (sequences) {\n  const size = sequences.reduce((a, b) => {\n    return a + b.byteLength\n  }, 0)\n\n  let offset = 0\n\n  return sequences.reduce((a, b) => {\n    a.set(b, offset)\n    offset += b.byteLength\n    return a\n  }, new Uint8Array(size))\n}\n\nmodule.exports = {\n  staticPropertyDescriptors,\n  readOperation,\n  fireAProgressEvent\n}\n"],"names":["require$$0","require$$1","require$$2","require$$3","require$$4","require$$5"],"mappings":"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","x_google_ignoreList":[0]}