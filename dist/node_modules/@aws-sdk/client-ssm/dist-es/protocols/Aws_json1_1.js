import '../../../../@smithy/types/dist-es/auth/auth.js';
import '../../../../@smithy/types/dist-es/auth/HttpApiKeyAuth.js';
import '../../../../@smithy/types/dist-es/endpoint.js';
import '../../../../@smithy/types/dist-es/extensions/checksum.js';
import '../../../../@smithy/types/dist-es/http.js';
import '../../../../@smithy/types/dist-es/profile.js';
import '../../../../@smithy/types/dist-es/transfer.js';
import { HttpRequest } from '../../../../@smithy/protocol-http/dist-es/httpRequest.js';
import { withBaseException } from '../../../../@smithy/smithy-client/dist-es/default-error-handler.js';
import { decorateServiceException } from '../../../../@smithy/smithy-client/dist-es/exceptions.js';
import { take } from '../../../../@smithy/smithy-client/dist-es/object-mapping.js';
import { _json } from '../../../../@smithy/smithy-client/dist-es/serde-json.js';
import { AlreadyExistsException, AccessDeniedException, InvalidDeletionIdException, InvalidInstancePropertyFilterValue, InvalidInstanceInformationFilterValue, UnsupportedOperatingSystem, InvalidPermissionType, AutomationExecutionNotFoundException, InvalidFilterValue, InvalidFilterKey, AssociationExecutionDoesNotExist, InvalidAssociationVersion, InvalidNextToken, InvalidFilter, TargetInUseException, ResourcePolicyNotFoundException, ResourcePolicyInvalidParameterException, ResourcePolicyConflictException, ResourceNotFoundException, MalformedResourcePolicyDocumentException, ResourceDataSyncNotFoundException, ResourceInUseException, ParameterNotFound, OpsMetadataNotFoundException, InvalidTypeNameException, InvalidOptionException, InvalidInventoryRequestException, InvalidDeleteInventoryParametersException, InvalidDocumentOperation, AssociatedInstances, AssociationDoesNotExist, InvalidActivationId, InvalidActivation, ResourceDataSyncInvalidConfigurationException, ResourceDataSyncCountExceededException, ResourceDataSyncAlreadyExistsException, OpsMetadataTooManyUpdatesException, OpsMetadataLimitExceededException, OpsMetadataInvalidArgumentException, OpsMetadataAlreadyExistsException, OpsItemAlreadyExistsException, OpsItemAccessDeniedException, ResourceLimitExceededException, IdempotentParameterMismatch, MaxDocumentSizeExceeded, InvalidDocumentSchemaVersion, InvalidDocumentContent, DocumentLimitExceeded, DocumentAlreadyExists, UnsupportedPlatformType, InvalidTargetMaps, InvalidTarget, InvalidTag, InvalidSchedule, InvalidOutputLocation, InvalidDocumentVersion, InvalidDocument, AssociationLimitExceeded, AssociationAlreadyExists, InvalidParameters, DoesNotExistException, InvalidInstanceId, InvalidCommandId, DuplicateInstanceId, OpsItemRelatedItemAlreadyExistsException, OpsItemNotFoundException, OpsItemLimitExceededException, OpsItemInvalidParameterException, OpsItemConflictException, TooManyUpdates, TooManyTagsError, InvalidResourceType, InvalidResourceId, InternalServerError } from '../models/models_0.js';
import { ResourcePolicyLimitExceededException, UnsupportedParameterType, PoliciesLimitExceededException, ParameterPatternMismatchException, ParameterMaxVersionLimitExceeded, ParameterLimitExceeded, ParameterAlreadyExists, InvalidPolicyTypeException, InvalidPolicyAttributeException, InvalidAllowedPatternException, IncompatiblePolicyException, HierarchyTypeMismatchException, HierarchyLevelLimitExceededException, UnsupportedInventorySchemaVersionException, UnsupportedInventoryItemContextException, SubTypeCountLimitExceededException, ItemContentMismatchException, InvalidInventoryItemContextException, CustomSchemaCountLimitExceededException, TotalSizeLimitExceededException, ItemSizeLimitExceededException, InvalidItemContentException, ComplianceTypeCountLimitExceededException, DocumentPermissionLimit, UnsupportedOperationException, ParameterVersionLabelLimitExceeded, ServiceSettingNotFound, ParameterVersionNotFound, InvalidKeyId, InvalidResultAttributeException, InvalidInventoryGroupException, InvalidAggregatorException, UnsupportedFeatureRequiredException, InvocationDoesNotExist, InvalidPluginName, UnsupportedCalendarException, InvalidDocumentType, ValidationException, ThrottlingException, OpsItemRelatedItemAssociationNotFoundException, InvalidFilterOption } from '../models/models_1.js';
import { ResourceDataSyncConflictException, OpsMetadataKeyLimitExceededException, DuplicateDocumentVersionName, DuplicateDocumentContent, DocumentVersionLimitExceeded, StatusUnchanged, InvalidUpdate, AssociationVersionLimitExceeded, InvalidAutomationStatusUpdateException, TargetNotConnected, AutomationDefinitionNotApprovedException, InvalidAutomationExecutionParametersException, AutomationExecutionLimitExceededException, AutomationDefinitionVersionNotFoundException, AutomationDefinitionNotFoundException, InvalidAssociation, ServiceQuotaExceededException, InvalidRole, InvalidOutputFolder, InvalidNotificationConfig, InvalidAutomationSignalException, AutomationStepNotFoundException, FeatureNotAvailableException } from '../models/models_2.js';
import { SSMServiceException } from '../models/SSMServiceException.js';
import { parseJsonBody, parseJsonErrorBody, loadRestJsonErrorCode } from '../../../core/dist-es/submodules/protocols/json/parseJsonBody.js';
import { expectString, expectInt32, expectNonNull, expectBoolean, expectNumber, expectLong } from '../../../../@smithy/core/dist-es/submodules/serde/parse-utils.js';
import v4 from '../../node_modules/uuid/dist/esm-browser/v4.js';
import { awsExpectUnion } from '../../../core/dist-es/submodules/protocols/json/awsExpectUnion.js';
import { parseEpochTimestamp } from '../../../../@smithy/core/dist-es/submodules/serde/date-utils.js';

const se_AddTagsToResourceCommand = async (input, context) => {
    const headers = sharedHeaders("AddTagsToResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AssociateOpsItemRelatedItemCommand = async (input, context) => {
    const headers = sharedHeaders("AssociateOpsItemRelatedItem");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CancelCommandCommand = async (input, context) => {
    const headers = sharedHeaders("CancelCommand");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CancelMaintenanceWindowExecutionCommand = async (input, context) => {
    const headers = sharedHeaders("CancelMaintenanceWindowExecution");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateActivationCommand = async (input, context) => {
    const headers = sharedHeaders("CreateActivation");
    let body;
    body = JSON.stringify(se_CreateActivationRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateAssociationCommand = async (input, context) => {
    const headers = sharedHeaders("CreateAssociation");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateAssociationBatchCommand = async (input, context) => {
    const headers = sharedHeaders("CreateAssociationBatch");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateDocumentCommand = async (input, context) => {
    const headers = sharedHeaders("CreateDocument");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateMaintenanceWindowCommand = async (input, context) => {
    const headers = sharedHeaders("CreateMaintenanceWindow");
    let body;
    body = JSON.stringify(se_CreateMaintenanceWindowRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateOpsItemCommand = async (input, context) => {
    const headers = sharedHeaders("CreateOpsItem");
    let body;
    body = JSON.stringify(se_CreateOpsItemRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateOpsMetadataCommand = async (input, context) => {
    const headers = sharedHeaders("CreateOpsMetadata");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreatePatchBaselineCommand = async (input, context) => {
    const headers = sharedHeaders("CreatePatchBaseline");
    let body;
    body = JSON.stringify(se_CreatePatchBaselineRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateResourceDataSyncCommand = async (input, context) => {
    const headers = sharedHeaders("CreateResourceDataSync");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteActivationCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteActivation");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteAssociationCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteAssociation");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteDocumentCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteDocument");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteInventoryCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteInventory");
    let body;
    body = JSON.stringify(se_DeleteInventoryRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteMaintenanceWindowCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteMaintenanceWindow");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteOpsItemCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteOpsItem");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteOpsMetadataCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteOpsMetadata");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteParameterCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteParameter");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteParametersCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteParameters");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeletePatchBaselineCommand = async (input, context) => {
    const headers = sharedHeaders("DeletePatchBaseline");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteResourceDataSyncCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteResourceDataSync");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteResourcePolicyCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteResourcePolicy");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeregisterManagedInstanceCommand = async (input, context) => {
    const headers = sharedHeaders("DeregisterManagedInstance");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeregisterPatchBaselineForPatchGroupCommand = async (input, context) => {
    const headers = sharedHeaders("DeregisterPatchBaselineForPatchGroup");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeregisterTargetFromMaintenanceWindowCommand = async (input, context) => {
    const headers = sharedHeaders("DeregisterTargetFromMaintenanceWindow");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeregisterTaskFromMaintenanceWindowCommand = async (input, context) => {
    const headers = sharedHeaders("DeregisterTaskFromMaintenanceWindow");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeActivationsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeActivations");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeAssociationCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeAssociation");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeAssociationExecutionsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeAssociationExecutions");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeAssociationExecutionTargetsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeAssociationExecutionTargets");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeAutomationExecutionsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeAutomationExecutions");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeAutomationStepExecutionsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeAutomationStepExecutions");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeAvailablePatchesCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeAvailablePatches");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeDocumentCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeDocument");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeDocumentPermissionCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeDocumentPermission");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeEffectiveInstanceAssociationsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeEffectiveInstanceAssociations");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeEffectivePatchesForPatchBaselineCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeEffectivePatchesForPatchBaseline");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeInstanceAssociationsStatusCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeInstanceAssociationsStatus");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeInstanceInformationCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeInstanceInformation");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeInstancePatchesCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeInstancePatches");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeInstancePatchStatesCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeInstancePatchStates");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeInstancePatchStatesForPatchGroupCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeInstancePatchStatesForPatchGroup");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeInstancePropertiesCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeInstanceProperties");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeInventoryDeletionsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeInventoryDeletions");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeMaintenanceWindowExecutionsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeMaintenanceWindowExecutions");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeMaintenanceWindowExecutionTaskInvocationsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeMaintenanceWindowExecutionTaskInvocations");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeMaintenanceWindowExecutionTasksCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeMaintenanceWindowExecutionTasks");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeMaintenanceWindowsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeMaintenanceWindows");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeMaintenanceWindowScheduleCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeMaintenanceWindowSchedule");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeMaintenanceWindowsForTargetCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeMaintenanceWindowsForTarget");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeMaintenanceWindowTargetsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeMaintenanceWindowTargets");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeMaintenanceWindowTasksCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeMaintenanceWindowTasks");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeOpsItemsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeOpsItems");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeParametersCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeParameters");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribePatchBaselinesCommand = async (input, context) => {
    const headers = sharedHeaders("DescribePatchBaselines");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribePatchGroupsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribePatchGroups");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribePatchGroupStateCommand = async (input, context) => {
    const headers = sharedHeaders("DescribePatchGroupState");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribePatchPropertiesCommand = async (input, context) => {
    const headers = sharedHeaders("DescribePatchProperties");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeSessionsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeSessions");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DisassociateOpsItemRelatedItemCommand = async (input, context) => {
    const headers = sharedHeaders("DisassociateOpsItemRelatedItem");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetAccessTokenCommand = async (input, context) => {
    const headers = sharedHeaders("GetAccessToken");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetAutomationExecutionCommand = async (input, context) => {
    const headers = sharedHeaders("GetAutomationExecution");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetCalendarStateCommand = async (input, context) => {
    const headers = sharedHeaders("GetCalendarState");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetCommandInvocationCommand = async (input, context) => {
    const headers = sharedHeaders("GetCommandInvocation");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetConnectionStatusCommand = async (input, context) => {
    const headers = sharedHeaders("GetConnectionStatus");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetDefaultPatchBaselineCommand = async (input, context) => {
    const headers = sharedHeaders("GetDefaultPatchBaseline");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetDeployablePatchSnapshotForInstanceCommand = async (input, context) => {
    const headers = sharedHeaders("GetDeployablePatchSnapshotForInstance");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetDocumentCommand = async (input, context) => {
    const headers = sharedHeaders("GetDocument");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetExecutionPreviewCommand = async (input, context) => {
    const headers = sharedHeaders("GetExecutionPreview");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetInventoryCommand = async (input, context) => {
    const headers = sharedHeaders("GetInventory");
    let body;
    body = JSON.stringify(se_GetInventoryRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetInventorySchemaCommand = async (input, context) => {
    const headers = sharedHeaders("GetInventorySchema");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetMaintenanceWindowCommand = async (input, context) => {
    const headers = sharedHeaders("GetMaintenanceWindow");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetMaintenanceWindowExecutionCommand = async (input, context) => {
    const headers = sharedHeaders("GetMaintenanceWindowExecution");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetMaintenanceWindowExecutionTaskCommand = async (input, context) => {
    const headers = sharedHeaders("GetMaintenanceWindowExecutionTask");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetMaintenanceWindowExecutionTaskInvocationCommand = async (input, context) => {
    const headers = sharedHeaders("GetMaintenanceWindowExecutionTaskInvocation");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetMaintenanceWindowTaskCommand = async (input, context) => {
    const headers = sharedHeaders("GetMaintenanceWindowTask");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetOpsItemCommand = async (input, context) => {
    const headers = sharedHeaders("GetOpsItem");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetOpsMetadataCommand = async (input, context) => {
    const headers = sharedHeaders("GetOpsMetadata");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetOpsSummaryCommand = async (input, context) => {
    const headers = sharedHeaders("GetOpsSummary");
    let body;
    body = JSON.stringify(se_GetOpsSummaryRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetParameterCommand = async (input, context) => {
    const headers = sharedHeaders("GetParameter");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetParameterHistoryCommand = async (input, context) => {
    const headers = sharedHeaders("GetParameterHistory");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetParametersCommand = async (input, context) => {
    const headers = sharedHeaders("GetParameters");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetParametersByPathCommand = async (input, context) => {
    const headers = sharedHeaders("GetParametersByPath");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetPatchBaselineCommand = async (input, context) => {
    const headers = sharedHeaders("GetPatchBaseline");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetPatchBaselineForPatchGroupCommand = async (input, context) => {
    const headers = sharedHeaders("GetPatchBaselineForPatchGroup");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetResourcePoliciesCommand = async (input, context) => {
    const headers = sharedHeaders("GetResourcePolicies");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetServiceSettingCommand = async (input, context) => {
    const headers = sharedHeaders("GetServiceSetting");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_LabelParameterVersionCommand = async (input, context) => {
    const headers = sharedHeaders("LabelParameterVersion");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListAssociationsCommand = async (input, context) => {
    const headers = sharedHeaders("ListAssociations");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListAssociationVersionsCommand = async (input, context) => {
    const headers = sharedHeaders("ListAssociationVersions");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListCommandInvocationsCommand = async (input, context) => {
    const headers = sharedHeaders("ListCommandInvocations");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListCommandsCommand = async (input, context) => {
    const headers = sharedHeaders("ListCommands");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListComplianceItemsCommand = async (input, context) => {
    const headers = sharedHeaders("ListComplianceItems");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListComplianceSummariesCommand = async (input, context) => {
    const headers = sharedHeaders("ListComplianceSummaries");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListDocumentMetadataHistoryCommand = async (input, context) => {
    const headers = sharedHeaders("ListDocumentMetadataHistory");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListDocumentsCommand = async (input, context) => {
    const headers = sharedHeaders("ListDocuments");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListDocumentVersionsCommand = async (input, context) => {
    const headers = sharedHeaders("ListDocumentVersions");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListInventoryEntriesCommand = async (input, context) => {
    const headers = sharedHeaders("ListInventoryEntries");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListNodesCommand = async (input, context) => {
    const headers = sharedHeaders("ListNodes");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListNodesSummaryCommand = async (input, context) => {
    const headers = sharedHeaders("ListNodesSummary");
    let body;
    body = JSON.stringify(se_ListNodesSummaryRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListOpsItemEventsCommand = async (input, context) => {
    const headers = sharedHeaders("ListOpsItemEvents");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListOpsItemRelatedItemsCommand = async (input, context) => {
    const headers = sharedHeaders("ListOpsItemRelatedItems");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListOpsMetadataCommand = async (input, context) => {
    const headers = sharedHeaders("ListOpsMetadata");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListResourceComplianceSummariesCommand = async (input, context) => {
    const headers = sharedHeaders("ListResourceComplianceSummaries");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListResourceDataSyncCommand = async (input, context) => {
    const headers = sharedHeaders("ListResourceDataSync");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListTagsForResourceCommand = async (input, context) => {
    const headers = sharedHeaders("ListTagsForResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ModifyDocumentPermissionCommand = async (input, context) => {
    const headers = sharedHeaders("ModifyDocumentPermission");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_PutComplianceItemsCommand = async (input, context) => {
    const headers = sharedHeaders("PutComplianceItems");
    let body;
    body = JSON.stringify(se_PutComplianceItemsRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_PutInventoryCommand = async (input, context) => {
    const headers = sharedHeaders("PutInventory");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_PutParameterCommand = async (input, context) => {
    const headers = sharedHeaders("PutParameter");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_PutResourcePolicyCommand = async (input, context) => {
    const headers = sharedHeaders("PutResourcePolicy");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_RegisterDefaultPatchBaselineCommand = async (input, context) => {
    const headers = sharedHeaders("RegisterDefaultPatchBaseline");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_RegisterPatchBaselineForPatchGroupCommand = async (input, context) => {
    const headers = sharedHeaders("RegisterPatchBaselineForPatchGroup");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_RegisterTargetWithMaintenanceWindowCommand = async (input, context) => {
    const headers = sharedHeaders("RegisterTargetWithMaintenanceWindow");
    let body;
    body = JSON.stringify(se_RegisterTargetWithMaintenanceWindowRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_RegisterTaskWithMaintenanceWindowCommand = async (input, context) => {
    const headers = sharedHeaders("RegisterTaskWithMaintenanceWindow");
    let body;
    body = JSON.stringify(se_RegisterTaskWithMaintenanceWindowRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_RemoveTagsFromResourceCommand = async (input, context) => {
    const headers = sharedHeaders("RemoveTagsFromResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ResetServiceSettingCommand = async (input, context) => {
    const headers = sharedHeaders("ResetServiceSetting");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ResumeSessionCommand = async (input, context) => {
    const headers = sharedHeaders("ResumeSession");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_SendAutomationSignalCommand = async (input, context) => {
    const headers = sharedHeaders("SendAutomationSignal");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_SendCommandCommand = async (input, context) => {
    const headers = sharedHeaders("SendCommand");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_StartAccessRequestCommand = async (input, context) => {
    const headers = sharedHeaders("StartAccessRequest");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_StartAssociationsOnceCommand = async (input, context) => {
    const headers = sharedHeaders("StartAssociationsOnce");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_StartAutomationExecutionCommand = async (input, context) => {
    const headers = sharedHeaders("StartAutomationExecution");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_StartChangeRequestExecutionCommand = async (input, context) => {
    const headers = sharedHeaders("StartChangeRequestExecution");
    let body;
    body = JSON.stringify(se_StartChangeRequestExecutionRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_StartExecutionPreviewCommand = async (input, context) => {
    const headers = sharedHeaders("StartExecutionPreview");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_StartSessionCommand = async (input, context) => {
    const headers = sharedHeaders("StartSession");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_StopAutomationExecutionCommand = async (input, context) => {
    const headers = sharedHeaders("StopAutomationExecution");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_TerminateSessionCommand = async (input, context) => {
    const headers = sharedHeaders("TerminateSession");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UnlabelParameterVersionCommand = async (input, context) => {
    const headers = sharedHeaders("UnlabelParameterVersion");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateAssociationCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateAssociation");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateAssociationStatusCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateAssociationStatus");
    let body;
    body = JSON.stringify(se_UpdateAssociationStatusRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateDocumentCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateDocument");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateDocumentDefaultVersionCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateDocumentDefaultVersion");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateDocumentMetadataCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateDocumentMetadata");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateMaintenanceWindowCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateMaintenanceWindow");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateMaintenanceWindowTargetCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateMaintenanceWindowTarget");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateMaintenanceWindowTaskCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateMaintenanceWindowTask");
    let body;
    body = JSON.stringify(se_UpdateMaintenanceWindowTaskRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateManagedInstanceRoleCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateManagedInstanceRole");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateOpsItemCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateOpsItem");
    let body;
    body = JSON.stringify(se_UpdateOpsItemRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateOpsMetadataCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateOpsMetadata");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdatePatchBaselineCommand = async (input, context) => {
    const headers = sharedHeaders("UpdatePatchBaseline");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateResourceDataSyncCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateResourceDataSync");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateServiceSettingCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateServiceSetting");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const de_AddTagsToResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AssociateOpsItemRelatedItemCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CancelCommandCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CancelMaintenanceWindowExecutionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateActivationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateAssociationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = de_CreateAssociationResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateAssociationBatchCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = de_CreateAssociationBatchResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateDocumentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = de_CreateDocumentResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateMaintenanceWindowCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateOpsItemCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateOpsMetadataCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreatePatchBaselineCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateResourceDataSyncCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteActivationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteAssociationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteDocumentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteInventoryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteMaintenanceWindowCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteOpsItemCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteOpsMetadataCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteParameterCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteParametersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeletePatchBaselineCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteResourceDataSyncCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteResourcePolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeregisterManagedInstanceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeregisterPatchBaselineForPatchGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeregisterTargetFromMaintenanceWindowCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeregisterTaskFromMaintenanceWindowCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeActivationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeActivationsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeAssociationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeAssociationResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeAssociationExecutionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeAssociationExecutionsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeAssociationExecutionTargetsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeAssociationExecutionTargetsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeAutomationExecutionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeAutomationExecutionsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeAutomationStepExecutionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeAutomationStepExecutionsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeAvailablePatchesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeAvailablePatchesResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeDocumentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeDocumentResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeDocumentPermissionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeEffectiveInstanceAssociationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeEffectivePatchesForPatchBaselineCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeEffectivePatchesForPatchBaselineResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeInstanceAssociationsStatusCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeInstanceAssociationsStatusResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeInstanceInformationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeInstanceInformationResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeInstancePatchesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeInstancePatchesResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeInstancePatchStatesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeInstancePatchStatesResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeInstancePatchStatesForPatchGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeInstancePatchStatesForPatchGroupResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeInstancePropertiesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeInstancePropertiesResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeInventoryDeletionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeInventoryDeletionsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeMaintenanceWindowExecutionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeMaintenanceWindowExecutionsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeMaintenanceWindowExecutionTaskInvocationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeMaintenanceWindowExecutionTaskInvocationsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeMaintenanceWindowExecutionTasksCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeMaintenanceWindowExecutionTasksResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeMaintenanceWindowsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeMaintenanceWindowScheduleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeMaintenanceWindowsForTargetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeMaintenanceWindowTargetsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeMaintenanceWindowTasksCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeOpsItemsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeOpsItemsResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeParametersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeParametersResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribePatchBaselinesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribePatchGroupsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribePatchGroupStateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribePatchPropertiesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeSessionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeSessionsResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DisassociateOpsItemRelatedItemCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetAccessTokenCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = de_GetAccessTokenResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetAutomationExecutionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = de_GetAutomationExecutionResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetCalendarStateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetCommandInvocationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetConnectionStatusCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetDefaultPatchBaselineCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetDeployablePatchSnapshotForInstanceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetDocumentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = de_GetDocumentResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetExecutionPreviewCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = de_GetExecutionPreviewResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetInventoryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetInventorySchemaCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetMaintenanceWindowCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = de_GetMaintenanceWindowResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetMaintenanceWindowExecutionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = de_GetMaintenanceWindowExecutionResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetMaintenanceWindowExecutionTaskCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = de_GetMaintenanceWindowExecutionTaskResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetMaintenanceWindowExecutionTaskInvocationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = de_GetMaintenanceWindowExecutionTaskInvocationResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetMaintenanceWindowTaskCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = de_GetMaintenanceWindowTaskResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetOpsItemCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = de_GetOpsItemResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetOpsMetadataCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetOpsSummaryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetParameterCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = de_GetParameterResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetParameterHistoryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = de_GetParameterHistoryResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetParametersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = de_GetParametersResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetParametersByPathCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = de_GetParametersByPathResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetPatchBaselineCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = de_GetPatchBaselineResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetPatchBaselineForPatchGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetResourcePoliciesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetServiceSettingCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = de_GetServiceSettingResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_LabelParameterVersionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListAssociationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListAssociationsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListAssociationVersionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListAssociationVersionsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListCommandInvocationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListCommandInvocationsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListCommandsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListCommandsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListComplianceItemsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListComplianceItemsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListComplianceSummariesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListDocumentMetadataHistoryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListDocumentMetadataHistoryResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListDocumentsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListDocumentsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListDocumentVersionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListDocumentVersionsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListInventoryEntriesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListNodesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListNodesResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListNodesSummaryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListOpsItemEventsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListOpsItemEventsResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListOpsItemRelatedItemsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListOpsItemRelatedItemsResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListOpsMetadataCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListOpsMetadataResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListResourceComplianceSummariesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListResourceComplianceSummariesResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListResourceDataSyncCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListResourceDataSyncResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyDocumentPermissionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_PutComplianceItemsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_PutInventoryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_PutParameterCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_PutResourcePolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_RegisterDefaultPatchBaselineCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_RegisterPatchBaselineForPatchGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_RegisterTargetWithMaintenanceWindowCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_RegisterTaskWithMaintenanceWindowCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_RemoveTagsFromResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ResetServiceSettingCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ResetServiceSettingResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ResumeSessionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_SendAutomationSignalCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_SendCommandCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = de_SendCommandResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_StartAccessRequestCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_StartAssociationsOnceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_StartAutomationExecutionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_StartChangeRequestExecutionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_StartExecutionPreviewCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_StartSessionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_StopAutomationExecutionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_TerminateSessionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UnlabelParameterVersionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateAssociationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = de_UpdateAssociationResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateAssociationStatusCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = de_UpdateAssociationStatusResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateDocumentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = de_UpdateDocumentResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateDocumentDefaultVersionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateDocumentMetadataCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateMaintenanceWindowCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateMaintenanceWindowTargetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateMaintenanceWindowTaskCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = de_UpdateMaintenanceWindowTaskResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateManagedInstanceRoleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateOpsItemCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateOpsMetadataCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdatePatchBaselineCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = de_UpdatePatchBaselineResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateResourceDataSyncCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateServiceSettingCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseJsonBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseJsonErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput);
        case "InvalidResourceId":
        case "com.amazonaws.ssm#InvalidResourceId":
            throw await de_InvalidResourceIdRes(parsedOutput);
        case "InvalidResourceType":
        case "com.amazonaws.ssm#InvalidResourceType":
            throw await de_InvalidResourceTypeRes(parsedOutput);
        case "TooManyTagsError":
        case "com.amazonaws.ssm#TooManyTagsError":
            throw await de_TooManyTagsErrorRes(parsedOutput);
        case "TooManyUpdates":
        case "com.amazonaws.ssm#TooManyUpdates":
            throw await de_TooManyUpdatesRes(parsedOutput);
        case "OpsItemConflictException":
        case "com.amazonaws.ssm#OpsItemConflictException":
            throw await de_OpsItemConflictExceptionRes(parsedOutput);
        case "OpsItemInvalidParameterException":
        case "com.amazonaws.ssm#OpsItemInvalidParameterException":
            throw await de_OpsItemInvalidParameterExceptionRes(parsedOutput);
        case "OpsItemLimitExceededException":
        case "com.amazonaws.ssm#OpsItemLimitExceededException":
            throw await de_OpsItemLimitExceededExceptionRes(parsedOutput);
        case "OpsItemNotFoundException":
        case "com.amazonaws.ssm#OpsItemNotFoundException":
            throw await de_OpsItemNotFoundExceptionRes(parsedOutput);
        case "OpsItemRelatedItemAlreadyExistsException":
        case "com.amazonaws.ssm#OpsItemRelatedItemAlreadyExistsException":
            throw await de_OpsItemRelatedItemAlreadyExistsExceptionRes(parsedOutput);
        case "DuplicateInstanceId":
        case "com.amazonaws.ssm#DuplicateInstanceId":
            throw await de_DuplicateInstanceIdRes(parsedOutput);
        case "InvalidCommandId":
        case "com.amazonaws.ssm#InvalidCommandId":
            throw await de_InvalidCommandIdRes(parsedOutput);
        case "InvalidInstanceId":
        case "com.amazonaws.ssm#InvalidInstanceId":
            throw await de_InvalidInstanceIdRes(parsedOutput);
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
            throw await de_DoesNotExistExceptionRes(parsedOutput);
        case "InvalidParameters":
        case "com.amazonaws.ssm#InvalidParameters":
            throw await de_InvalidParametersRes(parsedOutput);
        case "AssociationAlreadyExists":
        case "com.amazonaws.ssm#AssociationAlreadyExists":
            throw await de_AssociationAlreadyExistsRes(parsedOutput);
        case "AssociationLimitExceeded":
        case "com.amazonaws.ssm#AssociationLimitExceeded":
            throw await de_AssociationLimitExceededRes(parsedOutput);
        case "InvalidDocument":
        case "com.amazonaws.ssm#InvalidDocument":
            throw await de_InvalidDocumentRes(parsedOutput);
        case "InvalidDocumentVersion":
        case "com.amazonaws.ssm#InvalidDocumentVersion":
            throw await de_InvalidDocumentVersionRes(parsedOutput);
        case "InvalidOutputLocation":
        case "com.amazonaws.ssm#InvalidOutputLocation":
            throw await de_InvalidOutputLocationRes(parsedOutput);
        case "InvalidSchedule":
        case "com.amazonaws.ssm#InvalidSchedule":
            throw await de_InvalidScheduleRes(parsedOutput);
        case "InvalidTag":
        case "com.amazonaws.ssm#InvalidTag":
            throw await de_InvalidTagRes(parsedOutput);
        case "InvalidTarget":
        case "com.amazonaws.ssm#InvalidTarget":
            throw await de_InvalidTargetRes(parsedOutput);
        case "InvalidTargetMaps":
        case "com.amazonaws.ssm#InvalidTargetMaps":
            throw await de_InvalidTargetMapsRes(parsedOutput);
        case "UnsupportedPlatformType":
        case "com.amazonaws.ssm#UnsupportedPlatformType":
            throw await de_UnsupportedPlatformTypeRes(parsedOutput);
        case "DocumentAlreadyExists":
        case "com.amazonaws.ssm#DocumentAlreadyExists":
            throw await de_DocumentAlreadyExistsRes(parsedOutput);
        case "DocumentLimitExceeded":
        case "com.amazonaws.ssm#DocumentLimitExceeded":
            throw await de_DocumentLimitExceededRes(parsedOutput);
        case "InvalidDocumentContent":
        case "com.amazonaws.ssm#InvalidDocumentContent":
            throw await de_InvalidDocumentContentRes(parsedOutput);
        case "InvalidDocumentSchemaVersion":
        case "com.amazonaws.ssm#InvalidDocumentSchemaVersion":
            throw await de_InvalidDocumentSchemaVersionRes(parsedOutput);
        case "MaxDocumentSizeExceeded":
        case "com.amazonaws.ssm#MaxDocumentSizeExceeded":
            throw await de_MaxDocumentSizeExceededRes(parsedOutput);
        case "IdempotentParameterMismatch":
        case "com.amazonaws.ssm#IdempotentParameterMismatch":
            throw await de_IdempotentParameterMismatchRes(parsedOutput);
        case "ResourceLimitExceededException":
        case "com.amazonaws.ssm#ResourceLimitExceededException":
            throw await de_ResourceLimitExceededExceptionRes(parsedOutput);
        case "OpsItemAccessDeniedException":
        case "com.amazonaws.ssm#OpsItemAccessDeniedException":
            throw await de_OpsItemAccessDeniedExceptionRes(parsedOutput);
        case "OpsItemAlreadyExistsException":
        case "com.amazonaws.ssm#OpsItemAlreadyExistsException":
            throw await de_OpsItemAlreadyExistsExceptionRes(parsedOutput);
        case "OpsMetadataAlreadyExistsException":
        case "com.amazonaws.ssm#OpsMetadataAlreadyExistsException":
            throw await de_OpsMetadataAlreadyExistsExceptionRes(parsedOutput);
        case "OpsMetadataInvalidArgumentException":
        case "com.amazonaws.ssm#OpsMetadataInvalidArgumentException":
            throw await de_OpsMetadataInvalidArgumentExceptionRes(parsedOutput);
        case "OpsMetadataLimitExceededException":
        case "com.amazonaws.ssm#OpsMetadataLimitExceededException":
            throw await de_OpsMetadataLimitExceededExceptionRes(parsedOutput);
        case "OpsMetadataTooManyUpdatesException":
        case "com.amazonaws.ssm#OpsMetadataTooManyUpdatesException":
            throw await de_OpsMetadataTooManyUpdatesExceptionRes(parsedOutput);
        case "ResourceDataSyncAlreadyExistsException":
        case "com.amazonaws.ssm#ResourceDataSyncAlreadyExistsException":
            throw await de_ResourceDataSyncAlreadyExistsExceptionRes(parsedOutput);
        case "ResourceDataSyncCountExceededException":
        case "com.amazonaws.ssm#ResourceDataSyncCountExceededException":
            throw await de_ResourceDataSyncCountExceededExceptionRes(parsedOutput);
        case "ResourceDataSyncInvalidConfigurationException":
        case "com.amazonaws.ssm#ResourceDataSyncInvalidConfigurationException":
            throw await de_ResourceDataSyncInvalidConfigurationExceptionRes(parsedOutput);
        case "InvalidActivation":
        case "com.amazonaws.ssm#InvalidActivation":
            throw await de_InvalidActivationRes(parsedOutput);
        case "InvalidActivationId":
        case "com.amazonaws.ssm#InvalidActivationId":
            throw await de_InvalidActivationIdRes(parsedOutput);
        case "AssociationDoesNotExist":
        case "com.amazonaws.ssm#AssociationDoesNotExist":
            throw await de_AssociationDoesNotExistRes(parsedOutput);
        case "AssociatedInstances":
        case "com.amazonaws.ssm#AssociatedInstances":
            throw await de_AssociatedInstancesRes(parsedOutput);
        case "InvalidDocumentOperation":
        case "com.amazonaws.ssm#InvalidDocumentOperation":
            throw await de_InvalidDocumentOperationRes(parsedOutput);
        case "InvalidDeleteInventoryParametersException":
        case "com.amazonaws.ssm#InvalidDeleteInventoryParametersException":
            throw await de_InvalidDeleteInventoryParametersExceptionRes(parsedOutput);
        case "InvalidInventoryRequestException":
        case "com.amazonaws.ssm#InvalidInventoryRequestException":
            throw await de_InvalidInventoryRequestExceptionRes(parsedOutput);
        case "InvalidOptionException":
        case "com.amazonaws.ssm#InvalidOptionException":
            throw await de_InvalidOptionExceptionRes(parsedOutput);
        case "InvalidTypeNameException":
        case "com.amazonaws.ssm#InvalidTypeNameException":
            throw await de_InvalidTypeNameExceptionRes(parsedOutput);
        case "OpsMetadataNotFoundException":
        case "com.amazonaws.ssm#OpsMetadataNotFoundException":
            throw await de_OpsMetadataNotFoundExceptionRes(parsedOutput);
        case "ParameterNotFound":
        case "com.amazonaws.ssm#ParameterNotFound":
            throw await de_ParameterNotFoundRes(parsedOutput);
        case "ResourceInUseException":
        case "com.amazonaws.ssm#ResourceInUseException":
            throw await de_ResourceInUseExceptionRes(parsedOutput);
        case "ResourceDataSyncNotFoundException":
        case "com.amazonaws.ssm#ResourceDataSyncNotFoundException":
            throw await de_ResourceDataSyncNotFoundExceptionRes(parsedOutput);
        case "MalformedResourcePolicyDocumentException":
        case "com.amazonaws.ssm#MalformedResourcePolicyDocumentException":
            throw await de_MalformedResourcePolicyDocumentExceptionRes(parsedOutput);
        case "ResourceNotFoundException":
        case "com.amazonaws.ssm#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput);
        case "ResourcePolicyConflictException":
        case "com.amazonaws.ssm#ResourcePolicyConflictException":
            throw await de_ResourcePolicyConflictExceptionRes(parsedOutput);
        case "ResourcePolicyInvalidParameterException":
        case "com.amazonaws.ssm#ResourcePolicyInvalidParameterException":
            throw await de_ResourcePolicyInvalidParameterExceptionRes(parsedOutput);
        case "ResourcePolicyNotFoundException":
        case "com.amazonaws.ssm#ResourcePolicyNotFoundException":
            throw await de_ResourcePolicyNotFoundExceptionRes(parsedOutput);
        case "TargetInUseException":
        case "com.amazonaws.ssm#TargetInUseException":
            throw await de_TargetInUseExceptionRes(parsedOutput);
        case "InvalidFilter":
        case "com.amazonaws.ssm#InvalidFilter":
            throw await de_InvalidFilterRes(parsedOutput);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
            throw await de_InvalidNextTokenRes(parsedOutput);
        case "InvalidAssociationVersion":
        case "com.amazonaws.ssm#InvalidAssociationVersion":
            throw await de_InvalidAssociationVersionRes(parsedOutput);
        case "AssociationExecutionDoesNotExist":
        case "com.amazonaws.ssm#AssociationExecutionDoesNotExist":
            throw await de_AssociationExecutionDoesNotExistRes(parsedOutput);
        case "InvalidFilterKey":
        case "com.amazonaws.ssm#InvalidFilterKey":
            throw await de_InvalidFilterKeyRes(parsedOutput);
        case "InvalidFilterValue":
        case "com.amazonaws.ssm#InvalidFilterValue":
            throw await de_InvalidFilterValueRes(parsedOutput);
        case "AutomationExecutionNotFoundException":
        case "com.amazonaws.ssm#AutomationExecutionNotFoundException":
            throw await de_AutomationExecutionNotFoundExceptionRes(parsedOutput);
        case "InvalidPermissionType":
        case "com.amazonaws.ssm#InvalidPermissionType":
            throw await de_InvalidPermissionTypeRes(parsedOutput);
        case "UnsupportedOperatingSystem":
        case "com.amazonaws.ssm#UnsupportedOperatingSystem":
            throw await de_UnsupportedOperatingSystemRes(parsedOutput);
        case "InvalidInstanceInformationFilterValue":
        case "com.amazonaws.ssm#InvalidInstanceInformationFilterValue":
            throw await de_InvalidInstanceInformationFilterValueRes(parsedOutput);
        case "InvalidInstancePropertyFilterValue":
        case "com.amazonaws.ssm#InvalidInstancePropertyFilterValue":
            throw await de_InvalidInstancePropertyFilterValueRes(parsedOutput);
        case "InvalidDeletionIdException":
        case "com.amazonaws.ssm#InvalidDeletionIdException":
            throw await de_InvalidDeletionIdExceptionRes(parsedOutput);
        case "InvalidFilterOption":
        case "com.amazonaws.ssm#InvalidFilterOption":
            throw await de_InvalidFilterOptionRes(parsedOutput);
        case "OpsItemRelatedItemAssociationNotFoundException":
        case "com.amazonaws.ssm#OpsItemRelatedItemAssociationNotFoundException":
            throw await de_OpsItemRelatedItemAssociationNotFoundExceptionRes(parsedOutput);
        case "AccessDeniedException":
        case "com.amazonaws.ssm#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput);
        case "ThrottlingException":
        case "com.amazonaws.ssm#ThrottlingException":
            throw await de_ThrottlingExceptionRes(parsedOutput);
        case "ValidationException":
        case "com.amazonaws.ssm#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput);
        case "InvalidDocumentType":
        case "com.amazonaws.ssm#InvalidDocumentType":
            throw await de_InvalidDocumentTypeRes(parsedOutput);
        case "UnsupportedCalendarException":
        case "com.amazonaws.ssm#UnsupportedCalendarException":
            throw await de_UnsupportedCalendarExceptionRes(parsedOutput);
        case "InvalidPluginName":
        case "com.amazonaws.ssm#InvalidPluginName":
            throw await de_InvalidPluginNameRes(parsedOutput);
        case "InvocationDoesNotExist":
        case "com.amazonaws.ssm#InvocationDoesNotExist":
            throw await de_InvocationDoesNotExistRes(parsedOutput);
        case "UnsupportedFeatureRequiredException":
        case "com.amazonaws.ssm#UnsupportedFeatureRequiredException":
            throw await de_UnsupportedFeatureRequiredExceptionRes(parsedOutput);
        case "InvalidAggregatorException":
        case "com.amazonaws.ssm#InvalidAggregatorException":
            throw await de_InvalidAggregatorExceptionRes(parsedOutput);
        case "InvalidInventoryGroupException":
        case "com.amazonaws.ssm#InvalidInventoryGroupException":
            throw await de_InvalidInventoryGroupExceptionRes(parsedOutput);
        case "InvalidResultAttributeException":
        case "com.amazonaws.ssm#InvalidResultAttributeException":
            throw await de_InvalidResultAttributeExceptionRes(parsedOutput);
        case "InvalidKeyId":
        case "com.amazonaws.ssm#InvalidKeyId":
            throw await de_InvalidKeyIdRes(parsedOutput);
        case "ParameterVersionNotFound":
        case "com.amazonaws.ssm#ParameterVersionNotFound":
            throw await de_ParameterVersionNotFoundRes(parsedOutput);
        case "ServiceSettingNotFound":
        case "com.amazonaws.ssm#ServiceSettingNotFound":
            throw await de_ServiceSettingNotFoundRes(parsedOutput);
        case "ParameterVersionLabelLimitExceeded":
        case "com.amazonaws.ssm#ParameterVersionLabelLimitExceeded":
            throw await de_ParameterVersionLabelLimitExceededRes(parsedOutput);
        case "UnsupportedOperationException":
        case "com.amazonaws.ssm#UnsupportedOperationException":
            throw await de_UnsupportedOperationExceptionRes(parsedOutput);
        case "DocumentPermissionLimit":
        case "com.amazonaws.ssm#DocumentPermissionLimit":
            throw await de_DocumentPermissionLimitRes(parsedOutput);
        case "ComplianceTypeCountLimitExceededException":
        case "com.amazonaws.ssm#ComplianceTypeCountLimitExceededException":
            throw await de_ComplianceTypeCountLimitExceededExceptionRes(parsedOutput);
        case "InvalidItemContentException":
        case "com.amazonaws.ssm#InvalidItemContentException":
            throw await de_InvalidItemContentExceptionRes(parsedOutput);
        case "ItemSizeLimitExceededException":
        case "com.amazonaws.ssm#ItemSizeLimitExceededException":
            throw await de_ItemSizeLimitExceededExceptionRes(parsedOutput);
        case "TotalSizeLimitExceededException":
        case "com.amazonaws.ssm#TotalSizeLimitExceededException":
            throw await de_TotalSizeLimitExceededExceptionRes(parsedOutput);
        case "CustomSchemaCountLimitExceededException":
        case "com.amazonaws.ssm#CustomSchemaCountLimitExceededException":
            throw await de_CustomSchemaCountLimitExceededExceptionRes(parsedOutput);
        case "InvalidInventoryItemContextException":
        case "com.amazonaws.ssm#InvalidInventoryItemContextException":
            throw await de_InvalidInventoryItemContextExceptionRes(parsedOutput);
        case "ItemContentMismatchException":
        case "com.amazonaws.ssm#ItemContentMismatchException":
            throw await de_ItemContentMismatchExceptionRes(parsedOutput);
        case "SubTypeCountLimitExceededException":
        case "com.amazonaws.ssm#SubTypeCountLimitExceededException":
            throw await de_SubTypeCountLimitExceededExceptionRes(parsedOutput);
        case "UnsupportedInventoryItemContextException":
        case "com.amazonaws.ssm#UnsupportedInventoryItemContextException":
            throw await de_UnsupportedInventoryItemContextExceptionRes(parsedOutput);
        case "UnsupportedInventorySchemaVersionException":
        case "com.amazonaws.ssm#UnsupportedInventorySchemaVersionException":
            throw await de_UnsupportedInventorySchemaVersionExceptionRes(parsedOutput);
        case "HierarchyLevelLimitExceededException":
        case "com.amazonaws.ssm#HierarchyLevelLimitExceededException":
            throw await de_HierarchyLevelLimitExceededExceptionRes(parsedOutput);
        case "HierarchyTypeMismatchException":
        case "com.amazonaws.ssm#HierarchyTypeMismatchException":
            throw await de_HierarchyTypeMismatchExceptionRes(parsedOutput);
        case "IncompatiblePolicyException":
        case "com.amazonaws.ssm#IncompatiblePolicyException":
            throw await de_IncompatiblePolicyExceptionRes(parsedOutput);
        case "InvalidAllowedPatternException":
        case "com.amazonaws.ssm#InvalidAllowedPatternException":
            throw await de_InvalidAllowedPatternExceptionRes(parsedOutput);
        case "InvalidPolicyAttributeException":
        case "com.amazonaws.ssm#InvalidPolicyAttributeException":
            throw await de_InvalidPolicyAttributeExceptionRes(parsedOutput);
        case "InvalidPolicyTypeException":
        case "com.amazonaws.ssm#InvalidPolicyTypeException":
            throw await de_InvalidPolicyTypeExceptionRes(parsedOutput);
        case "ParameterAlreadyExists":
        case "com.amazonaws.ssm#ParameterAlreadyExists":
            throw await de_ParameterAlreadyExistsRes(parsedOutput);
        case "ParameterLimitExceeded":
        case "com.amazonaws.ssm#ParameterLimitExceeded":
            throw await de_ParameterLimitExceededRes(parsedOutput);
        case "ParameterMaxVersionLimitExceeded":
        case "com.amazonaws.ssm#ParameterMaxVersionLimitExceeded":
            throw await de_ParameterMaxVersionLimitExceededRes(parsedOutput);
        case "ParameterPatternMismatchException":
        case "com.amazonaws.ssm#ParameterPatternMismatchException":
            throw await de_ParameterPatternMismatchExceptionRes(parsedOutput);
        case "PoliciesLimitExceededException":
        case "com.amazonaws.ssm#PoliciesLimitExceededException":
            throw await de_PoliciesLimitExceededExceptionRes(parsedOutput);
        case "UnsupportedParameterType":
        case "com.amazonaws.ssm#UnsupportedParameterType":
            throw await de_UnsupportedParameterTypeRes(parsedOutput);
        case "ResourcePolicyLimitExceededException":
        case "com.amazonaws.ssm#ResourcePolicyLimitExceededException":
            throw await de_ResourcePolicyLimitExceededExceptionRes(parsedOutput);
        case "AlreadyExistsException":
        case "com.amazonaws.ssm#AlreadyExistsException":
            throw await de_AlreadyExistsExceptionRes(parsedOutput);
        case "FeatureNotAvailableException":
        case "com.amazonaws.ssm#FeatureNotAvailableException":
            throw await de_FeatureNotAvailableExceptionRes(parsedOutput);
        case "AutomationStepNotFoundException":
        case "com.amazonaws.ssm#AutomationStepNotFoundException":
            throw await de_AutomationStepNotFoundExceptionRes(parsedOutput);
        case "InvalidAutomationSignalException":
        case "com.amazonaws.ssm#InvalidAutomationSignalException":
            throw await de_InvalidAutomationSignalExceptionRes(parsedOutput);
        case "InvalidNotificationConfig":
        case "com.amazonaws.ssm#InvalidNotificationConfig":
            throw await de_InvalidNotificationConfigRes(parsedOutput);
        case "InvalidOutputFolder":
        case "com.amazonaws.ssm#InvalidOutputFolder":
            throw await de_InvalidOutputFolderRes(parsedOutput);
        case "InvalidRole":
        case "com.amazonaws.ssm#InvalidRole":
            throw await de_InvalidRoleRes(parsedOutput);
        case "ServiceQuotaExceededException":
        case "com.amazonaws.ssm#ServiceQuotaExceededException":
            throw await de_ServiceQuotaExceededExceptionRes(parsedOutput);
        case "InvalidAssociation":
        case "com.amazonaws.ssm#InvalidAssociation":
            throw await de_InvalidAssociationRes(parsedOutput);
        case "AutomationDefinitionNotFoundException":
        case "com.amazonaws.ssm#AutomationDefinitionNotFoundException":
            throw await de_AutomationDefinitionNotFoundExceptionRes(parsedOutput);
        case "AutomationDefinitionVersionNotFoundException":
        case "com.amazonaws.ssm#AutomationDefinitionVersionNotFoundException":
            throw await de_AutomationDefinitionVersionNotFoundExceptionRes(parsedOutput);
        case "AutomationExecutionLimitExceededException":
        case "com.amazonaws.ssm#AutomationExecutionLimitExceededException":
            throw await de_AutomationExecutionLimitExceededExceptionRes(parsedOutput);
        case "InvalidAutomationExecutionParametersException":
        case "com.amazonaws.ssm#InvalidAutomationExecutionParametersException":
            throw await de_InvalidAutomationExecutionParametersExceptionRes(parsedOutput);
        case "AutomationDefinitionNotApprovedException":
        case "com.amazonaws.ssm#AutomationDefinitionNotApprovedException":
            throw await de_AutomationDefinitionNotApprovedExceptionRes(parsedOutput);
        case "TargetNotConnected":
        case "com.amazonaws.ssm#TargetNotConnected":
            throw await de_TargetNotConnectedRes(parsedOutput);
        case "InvalidAutomationStatusUpdateException":
        case "com.amazonaws.ssm#InvalidAutomationStatusUpdateException":
            throw await de_InvalidAutomationStatusUpdateExceptionRes(parsedOutput);
        case "AssociationVersionLimitExceeded":
        case "com.amazonaws.ssm#AssociationVersionLimitExceeded":
            throw await de_AssociationVersionLimitExceededRes(parsedOutput);
        case "InvalidUpdate":
        case "com.amazonaws.ssm#InvalidUpdate":
            throw await de_InvalidUpdateRes(parsedOutput);
        case "StatusUnchanged":
        case "com.amazonaws.ssm#StatusUnchanged":
            throw await de_StatusUnchangedRes(parsedOutput);
        case "DocumentVersionLimitExceeded":
        case "com.amazonaws.ssm#DocumentVersionLimitExceeded":
            throw await de_DocumentVersionLimitExceededRes(parsedOutput);
        case "DuplicateDocumentContent":
        case "com.amazonaws.ssm#DuplicateDocumentContent":
            throw await de_DuplicateDocumentContentRes(parsedOutput);
        case "DuplicateDocumentVersionName":
        case "com.amazonaws.ssm#DuplicateDocumentVersionName":
            throw await de_DuplicateDocumentVersionNameRes(parsedOutput);
        case "OpsMetadataKeyLimitExceededException":
        case "com.amazonaws.ssm#OpsMetadataKeyLimitExceededException":
            throw await de_OpsMetadataKeyLimitExceededExceptionRes(parsedOutput);
        case "ResourceDataSyncConflictException":
        case "com.amazonaws.ssm#ResourceDataSyncConflictException":
            throw await de_ResourceDataSyncConflictExceptionRes(parsedOutput);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_AccessDeniedExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_AlreadyExistsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new AlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_AssociatedInstancesRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new AssociatedInstances({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_AssociationAlreadyExistsRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new AssociationAlreadyExists({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_AssociationDoesNotExistRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new AssociationDoesNotExist({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_AssociationExecutionDoesNotExistRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new AssociationExecutionDoesNotExist({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_AssociationLimitExceededRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new AssociationLimitExceeded({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_AssociationVersionLimitExceededRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new AssociationVersionLimitExceeded({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_AutomationDefinitionNotApprovedExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new AutomationDefinitionNotApprovedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_AutomationDefinitionNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new AutomationDefinitionNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_AutomationDefinitionVersionNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new AutomationDefinitionVersionNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_AutomationExecutionLimitExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new AutomationExecutionLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_AutomationExecutionNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new AutomationExecutionNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_AutomationStepNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new AutomationStepNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_ComplianceTypeCountLimitExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ComplianceTypeCountLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_CustomSchemaCountLimitExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new CustomSchemaCountLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_DocumentAlreadyExistsRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new DocumentAlreadyExists({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_DocumentLimitExceededRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new DocumentLimitExceeded({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_DocumentPermissionLimitRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new DocumentPermissionLimit({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_DocumentVersionLimitExceededRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new DocumentVersionLimitExceeded({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_DoesNotExistExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new DoesNotExistException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_DuplicateDocumentContentRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new DuplicateDocumentContent({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_DuplicateDocumentVersionNameRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new DuplicateDocumentVersionName({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_DuplicateInstanceIdRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new DuplicateInstanceId({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_FeatureNotAvailableExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new FeatureNotAvailableException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_HierarchyLevelLimitExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new HierarchyLevelLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_HierarchyTypeMismatchExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new HierarchyTypeMismatchException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_IdempotentParameterMismatchRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new IdempotentParameterMismatch({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_IncompatiblePolicyExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new IncompatiblePolicyException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_InternalServerErrorRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InternalServerError({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_InvalidActivationRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidActivation({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_InvalidActivationIdRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidActivationId({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_InvalidAggregatorExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidAggregatorException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_InvalidAllowedPatternExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidAllowedPatternException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_InvalidAssociationRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidAssociation({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_InvalidAssociationVersionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidAssociationVersion({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_InvalidAutomationExecutionParametersExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidAutomationExecutionParametersException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_InvalidAutomationSignalExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidAutomationSignalException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_InvalidAutomationStatusUpdateExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidAutomationStatusUpdateException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_InvalidCommandIdRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidCommandId({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_InvalidDeleteInventoryParametersExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidDeleteInventoryParametersException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_InvalidDeletionIdExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidDeletionIdException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_InvalidDocumentRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidDocument({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_InvalidDocumentContentRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidDocumentContent({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_InvalidDocumentOperationRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidDocumentOperation({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_InvalidDocumentSchemaVersionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidDocumentSchemaVersion({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_InvalidDocumentTypeRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidDocumentType({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_InvalidDocumentVersionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidDocumentVersion({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_InvalidFilterRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidFilter({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_InvalidFilterKeyRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidFilterKey({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_InvalidFilterOptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidFilterOption({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_InvalidFilterValueRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidFilterValue({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_InvalidInstanceIdRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidInstanceId({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_InvalidInstanceInformationFilterValueRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidInstanceInformationFilterValue({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_InvalidInstancePropertyFilterValueRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidInstancePropertyFilterValue({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_InvalidInventoryGroupExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidInventoryGroupException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_InvalidInventoryItemContextExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidInventoryItemContextException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_InvalidInventoryRequestExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidInventoryRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_InvalidItemContentExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidItemContentException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_InvalidKeyIdRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidKeyId({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_InvalidNextTokenRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidNextToken({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_InvalidNotificationConfigRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidNotificationConfig({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_InvalidOptionExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidOptionException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_InvalidOutputFolderRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidOutputFolder({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_InvalidOutputLocationRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidOutputLocation({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_InvalidParametersRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidParameters({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_InvalidPermissionTypeRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidPermissionType({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_InvalidPluginNameRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidPluginName({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_InvalidPolicyAttributeExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidPolicyAttributeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_InvalidPolicyTypeExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidPolicyTypeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_InvalidResourceIdRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidResourceId({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_InvalidResourceTypeRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidResourceType({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_InvalidResultAttributeExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidResultAttributeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_InvalidRoleRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidRole({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_InvalidScheduleRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidSchedule({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_InvalidTagRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidTag({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_InvalidTargetRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidTarget({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_InvalidTargetMapsRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidTargetMaps({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_InvalidTypeNameExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidTypeNameException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_InvalidUpdateRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidUpdate({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_InvocationDoesNotExistRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvocationDoesNotExist({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_ItemContentMismatchExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ItemContentMismatchException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_ItemSizeLimitExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ItemSizeLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_MalformedResourcePolicyDocumentExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new MalformedResourcePolicyDocumentException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_MaxDocumentSizeExceededRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new MaxDocumentSizeExceeded({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_OpsItemAccessDeniedExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new OpsItemAccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_OpsItemAlreadyExistsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new OpsItemAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_OpsItemConflictExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new OpsItemConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_OpsItemInvalidParameterExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new OpsItemInvalidParameterException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_OpsItemLimitExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new OpsItemLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_OpsItemNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new OpsItemNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_OpsItemRelatedItemAlreadyExistsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new OpsItemRelatedItemAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_OpsItemRelatedItemAssociationNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new OpsItemRelatedItemAssociationNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_OpsMetadataAlreadyExistsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new OpsMetadataAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_OpsMetadataInvalidArgumentExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new OpsMetadataInvalidArgumentException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_OpsMetadataKeyLimitExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new OpsMetadataKeyLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_OpsMetadataLimitExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new OpsMetadataLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_OpsMetadataNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new OpsMetadataNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_OpsMetadataTooManyUpdatesExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new OpsMetadataTooManyUpdatesException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_ParameterAlreadyExistsRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ParameterAlreadyExists({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_ParameterLimitExceededRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ParameterLimitExceeded({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_ParameterMaxVersionLimitExceededRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ParameterMaxVersionLimitExceeded({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_ParameterNotFoundRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ParameterNotFound({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_ParameterPatternMismatchExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ParameterPatternMismatchException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_ParameterVersionLabelLimitExceededRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ParameterVersionLabelLimitExceeded({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_ParameterVersionNotFoundRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ParameterVersionNotFound({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_PoliciesLimitExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new PoliciesLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_ResourceDataSyncAlreadyExistsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ResourceDataSyncAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_ResourceDataSyncConflictExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ResourceDataSyncConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_ResourceDataSyncCountExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ResourceDataSyncCountExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_ResourceDataSyncInvalidConfigurationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ResourceDataSyncInvalidConfigurationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_ResourceDataSyncNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ResourceDataSyncNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_ResourceInUseExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ResourceInUseException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_ResourceLimitExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ResourceLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_ResourcePolicyConflictExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ResourcePolicyConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_ResourcePolicyInvalidParameterExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ResourcePolicyInvalidParameterException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_ResourcePolicyLimitExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ResourcePolicyLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_ResourcePolicyNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ResourcePolicyNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_ServiceQuotaExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ServiceQuotaExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_ServiceSettingNotFoundRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ServiceSettingNotFound({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_StatusUnchangedRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new StatusUnchanged({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_SubTypeCountLimitExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new SubTypeCountLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_TargetInUseExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new TargetInUseException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_TargetNotConnectedRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new TargetNotConnected({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_ThrottlingExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ThrottlingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_TooManyTagsErrorRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new TooManyTagsError({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_TooManyUpdatesRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new TooManyUpdates({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_TotalSizeLimitExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new TotalSizeLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_UnsupportedCalendarExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new UnsupportedCalendarException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_UnsupportedFeatureRequiredExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new UnsupportedFeatureRequiredException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_UnsupportedInventoryItemContextExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new UnsupportedInventoryItemContextException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_UnsupportedInventorySchemaVersionExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new UnsupportedInventorySchemaVersionException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_UnsupportedOperatingSystemRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new UnsupportedOperatingSystem({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_UnsupportedOperationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new UnsupportedOperationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_UnsupportedParameterTypeRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new UnsupportedParameterType({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_UnsupportedPlatformTypeRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new UnsupportedPlatformType({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const de_ValidationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ValidationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return decorateServiceException(exception, body);
};
const se_AssociationStatus = (input, context) => {
    return take(input, {
        AdditionalInfo: [],
        Date: (_) => _.getTime() / 1_000,
        Message: [],
        Name: [],
    });
};
const se_ComplianceExecutionSummary = (input, context) => {
    return take(input, {
        ExecutionId: [],
        ExecutionTime: (_) => _.getTime() / 1_000,
        ExecutionType: [],
    });
};
const se_CreateActivationRequest = (input, context) => {
    return take(input, {
        DefaultInstanceName: [],
        Description: [],
        ExpirationDate: (_) => _.getTime() / 1_000,
        IamRole: [],
        RegistrationLimit: [],
        RegistrationMetadata: _json,
        Tags: _json,
    });
};
const se_CreateMaintenanceWindowRequest = (input, context) => {
    return take(input, {
        AllowUnassociatedTargets: [],
        ClientToken: [true, (_) => _ ?? v4()],
        Cutoff: [],
        Description: [],
        Duration: [],
        EndDate: [],
        Name: [],
        Schedule: [],
        ScheduleOffset: [],
        ScheduleTimezone: [],
        StartDate: [],
        Tags: _json,
    });
};
const se_CreateOpsItemRequest = (input, context) => {
    return take(input, {
        AccountId: [],
        ActualEndTime: (_) => _.getTime() / 1_000,
        ActualStartTime: (_) => _.getTime() / 1_000,
        Category: [],
        Description: [],
        Notifications: _json,
        OperationalData: _json,
        OpsItemType: [],
        PlannedEndTime: (_) => _.getTime() / 1_000,
        PlannedStartTime: (_) => _.getTime() / 1_000,
        Priority: [],
        RelatedOpsItems: _json,
        Severity: [],
        Source: [],
        Tags: _json,
        Title: [],
    });
};
const se_CreatePatchBaselineRequest = (input, context) => {
    return take(input, {
        ApprovalRules: _json,
        ApprovedPatches: _json,
        ApprovedPatchesComplianceLevel: [],
        ApprovedPatchesEnableNonSecurity: [],
        AvailableSecurityUpdatesComplianceStatus: [],
        ClientToken: [true, (_) => _ ?? v4()],
        Description: [],
        GlobalFilters: _json,
        Name: [],
        OperatingSystem: [],
        RejectedPatches: _json,
        RejectedPatchesAction: [],
        Sources: _json,
        Tags: _json,
    });
};
const se_DeleteInventoryRequest = (input, context) => {
    return take(input, {
        ClientToken: [true, (_) => _ ?? v4()],
        DryRun: [],
        SchemaDeleteOption: [],
        TypeName: [],
    });
};
const se_GetInventoryRequest = (input, context) => {
    return take(input, {
        Aggregators: (_) => se_InventoryAggregatorList(_),
        Filters: _json,
        MaxResults: [],
        NextToken: [],
        ResultAttributes: _json,
    });
};
const se_GetOpsSummaryRequest = (input, context) => {
    return take(input, {
        Aggregators: (_) => se_OpsAggregatorList(_),
        Filters: _json,
        MaxResults: [],
        NextToken: [],
        ResultAttributes: _json,
        SyncName: [],
    });
};
const se_InventoryAggregator = (input, context) => {
    return take(input, {
        Aggregators: (_) => se_InventoryAggregatorList(_),
        Expression: [],
        Groups: _json,
    });
};
const se_InventoryAggregatorList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_InventoryAggregator(entry);
    });
};
const se_ListNodesSummaryRequest = (input, context) => {
    return take(input, {
        Aggregators: (_) => se_NodeAggregatorList(_),
        Filters: _json,
        MaxResults: [],
        NextToken: [],
        SyncName: [],
    });
};
const se_MaintenanceWindowLambdaParameters = (input, context) => {
    return take(input, {
        ClientContext: [],
        Payload: context.base64Encoder,
        Qualifier: [],
    });
};
const se_MaintenanceWindowTaskInvocationParameters = (input, context) => {
    return take(input, {
        Automation: _json,
        Lambda: (_) => se_MaintenanceWindowLambdaParameters(_, context),
        RunCommand: _json,
        StepFunctions: _json,
    });
};
const se_NodeAggregator = (input, context) => {
    return take(input, {
        AggregatorType: [],
        Aggregators: (_) => se_NodeAggregatorList(_),
        AttributeName: [],
        TypeName: [],
    });
};
const se_NodeAggregatorList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_NodeAggregator(entry);
    });
};
const se_OpsAggregator = (input, context) => {
    return take(input, {
        AggregatorType: [],
        Aggregators: (_) => se_OpsAggregatorList(_),
        AttributeName: [],
        Filters: _json,
        TypeName: [],
        Values: _json,
    });
};
const se_OpsAggregatorList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_OpsAggregator(entry);
    });
};
const se_PutComplianceItemsRequest = (input, context) => {
    return take(input, {
        ComplianceType: [],
        ExecutionSummary: (_) => se_ComplianceExecutionSummary(_),
        ItemContentHash: [],
        Items: _json,
        ResourceId: [],
        ResourceType: [],
        UploadType: [],
    });
};
const se_RegisterTargetWithMaintenanceWindowRequest = (input, context) => {
    return take(input, {
        ClientToken: [true, (_) => _ ?? v4()],
        Description: [],
        Name: [],
        OwnerInformation: [],
        ResourceType: [],
        Targets: _json,
        WindowId: [],
    });
};
const se_RegisterTaskWithMaintenanceWindowRequest = (input, context) => {
    return take(input, {
        AlarmConfiguration: _json,
        ClientToken: [true, (_) => _ ?? v4()],
        CutoffBehavior: [],
        Description: [],
        LoggingInfo: _json,
        MaxConcurrency: [],
        MaxErrors: [],
        Name: [],
        Priority: [],
        ServiceRoleArn: [],
        Targets: _json,
        TaskArn: [],
        TaskInvocationParameters: (_) => se_MaintenanceWindowTaskInvocationParameters(_, context),
        TaskParameters: _json,
        TaskType: [],
        WindowId: [],
    });
};
const se_StartChangeRequestExecutionRequest = (input, context) => {
    return take(input, {
        AutoApprove: [],
        ChangeDetails: [],
        ChangeRequestName: [],
        ClientToken: [],
        DocumentName: [],
        DocumentVersion: [],
        Parameters: _json,
        Runbooks: _json,
        ScheduledEndTime: (_) => _.getTime() / 1_000,
        ScheduledTime: (_) => _.getTime() / 1_000,
        Tags: _json,
    });
};
const se_UpdateAssociationStatusRequest = (input, context) => {
    return take(input, {
        AssociationStatus: (_) => se_AssociationStatus(_),
        InstanceId: [],
        Name: [],
    });
};
const se_UpdateMaintenanceWindowTaskRequest = (input, context) => {
    return take(input, {
        AlarmConfiguration: _json,
        CutoffBehavior: [],
        Description: [],
        LoggingInfo: _json,
        MaxConcurrency: [],
        MaxErrors: [],
        Name: [],
        Priority: [],
        Replace: [],
        ServiceRoleArn: [],
        Targets: _json,
        TaskArn: [],
        TaskInvocationParameters: (_) => se_MaintenanceWindowTaskInvocationParameters(_, context),
        TaskParameters: _json,
        WindowId: [],
        WindowTaskId: [],
    });
};
const se_UpdateOpsItemRequest = (input, context) => {
    return take(input, {
        ActualEndTime: (_) => _.getTime() / 1_000,
        ActualStartTime: (_) => _.getTime() / 1_000,
        Category: [],
        Description: [],
        Notifications: _json,
        OperationalData: _json,
        OperationalDataToDelete: _json,
        OpsItemArn: [],
        OpsItemId: [],
        PlannedEndTime: (_) => _.getTime() / 1_000,
        PlannedStartTime: (_) => _.getTime() / 1_000,
        Priority: [],
        RelatedOpsItems: _json,
        Severity: [],
        Status: [],
        Title: [],
    });
};
const de_Activation = (output, context) => {
    return take(output, {
        ActivationId: expectString,
        CreatedDate: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
        DefaultInstanceName: expectString,
        Description: expectString,
        ExpirationDate: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
        Expired: expectBoolean,
        IamRole: expectString,
        RegistrationLimit: expectInt32,
        RegistrationsCount: expectInt32,
        Tags: _json,
    });
};
const de_ActivationList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Activation(entry);
    });
    return retVal;
};
const de_Association = (output, context) => {
    return take(output, {
        AssociationId: expectString,
        AssociationName: expectString,
        AssociationVersion: expectString,
        DocumentVersion: expectString,
        Duration: expectInt32,
        InstanceId: expectString,
        LastExecutionDate: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
        Name: expectString,
        Overview: _json,
        ScheduleExpression: expectString,
        ScheduleOffset: expectInt32,
        TargetMaps: _json,
        Targets: _json,
    });
};
const de_AssociationDescription = (output, context) => {
    return take(output, {
        AlarmConfiguration: _json,
        ApplyOnlyAtCronInterval: expectBoolean,
        AssociationId: expectString,
        AssociationName: expectString,
        AssociationVersion: expectString,
        AutomationTargetParameterName: expectString,
        CalendarNames: _json,
        ComplianceSeverity: expectString,
        Date: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
        DocumentVersion: expectString,
        Duration: expectInt32,
        InstanceId: expectString,
        LastExecutionDate: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
        LastSuccessfulExecutionDate: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
        LastUpdateAssociationDate: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
        MaxConcurrency: expectString,
        MaxErrors: expectString,
        Name: expectString,
        OutputLocation: _json,
        Overview: _json,
        Parameters: _json,
        ScheduleExpression: expectString,
        ScheduleOffset: expectInt32,
        Status: (_) => de_AssociationStatus(_),
        SyncCompliance: expectString,
        TargetLocations: _json,
        TargetMaps: _json,
        Targets: _json,
        TriggeredAlarms: _json,
    });
};
const de_AssociationDescriptionList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AssociationDescription(entry);
    });
    return retVal;
};
const de_AssociationExecution = (output, context) => {
    return take(output, {
        AlarmConfiguration: _json,
        AssociationId: expectString,
        AssociationVersion: expectString,
        CreatedTime: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
        DetailedStatus: expectString,
        ExecutionId: expectString,
        LastExecutionDate: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
        ResourceCountByStatus: expectString,
        Status: expectString,
        TriggeredAlarms: _json,
    });
};
const de_AssociationExecutionsList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AssociationExecution(entry);
    });
    return retVal;
};
const de_AssociationExecutionTarget = (output, context) => {
    return take(output, {
        AssociationId: expectString,
        AssociationVersion: expectString,
        DetailedStatus: expectString,
        ExecutionId: expectString,
        LastExecutionDate: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
        OutputSource: _json,
        ResourceId: expectString,
        ResourceType: expectString,
        Status: expectString,
    });
};
const de_AssociationExecutionTargetsList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AssociationExecutionTarget(entry);
    });
    return retVal;
};
const de_AssociationList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Association(entry);
    });
    return retVal;
};
const de_AssociationStatus = (output, context) => {
    return take(output, {
        AdditionalInfo: expectString,
        Date: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
        Message: expectString,
        Name: expectString,
    });
};
const de_AssociationVersionInfo = (output, context) => {
    return take(output, {
        ApplyOnlyAtCronInterval: expectBoolean,
        AssociationId: expectString,
        AssociationName: expectString,
        AssociationVersion: expectString,
        CalendarNames: _json,
        ComplianceSeverity: expectString,
        CreatedDate: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
        DocumentVersion: expectString,
        Duration: expectInt32,
        MaxConcurrency: expectString,
        MaxErrors: expectString,
        Name: expectString,
        OutputLocation: _json,
        Parameters: _json,
        ScheduleExpression: expectString,
        ScheduleOffset: expectInt32,
        SyncCompliance: expectString,
        TargetLocations: _json,
        TargetMaps: _json,
        Targets: _json,
    });
};
const de_AssociationVersionList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AssociationVersionInfo(entry);
    });
    return retVal;
};
const de_AutomationExecution = (output, context) => {
    return take(output, {
        AlarmConfiguration: _json,
        AssociationId: expectString,
        AutomationExecutionId: expectString,
        AutomationExecutionStatus: expectString,
        AutomationSubtype: expectString,
        ChangeRequestName: expectString,
        CurrentAction: expectString,
        CurrentStepName: expectString,
        DocumentName: expectString,
        DocumentVersion: expectString,
        ExecutedBy: expectString,
        ExecutionEndTime: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
        ExecutionStartTime: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
        FailureMessage: expectString,
        MaxConcurrency: expectString,
        MaxErrors: expectString,
        Mode: expectString,
        OpsItemId: expectString,
        Outputs: _json,
        Parameters: _json,
        ParentAutomationExecutionId: expectString,
        ProgressCounters: _json,
        ResolvedTargets: _json,
        Runbooks: _json,
        ScheduledTime: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
        StepExecutions: (_) => de_StepExecutionList(_),
        StepExecutionsTruncated: expectBoolean,
        Target: expectString,
        TargetLocations: _json,
        TargetLocationsURL: expectString,
        TargetMaps: _json,
        TargetParameterName: expectString,
        Targets: _json,
        TriggeredAlarms: _json,
        Variables: _json,
    });
};
const de_AutomationExecutionMetadata = (output, context) => {
    return take(output, {
        AlarmConfiguration: _json,
        AssociationId: expectString,
        AutomationExecutionId: expectString,
        AutomationExecutionStatus: expectString,
        AutomationSubtype: expectString,
        AutomationType: expectString,
        ChangeRequestName: expectString,
        CurrentAction: expectString,
        CurrentStepName: expectString,
        DocumentName: expectString,
        DocumentVersion: expectString,
        ExecutedBy: expectString,
        ExecutionEndTime: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
        ExecutionStartTime: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
        FailureMessage: expectString,
        LogFile: expectString,
        MaxConcurrency: expectString,
        MaxErrors: expectString,
        Mode: expectString,
        OpsItemId: expectString,
        Outputs: _json,
        ParentAutomationExecutionId: expectString,
        ResolvedTargets: _json,
        Runbooks: _json,
        ScheduledTime: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
        Target: expectString,
        TargetLocationsURL: expectString,
        TargetMaps: _json,
        TargetParameterName: expectString,
        Targets: _json,
        TriggeredAlarms: _json,
    });
};
const de_AutomationExecutionMetadataList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AutomationExecutionMetadata(entry);
    });
    return retVal;
};
const de_Command = (output, context) => {
    return take(output, {
        AlarmConfiguration: _json,
        CloudWatchOutputConfig: _json,
        CommandId: expectString,
        Comment: expectString,
        CompletedCount: expectInt32,
        DeliveryTimedOutCount: expectInt32,
        DocumentName: expectString,
        DocumentVersion: expectString,
        ErrorCount: expectInt32,
        ExpiresAfter: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
        InstanceIds: _json,
        MaxConcurrency: expectString,
        MaxErrors: expectString,
        NotificationConfig: _json,
        OutputS3BucketName: expectString,
        OutputS3KeyPrefix: expectString,
        OutputS3Region: expectString,
        Parameters: _json,
        RequestedDateTime: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
        ServiceRole: expectString,
        Status: expectString,
        StatusDetails: expectString,
        TargetCount: expectInt32,
        Targets: _json,
        TimeoutSeconds: expectInt32,
        TriggeredAlarms: _json,
    });
};
const de_CommandInvocation = (output, context) => {
    return take(output, {
        CloudWatchOutputConfig: _json,
        CommandId: expectString,
        CommandPlugins: (_) => de_CommandPluginList(_),
        Comment: expectString,
        DocumentName: expectString,
        DocumentVersion: expectString,
        InstanceId: expectString,
        InstanceName: expectString,
        NotificationConfig: _json,
        RequestedDateTime: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
        ServiceRole: expectString,
        StandardErrorUrl: expectString,
        StandardOutputUrl: expectString,
        Status: expectString,
        StatusDetails: expectString,
        TraceOutput: expectString,
    });
};
const de_CommandInvocationList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CommandInvocation(entry);
    });
    return retVal;
};
const de_CommandList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Command(entry);
    });
    return retVal;
};
const de_CommandPlugin = (output, context) => {
    return take(output, {
        Name: expectString,
        Output: expectString,
        OutputS3BucketName: expectString,
        OutputS3KeyPrefix: expectString,
        OutputS3Region: expectString,
        ResponseCode: expectInt32,
        ResponseFinishDateTime: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
        ResponseStartDateTime: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
        StandardErrorUrl: expectString,
        StandardOutputUrl: expectString,
        Status: expectString,
        StatusDetails: expectString,
    });
};
const de_CommandPluginList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CommandPlugin(entry);
    });
    return retVal;
};
const de_ComplianceExecutionSummary = (output, context) => {
    return take(output, {
        ExecutionId: expectString,
        ExecutionTime: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
        ExecutionType: expectString,
    });
};
const de_ComplianceItem = (output, context) => {
    return take(output, {
        ComplianceType: expectString,
        Details: _json,
        ExecutionSummary: (_) => de_ComplianceExecutionSummary(_),
        Id: expectString,
        ResourceId: expectString,
        ResourceType: expectString,
        Severity: expectString,
        Status: expectString,
        Title: expectString,
    });
};
const de_ComplianceItemList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ComplianceItem(entry);
    });
    return retVal;
};
const de_CreateAssociationBatchResult = (output, context) => {
    return take(output, {
        Failed: _json,
        Successful: (_) => de_AssociationDescriptionList(_),
    });
};
const de_CreateAssociationResult = (output, context) => {
    return take(output, {
        AssociationDescription: (_) => de_AssociationDescription(_),
    });
};
const de_CreateDocumentResult = (output, context) => {
    return take(output, {
        DocumentDescription: (_) => de_DocumentDescription(_),
    });
};
const de_Credentials = (output, context) => {
    return take(output, {
        AccessKeyId: expectString,
        ExpirationTime: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
        SecretAccessKey: expectString,
        SessionToken: expectString,
    });
};
const de_DescribeActivationsResult = (output, context) => {
    return take(output, {
        ActivationList: (_) => de_ActivationList(_),
        NextToken: expectString,
    });
};
const de_DescribeAssociationExecutionsResult = (output, context) => {
    return take(output, {
        AssociationExecutions: (_) => de_AssociationExecutionsList(_),
        NextToken: expectString,
    });
};
const de_DescribeAssociationExecutionTargetsResult = (output, context) => {
    return take(output, {
        AssociationExecutionTargets: (_) => de_AssociationExecutionTargetsList(_),
        NextToken: expectString,
    });
};
const de_DescribeAssociationResult = (output, context) => {
    return take(output, {
        AssociationDescription: (_) => de_AssociationDescription(_),
    });
};
const de_DescribeAutomationExecutionsResult = (output, context) => {
    return take(output, {
        AutomationExecutionMetadataList: (_) => de_AutomationExecutionMetadataList(_),
        NextToken: expectString,
    });
};
const de_DescribeAutomationStepExecutionsResult = (output, context) => {
    return take(output, {
        NextToken: expectString,
        StepExecutions: (_) => de_StepExecutionList(_),
    });
};
const de_DescribeAvailablePatchesResult = (output, context) => {
    return take(output, {
        NextToken: expectString,
        Patches: (_) => de_PatchList(_),
    });
};
const de_DescribeDocumentResult = (output, context) => {
    return take(output, {
        Document: (_) => de_DocumentDescription(_),
    });
};
const de_DescribeEffectivePatchesForPatchBaselineResult = (output, context) => {
    return take(output, {
        EffectivePatches: (_) => de_EffectivePatchList(_),
        NextToken: expectString,
    });
};
const de_DescribeInstanceAssociationsStatusResult = (output, context) => {
    return take(output, {
        InstanceAssociationStatusInfos: (_) => de_InstanceAssociationStatusInfos(_),
        NextToken: expectString,
    });
};
const de_DescribeInstanceInformationResult = (output, context) => {
    return take(output, {
        InstanceInformationList: (_) => de_InstanceInformationList(_),
        NextToken: expectString,
    });
};
const de_DescribeInstancePatchesResult = (output, context) => {
    return take(output, {
        NextToken: expectString,
        Patches: (_) => de_PatchComplianceDataList(_),
    });
};
const de_DescribeInstancePatchStatesForPatchGroupResult = (output, context) => {
    return take(output, {
        InstancePatchStates: (_) => de_InstancePatchStatesList(_),
        NextToken: expectString,
    });
};
const de_DescribeInstancePatchStatesResult = (output, context) => {
    return take(output, {
        InstancePatchStates: (_) => de_InstancePatchStateList(_),
        NextToken: expectString,
    });
};
const de_DescribeInstancePropertiesResult = (output, context) => {
    return take(output, {
        InstanceProperties: (_) => de_InstanceProperties(_),
        NextToken: expectString,
    });
};
const de_DescribeInventoryDeletionsResult = (output, context) => {
    return take(output, {
        InventoryDeletions: (_) => de_InventoryDeletionsList(_),
        NextToken: expectString,
    });
};
const de_DescribeMaintenanceWindowExecutionsResult = (output, context) => {
    return take(output, {
        NextToken: expectString,
        WindowExecutions: (_) => de_MaintenanceWindowExecutionList(_),
    });
};
const de_DescribeMaintenanceWindowExecutionTaskInvocationsResult = (output, context) => {
    return take(output, {
        NextToken: expectString,
        WindowExecutionTaskInvocationIdentities: (_) => de_MaintenanceWindowExecutionTaskInvocationIdentityList(_),
    });
};
const de_DescribeMaintenanceWindowExecutionTasksResult = (output, context) => {
    return take(output, {
        NextToken: expectString,
        WindowExecutionTaskIdentities: (_) => de_MaintenanceWindowExecutionTaskIdentityList(_),
    });
};
const de_DescribeOpsItemsResponse = (output, context) => {
    return take(output, {
        NextToken: expectString,
        OpsItemSummaries: (_) => de_OpsItemSummaries(_),
    });
};
const de_DescribeParametersResult = (output, context) => {
    return take(output, {
        NextToken: expectString,
        Parameters: (_) => de_ParameterMetadataList(_),
    });
};
const de_DescribeSessionsResponse = (output, context) => {
    return take(output, {
        NextToken: expectString,
        Sessions: (_) => de_SessionList(_),
    });
};
const de_DocumentDescription = (output, context) => {
    return take(output, {
        ApprovedVersion: expectString,
        AttachmentsInformation: _json,
        Author: expectString,
        Category: _json,
        CategoryEnum: _json,
        CreatedDate: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
        DefaultVersion: expectString,
        Description: expectString,
        DisplayName: expectString,
        DocumentFormat: expectString,
        DocumentType: expectString,
        DocumentVersion: expectString,
        Hash: expectString,
        HashType: expectString,
        LatestVersion: expectString,
        Name: expectString,
        Owner: expectString,
        Parameters: _json,
        PendingReviewVersion: expectString,
        PlatformTypes: _json,
        Requires: _json,
        ReviewInformation: (_) => de_ReviewInformationList(_),
        ReviewStatus: expectString,
        SchemaVersion: expectString,
        Sha1: expectString,
        Status: expectString,
        StatusInformation: expectString,
        Tags: _json,
        TargetType: expectString,
        VersionName: expectString,
    });
};
const de_DocumentIdentifier = (output, context) => {
    return take(output, {
        Author: expectString,
        CreatedDate: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
        DisplayName: expectString,
        DocumentFormat: expectString,
        DocumentType: expectString,
        DocumentVersion: expectString,
        Name: expectString,
        Owner: expectString,
        PlatformTypes: _json,
        Requires: _json,
        ReviewStatus: expectString,
        SchemaVersion: expectString,
        Tags: _json,
        TargetType: expectString,
        VersionName: expectString,
    });
};
const de_DocumentIdentifierList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DocumentIdentifier(entry);
    });
    return retVal;
};
const de_DocumentMetadataResponseInfo = (output, context) => {
    return take(output, {
        ReviewerResponse: (_) => de_DocumentReviewerResponseList(_),
    });
};
const de_DocumentReviewerResponseList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DocumentReviewerResponseSource(entry);
    });
    return retVal;
};
const de_DocumentReviewerResponseSource = (output, context) => {
    return take(output, {
        Comment: _json,
        CreateTime: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
        ReviewStatus: expectString,
        Reviewer: expectString,
        UpdatedTime: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
    });
};
const de_DocumentVersionInfo = (output, context) => {
    return take(output, {
        CreatedDate: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
        DisplayName: expectString,
        DocumentFormat: expectString,
        DocumentVersion: expectString,
        IsDefaultVersion: expectBoolean,
        Name: expectString,
        ReviewStatus: expectString,
        Status: expectString,
        StatusInformation: expectString,
        VersionName: expectString,
    });
};
const de_DocumentVersionList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DocumentVersionInfo(entry);
    });
    return retVal;
};
const de_EffectivePatch = (output, context) => {
    return take(output, {
        Patch: (_) => de_Patch(_),
        PatchStatus: (_) => de_PatchStatus(_),
    });
};
const de_EffectivePatchList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_EffectivePatch(entry);
    });
    return retVal;
};
const de_GetAccessTokenResponse = (output, context) => {
    return take(output, {
        AccessRequestStatus: expectString,
        Credentials: (_) => de_Credentials(_),
    });
};
const de_GetAutomationExecutionResult = (output, context) => {
    return take(output, {
        AutomationExecution: (_) => de_AutomationExecution(_),
    });
};
const de_GetDocumentResult = (output, context) => {
    return take(output, {
        AttachmentsContent: _json,
        Content: expectString,
        CreatedDate: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
        DisplayName: expectString,
        DocumentFormat: expectString,
        DocumentType: expectString,
        DocumentVersion: expectString,
        Name: expectString,
        Requires: _json,
        ReviewStatus: expectString,
        Status: expectString,
        StatusInformation: expectString,
        VersionName: expectString,
    });
};
const de_GetExecutionPreviewResponse = (output, context) => {
    return take(output, {
        EndedAt: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
        ExecutionPreview: (_) => _json(awsExpectUnion(_)),
        ExecutionPreviewId: expectString,
        Status: expectString,
        StatusMessage: expectString,
    });
};
const de_GetMaintenanceWindowExecutionResult = (output, context) => {
    return take(output, {
        EndTime: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
        StartTime: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
        Status: expectString,
        StatusDetails: expectString,
        TaskIds: _json,
        WindowExecutionId: expectString,
    });
};
const de_GetMaintenanceWindowExecutionTaskInvocationResult = (output, context) => {
    return take(output, {
        EndTime: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
        ExecutionId: expectString,
        InvocationId: expectString,
        OwnerInformation: expectString,
        Parameters: expectString,
        StartTime: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
        Status: expectString,
        StatusDetails: expectString,
        TaskExecutionId: expectString,
        TaskType: expectString,
        WindowExecutionId: expectString,
        WindowTargetId: expectString,
    });
};
const de_GetMaintenanceWindowExecutionTaskResult = (output, context) => {
    return take(output, {
        AlarmConfiguration: _json,
        EndTime: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
        MaxConcurrency: expectString,
        MaxErrors: expectString,
        Priority: expectInt32,
        ServiceRole: expectString,
        StartTime: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
        Status: expectString,
        StatusDetails: expectString,
        TaskArn: expectString,
        TaskExecutionId: expectString,
        TaskParameters: _json,
        TriggeredAlarms: _json,
        Type: expectString,
        WindowExecutionId: expectString,
    });
};
const de_GetMaintenanceWindowResult = (output, context) => {
    return take(output, {
        AllowUnassociatedTargets: expectBoolean,
        CreatedDate: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
        Cutoff: expectInt32,
        Description: expectString,
        Duration: expectInt32,
        Enabled: expectBoolean,
        EndDate: expectString,
        ModifiedDate: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
        Name: expectString,
        NextExecutionTime: expectString,
        Schedule: expectString,
        ScheduleOffset: expectInt32,
        ScheduleTimezone: expectString,
        StartDate: expectString,
        WindowId: expectString,
    });
};
const de_GetMaintenanceWindowTaskResult = (output, context) => {
    return take(output, {
        AlarmConfiguration: _json,
        CutoffBehavior: expectString,
        Description: expectString,
        LoggingInfo: _json,
        MaxConcurrency: expectString,
        MaxErrors: expectString,
        Name: expectString,
        Priority: expectInt32,
        ServiceRoleArn: expectString,
        Targets: _json,
        TaskArn: expectString,
        TaskInvocationParameters: (_) => de_MaintenanceWindowTaskInvocationParameters(_, context),
        TaskParameters: _json,
        TaskType: expectString,
        WindowId: expectString,
        WindowTaskId: expectString,
    });
};
const de_GetOpsItemResponse = (output, context) => {
    return take(output, {
        OpsItem: (_) => de_OpsItem(_),
    });
};
const de_GetParameterHistoryResult = (output, context) => {
    return take(output, {
        NextToken: expectString,
        Parameters: (_) => de_ParameterHistoryList(_),
    });
};
const de_GetParameterResult = (output, context) => {
    return take(output, {
        Parameter: (_) => de_Parameter(_),
    });
};
const de_GetParametersByPathResult = (output, context) => {
    return take(output, {
        NextToken: expectString,
        Parameters: (_) => de_ParameterList(_),
    });
};
const de_GetParametersResult = (output, context) => {
    return take(output, {
        InvalidParameters: _json,
        Parameters: (_) => de_ParameterList(_),
    });
};
const de_GetPatchBaselineResult = (output, context) => {
    return take(output, {
        ApprovalRules: _json,
        ApprovedPatches: _json,
        ApprovedPatchesComplianceLevel: expectString,
        ApprovedPatchesEnableNonSecurity: expectBoolean,
        AvailableSecurityUpdatesComplianceStatus: expectString,
        BaselineId: expectString,
        CreatedDate: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
        Description: expectString,
        GlobalFilters: _json,
        ModifiedDate: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
        Name: expectString,
        OperatingSystem: expectString,
        PatchGroups: _json,
        RejectedPatches: _json,
        RejectedPatchesAction: expectString,
        Sources: _json,
    });
};
const de_GetServiceSettingResult = (output, context) => {
    return take(output, {
        ServiceSetting: (_) => de_ServiceSetting(_),
    });
};
const de_InstanceAssociationStatusInfo = (output, context) => {
    return take(output, {
        AssociationId: expectString,
        AssociationName: expectString,
        AssociationVersion: expectString,
        DetailedStatus: expectString,
        DocumentVersion: expectString,
        ErrorCode: expectString,
        ExecutionDate: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
        ExecutionSummary: expectString,
        InstanceId: expectString,
        Name: expectString,
        OutputUrl: _json,
        Status: expectString,
    });
};
const de_InstanceAssociationStatusInfos = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_InstanceAssociationStatusInfo(entry);
    });
    return retVal;
};
const de_InstanceInformation = (output, context) => {
    return take(output, {
        ActivationId: expectString,
        AgentVersion: expectString,
        AssociationOverview: _json,
        AssociationStatus: expectString,
        ComputerName: expectString,
        IPAddress: expectString,
        IamRole: expectString,
        InstanceId: expectString,
        IsLatestVersion: expectBoolean,
        LastAssociationExecutionDate: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
        LastPingDateTime: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
        LastSuccessfulAssociationExecutionDate: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
        Name: expectString,
        PingStatus: expectString,
        PlatformName: expectString,
        PlatformType: expectString,
        PlatformVersion: expectString,
        RegistrationDate: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
        ResourceType: expectString,
        SourceId: expectString,
        SourceType: expectString,
    });
};
const de_InstanceInformationList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_InstanceInformation(entry);
    });
    return retVal;
};
const de_InstancePatchState = (output, context) => {
    return take(output, {
        AvailableSecurityUpdateCount: expectInt32,
        BaselineId: expectString,
        CriticalNonCompliantCount: expectInt32,
        FailedCount: expectInt32,
        InstallOverrideList: expectString,
        InstalledCount: expectInt32,
        InstalledOtherCount: expectInt32,
        InstalledPendingRebootCount: expectInt32,
        InstalledRejectedCount: expectInt32,
        InstanceId: expectString,
        LastNoRebootInstallOperationTime: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
        MissingCount: expectInt32,
        NotApplicableCount: expectInt32,
        Operation: expectString,
        OperationEndTime: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
        OperationStartTime: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
        OtherNonCompliantCount: expectInt32,
        OwnerInformation: expectString,
        PatchGroup: expectString,
        RebootOption: expectString,
        SecurityNonCompliantCount: expectInt32,
        SnapshotId: expectString,
        UnreportedNotApplicableCount: expectInt32,
    });
};
const de_InstancePatchStateList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_InstancePatchState(entry);
    });
    return retVal;
};
const de_InstancePatchStatesList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_InstancePatchState(entry);
    });
    return retVal;
};
const de_InstanceProperties = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_InstanceProperty(entry);
    });
    return retVal;
};
const de_InstanceProperty = (output, context) => {
    return take(output, {
        ActivationId: expectString,
        AgentVersion: expectString,
        Architecture: expectString,
        AssociationOverview: _json,
        AssociationStatus: expectString,
        ComputerName: expectString,
        IPAddress: expectString,
        IamRole: expectString,
        InstanceId: expectString,
        InstanceRole: expectString,
        InstanceState: expectString,
        InstanceType: expectString,
        KeyName: expectString,
        LastAssociationExecutionDate: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
        LastPingDateTime: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
        LastSuccessfulAssociationExecutionDate: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
        LaunchTime: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
        Name: expectString,
        PingStatus: expectString,
        PlatformName: expectString,
        PlatformType: expectString,
        PlatformVersion: expectString,
        RegistrationDate: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
        ResourceType: expectString,
        SourceId: expectString,
        SourceType: expectString,
    });
};
const de_InventoryDeletionsList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_InventoryDeletionStatusItem(entry);
    });
    return retVal;
};
const de_InventoryDeletionStatusItem = (output, context) => {
    return take(output, {
        DeletionId: expectString,
        DeletionStartTime: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
        DeletionSummary: _json,
        LastStatus: expectString,
        LastStatusMessage: expectString,
        LastStatusUpdateTime: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
        TypeName: expectString,
    });
};
const de_ListAssociationsResult = (output, context) => {
    return take(output, {
        Associations: (_) => de_AssociationList(_),
        NextToken: expectString,
    });
};
const de_ListAssociationVersionsResult = (output, context) => {
    return take(output, {
        AssociationVersions: (_) => de_AssociationVersionList(_),
        NextToken: expectString,
    });
};
const de_ListCommandInvocationsResult = (output, context) => {
    return take(output, {
        CommandInvocations: (_) => de_CommandInvocationList(_),
        NextToken: expectString,
    });
};
const de_ListCommandsResult = (output, context) => {
    return take(output, {
        Commands: (_) => de_CommandList(_),
        NextToken: expectString,
    });
};
const de_ListComplianceItemsResult = (output, context) => {
    return take(output, {
        ComplianceItems: (_) => de_ComplianceItemList(_),
        NextToken: expectString,
    });
};
const de_ListDocumentMetadataHistoryResponse = (output, context) => {
    return take(output, {
        Author: expectString,
        DocumentVersion: expectString,
        Metadata: (_) => de_DocumentMetadataResponseInfo(_),
        Name: expectString,
        NextToken: expectString,
    });
};
const de_ListDocumentsResult = (output, context) => {
    return take(output, {
        DocumentIdentifiers: (_) => de_DocumentIdentifierList(_),
        NextToken: expectString,
    });
};
const de_ListDocumentVersionsResult = (output, context) => {
    return take(output, {
        DocumentVersions: (_) => de_DocumentVersionList(_),
        NextToken: expectString,
    });
};
const de_ListNodesResult = (output, context) => {
    return take(output, {
        NextToken: expectString,
        Nodes: (_) => de_NodeList(_),
    });
};
const de_ListOpsItemEventsResponse = (output, context) => {
    return take(output, {
        NextToken: expectString,
        Summaries: (_) => de_OpsItemEventSummaries(_),
    });
};
const de_ListOpsItemRelatedItemsResponse = (output, context) => {
    return take(output, {
        NextToken: expectString,
        Summaries: (_) => de_OpsItemRelatedItemSummaries(_),
    });
};
const de_ListOpsMetadataResult = (output, context) => {
    return take(output, {
        NextToken: expectString,
        OpsMetadataList: (_) => de_OpsMetadataList(_),
    });
};
const de_ListResourceComplianceSummariesResult = (output, context) => {
    return take(output, {
        NextToken: expectString,
        ResourceComplianceSummaryItems: (_) => de_ResourceComplianceSummaryItemList(_),
    });
};
const de_ListResourceDataSyncResult = (output, context) => {
    return take(output, {
        NextToken: expectString,
        ResourceDataSyncItems: (_) => de_ResourceDataSyncItemList(_),
    });
};
const de_MaintenanceWindowExecution = (output, context) => {
    return take(output, {
        EndTime: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
        StartTime: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
        Status: expectString,
        StatusDetails: expectString,
        WindowExecutionId: expectString,
        WindowId: expectString,
    });
};
const de_MaintenanceWindowExecutionList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_MaintenanceWindowExecution(entry);
    });
    return retVal;
};
const de_MaintenanceWindowExecutionTaskIdentity = (output, context) => {
    return take(output, {
        AlarmConfiguration: _json,
        EndTime: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
        StartTime: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
        Status: expectString,
        StatusDetails: expectString,
        TaskArn: expectString,
        TaskExecutionId: expectString,
        TaskType: expectString,
        TriggeredAlarms: _json,
        WindowExecutionId: expectString,
    });
};
const de_MaintenanceWindowExecutionTaskIdentityList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_MaintenanceWindowExecutionTaskIdentity(entry);
    });
    return retVal;
};
const de_MaintenanceWindowExecutionTaskInvocationIdentity = (output, context) => {
    return take(output, {
        EndTime: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
        ExecutionId: expectString,
        InvocationId: expectString,
        OwnerInformation: expectString,
        Parameters: expectString,
        StartTime: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
        Status: expectString,
        StatusDetails: expectString,
        TaskExecutionId: expectString,
        TaskType: expectString,
        WindowExecutionId: expectString,
        WindowTargetId: expectString,
    });
};
const de_MaintenanceWindowExecutionTaskInvocationIdentityList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_MaintenanceWindowExecutionTaskInvocationIdentity(entry);
    });
    return retVal;
};
const de_MaintenanceWindowLambdaParameters = (output, context) => {
    return take(output, {
        ClientContext: expectString,
        Payload: context.base64Decoder,
        Qualifier: expectString,
    });
};
const de_MaintenanceWindowTaskInvocationParameters = (output, context) => {
    return take(output, {
        Automation: _json,
        Lambda: (_) => de_MaintenanceWindowLambdaParameters(_, context),
        RunCommand: _json,
        StepFunctions: _json,
    });
};
const de_Node = (output, context) => {
    return take(output, {
        CaptureTime: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
        Id: expectString,
        NodeType: (_) => _json(awsExpectUnion(_)),
        Owner: _json,
        Region: expectString,
    });
};
const de_NodeList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Node(entry);
    });
    return retVal;
};
const de_OpsItem = (output, context) => {
    return take(output, {
        ActualEndTime: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
        ActualStartTime: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
        Category: expectString,
        CreatedBy: expectString,
        CreatedTime: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
        Description: expectString,
        LastModifiedBy: expectString,
        LastModifiedTime: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
        Notifications: _json,
        OperationalData: _json,
        OpsItemArn: expectString,
        OpsItemId: expectString,
        OpsItemType: expectString,
        PlannedEndTime: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
        PlannedStartTime: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
        Priority: expectInt32,
        RelatedOpsItems: _json,
        Severity: expectString,
        Source: expectString,
        Status: expectString,
        Title: expectString,
        Version: expectString,
    });
};
const de_OpsItemEventSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_OpsItemEventSummary(entry);
    });
    return retVal;
};
const de_OpsItemEventSummary = (output, context) => {
    return take(output, {
        CreatedBy: _json,
        CreatedTime: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
        Detail: expectString,
        DetailType: expectString,
        EventId: expectString,
        OpsItemId: expectString,
        Source: expectString,
    });
};
const de_OpsItemRelatedItemSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_OpsItemRelatedItemSummary(entry);
    });
    return retVal;
};
const de_OpsItemRelatedItemSummary = (output, context) => {
    return take(output, {
        AssociationId: expectString,
        AssociationType: expectString,
        CreatedBy: _json,
        CreatedTime: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
        LastModifiedBy: _json,
        LastModifiedTime: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
        OpsItemId: expectString,
        ResourceType: expectString,
        ResourceUri: expectString,
    });
};
const de_OpsItemSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_OpsItemSummary(entry);
    });
    return retVal;
};
const de_OpsItemSummary = (output, context) => {
    return take(output, {
        ActualEndTime: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
        ActualStartTime: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
        Category: expectString,
        CreatedBy: expectString,
        CreatedTime: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
        LastModifiedBy: expectString,
        LastModifiedTime: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
        OperationalData: _json,
        OpsItemId: expectString,
        OpsItemType: expectString,
        PlannedEndTime: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
        PlannedStartTime: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
        Priority: expectInt32,
        Severity: expectString,
        Source: expectString,
        Status: expectString,
        Title: expectString,
    });
};
const de_OpsMetadata = (output, context) => {
    return take(output, {
        CreationDate: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
        LastModifiedDate: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
        LastModifiedUser: expectString,
        OpsMetadataArn: expectString,
        ResourceId: expectString,
    });
};
const de_OpsMetadataList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_OpsMetadata(entry);
    });
    return retVal;
};
const de_Parameter = (output, context) => {
    return take(output, {
        ARN: expectString,
        DataType: expectString,
        LastModifiedDate: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
        Name: expectString,
        Selector: expectString,
        SourceResult: expectString,
        Type: expectString,
        Value: expectString,
        Version: expectLong,
    });
};
const de_ParameterHistory = (output, context) => {
    return take(output, {
        AllowedPattern: expectString,
        DataType: expectString,
        Description: expectString,
        KeyId: expectString,
        Labels: _json,
        LastModifiedDate: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
        LastModifiedUser: expectString,
        Name: expectString,
        Policies: _json,
        Tier: expectString,
        Type: expectString,
        Value: expectString,
        Version: expectLong,
    });
};
const de_ParameterHistoryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ParameterHistory(entry);
    });
    return retVal;
};
const de_ParameterList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Parameter(entry);
    });
    return retVal;
};
const de_ParameterMetadata = (output, context) => {
    return take(output, {
        ARN: expectString,
        AllowedPattern: expectString,
        DataType: expectString,
        Description: expectString,
        KeyId: expectString,
        LastModifiedDate: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
        LastModifiedUser: expectString,
        Name: expectString,
        Policies: _json,
        Tier: expectString,
        Type: expectString,
        Version: expectLong,
    });
};
const de_ParameterMetadataList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ParameterMetadata(entry);
    });
    return retVal;
};
const de_Patch = (output, context) => {
    return take(output, {
        AdvisoryIds: _json,
        Arch: expectString,
        BugzillaIds: _json,
        CVEIds: _json,
        Classification: expectString,
        ContentUrl: expectString,
        Description: expectString,
        Epoch: expectInt32,
        Id: expectString,
        KbNumber: expectString,
        Language: expectString,
        MsrcNumber: expectString,
        MsrcSeverity: expectString,
        Name: expectString,
        Product: expectString,
        ProductFamily: expectString,
        Release: expectString,
        ReleaseDate: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
        Repository: expectString,
        Severity: expectString,
        Title: expectString,
        Vendor: expectString,
        Version: expectString,
    });
};
const de_PatchComplianceData = (output, context) => {
    return take(output, {
        CVEIds: expectString,
        Classification: expectString,
        InstalledTime: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
        KBId: expectString,
        Severity: expectString,
        State: expectString,
        Title: expectString,
    });
};
const de_PatchComplianceDataList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PatchComplianceData(entry);
    });
    return retVal;
};
const de_PatchList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Patch(entry);
    });
    return retVal;
};
const de_PatchStatus = (output, context) => {
    return take(output, {
        ApprovalDate: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
        ComplianceLevel: expectString,
        DeploymentStatus: expectString,
    });
};
const de_ResetServiceSettingResult = (output, context) => {
    return take(output, {
        ServiceSetting: (_) => de_ServiceSetting(_),
    });
};
const de_ResourceComplianceSummaryItem = (output, context) => {
    return take(output, {
        ComplianceType: expectString,
        CompliantSummary: _json,
        ExecutionSummary: (_) => de_ComplianceExecutionSummary(_),
        NonCompliantSummary: _json,
        OverallSeverity: expectString,
        ResourceId: expectString,
        ResourceType: expectString,
        Status: expectString,
    });
};
const de_ResourceComplianceSummaryItemList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ResourceComplianceSummaryItem(entry);
    });
    return retVal;
};
const de_ResourceDataSyncItem = (output, context) => {
    return take(output, {
        LastStatus: expectString,
        LastSuccessfulSyncTime: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
        LastSyncStatusMessage: expectString,
        LastSyncTime: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
        S3Destination: _json,
        SyncCreatedTime: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
        SyncLastModifiedTime: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
        SyncName: expectString,
        SyncSource: _json,
        SyncType: expectString,
    });
};
const de_ResourceDataSyncItemList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ResourceDataSyncItem(entry);
    });
    return retVal;
};
const de_ReviewInformation = (output, context) => {
    return take(output, {
        ReviewedTime: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
        Reviewer: expectString,
        Status: expectString,
    });
};
const de_ReviewInformationList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ReviewInformation(entry);
    });
    return retVal;
};
const de_SendCommandResult = (output, context) => {
    return take(output, {
        Command: (_) => de_Command(_),
    });
};
const de_ServiceSetting = (output, context) => {
    return take(output, {
        ARN: expectString,
        LastModifiedDate: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
        LastModifiedUser: expectString,
        SettingId: expectString,
        SettingValue: expectString,
        Status: expectString,
    });
};
const de_Session = (output, context) => {
    return take(output, {
        AccessType: expectString,
        Details: expectString,
        DocumentName: expectString,
        EndDate: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
        MaxSessionDuration: expectString,
        OutputUrl: _json,
        Owner: expectString,
        Reason: expectString,
        SessionId: expectString,
        StartDate: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
        Status: expectString,
        Target: expectString,
    });
};
const de_SessionList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Session(entry);
    });
    return retVal;
};
const de_StepExecution = (output, context) => {
    return take(output, {
        Action: expectString,
        ExecutionEndTime: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
        ExecutionStartTime: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
        FailureDetails: _json,
        FailureMessage: expectString,
        Inputs: _json,
        IsCritical: expectBoolean,
        IsEnd: expectBoolean,
        MaxAttempts: expectInt32,
        NextStep: expectString,
        OnFailure: expectString,
        Outputs: _json,
        OverriddenParameters: _json,
        ParentStepDetails: _json,
        Response: expectString,
        ResponseCode: expectString,
        StepExecutionId: expectString,
        StepName: expectString,
        StepStatus: expectString,
        TargetLocation: _json,
        Targets: _json,
        TimeoutSeconds: expectLong,
        TriggeredAlarms: _json,
        ValidNextSteps: _json,
    });
};
const de_StepExecutionList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_StepExecution(entry);
    });
    return retVal;
};
const de_UpdateAssociationResult = (output, context) => {
    return take(output, {
        AssociationDescription: (_) => de_AssociationDescription(_),
    });
};
const de_UpdateAssociationStatusResult = (output, context) => {
    return take(output, {
        AssociationDescription: (_) => de_AssociationDescription(_),
    });
};
const de_UpdateDocumentResult = (output, context) => {
    return take(output, {
        DocumentDescription: (_) => de_DocumentDescription(_),
    });
};
const de_UpdateMaintenanceWindowTaskResult = (output, context) => {
    return take(output, {
        AlarmConfiguration: _json,
        CutoffBehavior: expectString,
        Description: expectString,
        LoggingInfo: _json,
        MaxConcurrency: expectString,
        MaxErrors: expectString,
        Name: expectString,
        Priority: expectInt32,
        ServiceRoleArn: expectString,
        Targets: _json,
        TaskArn: expectString,
        TaskInvocationParameters: (_) => de_MaintenanceWindowTaskInvocationParameters(_, context),
        TaskParameters: _json,
        WindowId: expectString,
        WindowTaskId: expectString,
    });
};
const de_UpdatePatchBaselineResult = (output, context) => {
    return take(output, {
        ApprovalRules: _json,
        ApprovedPatches: _json,
        ApprovedPatchesComplianceLevel: expectString,
        ApprovedPatchesEnableNonSecurity: expectBoolean,
        AvailableSecurityUpdatesComplianceStatus: expectString,
        BaselineId: expectString,
        CreatedDate: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
        Description: expectString,
        GlobalFilters: _json,
        ModifiedDate: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
        Name: expectString,
        OperatingSystem: expectString,
        RejectedPatches: _json,
        RejectedPatchesAction: expectString,
        Sources: _json,
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const throwDefaultError = withBaseException(SSMServiceException);
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (body !== undefined) {
        contents.body = body;
    }
    return new HttpRequest(contents);
};
function sharedHeaders(operation) {
    return {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": `AmazonSSM.${operation}`,
    };
}

export { de_AddTagsToResourceCommand, de_AssociateOpsItemRelatedItemCommand, de_CancelCommandCommand, de_CancelMaintenanceWindowExecutionCommand, de_CreateActivationCommand, de_CreateAssociationBatchCommand, de_CreateAssociationCommand, de_CreateDocumentCommand, de_CreateMaintenanceWindowCommand, de_CreateOpsItemCommand, de_CreateOpsMetadataCommand, de_CreatePatchBaselineCommand, de_CreateResourceDataSyncCommand, de_DeleteActivationCommand, de_DeleteAssociationCommand, de_DeleteDocumentCommand, de_DeleteInventoryCommand, de_DeleteMaintenanceWindowCommand, de_DeleteOpsItemCommand, de_DeleteOpsMetadataCommand, de_DeleteParameterCommand, de_DeleteParametersCommand, de_DeletePatchBaselineCommand, de_DeleteResourceDataSyncCommand, de_DeleteResourcePolicyCommand, de_DeregisterManagedInstanceCommand, de_DeregisterPatchBaselineForPatchGroupCommand, de_DeregisterTargetFromMaintenanceWindowCommand, de_DeregisterTaskFromMaintenanceWindowCommand, de_DescribeActivationsCommand, de_DescribeAssociationCommand, de_DescribeAssociationExecutionTargetsCommand, de_DescribeAssociationExecutionsCommand, de_DescribeAutomationExecutionsCommand, de_DescribeAutomationStepExecutionsCommand, de_DescribeAvailablePatchesCommand, de_DescribeDocumentCommand, de_DescribeDocumentPermissionCommand, de_DescribeEffectiveInstanceAssociationsCommand, de_DescribeEffectivePatchesForPatchBaselineCommand, de_DescribeInstanceAssociationsStatusCommand, de_DescribeInstanceInformationCommand, de_DescribeInstancePatchStatesCommand, de_DescribeInstancePatchStatesForPatchGroupCommand, de_DescribeInstancePatchesCommand, de_DescribeInstancePropertiesCommand, de_DescribeInventoryDeletionsCommand, de_DescribeMaintenanceWindowExecutionTaskInvocationsCommand, de_DescribeMaintenanceWindowExecutionTasksCommand, de_DescribeMaintenanceWindowExecutionsCommand, de_DescribeMaintenanceWindowScheduleCommand, de_DescribeMaintenanceWindowTargetsCommand, de_DescribeMaintenanceWindowTasksCommand, de_DescribeMaintenanceWindowsCommand, de_DescribeMaintenanceWindowsForTargetCommand, de_DescribeOpsItemsCommand, de_DescribeParametersCommand, de_DescribePatchBaselinesCommand, de_DescribePatchGroupStateCommand, de_DescribePatchGroupsCommand, de_DescribePatchPropertiesCommand, de_DescribeSessionsCommand, de_DisassociateOpsItemRelatedItemCommand, de_GetAccessTokenCommand, de_GetAutomationExecutionCommand, de_GetCalendarStateCommand, de_GetCommandInvocationCommand, de_GetConnectionStatusCommand, de_GetDefaultPatchBaselineCommand, de_GetDeployablePatchSnapshotForInstanceCommand, de_GetDocumentCommand, de_GetExecutionPreviewCommand, de_GetInventoryCommand, de_GetInventorySchemaCommand, de_GetMaintenanceWindowCommand, de_GetMaintenanceWindowExecutionCommand, de_GetMaintenanceWindowExecutionTaskCommand, de_GetMaintenanceWindowExecutionTaskInvocationCommand, de_GetMaintenanceWindowTaskCommand, de_GetOpsItemCommand, de_GetOpsMetadataCommand, de_GetOpsSummaryCommand, de_GetParameterCommand, de_GetParameterHistoryCommand, de_GetParametersByPathCommand, de_GetParametersCommand, de_GetPatchBaselineCommand, de_GetPatchBaselineForPatchGroupCommand, de_GetResourcePoliciesCommand, de_GetServiceSettingCommand, de_LabelParameterVersionCommand, de_ListAssociationVersionsCommand, de_ListAssociationsCommand, de_ListCommandInvocationsCommand, de_ListCommandsCommand, de_ListComplianceItemsCommand, de_ListComplianceSummariesCommand, de_ListDocumentMetadataHistoryCommand, de_ListDocumentVersionsCommand, de_ListDocumentsCommand, de_ListInventoryEntriesCommand, de_ListNodesCommand, de_ListNodesSummaryCommand, de_ListOpsItemEventsCommand, de_ListOpsItemRelatedItemsCommand, de_ListOpsMetadataCommand, de_ListResourceComplianceSummariesCommand, de_ListResourceDataSyncCommand, de_ListTagsForResourceCommand, de_ModifyDocumentPermissionCommand, de_PutComplianceItemsCommand, de_PutInventoryCommand, de_PutParameterCommand, de_PutResourcePolicyCommand, de_RegisterDefaultPatchBaselineCommand, de_RegisterPatchBaselineForPatchGroupCommand, de_RegisterTargetWithMaintenanceWindowCommand, de_RegisterTaskWithMaintenanceWindowCommand, de_RemoveTagsFromResourceCommand, de_ResetServiceSettingCommand, de_ResumeSessionCommand, de_SendAutomationSignalCommand, de_SendCommandCommand, de_StartAccessRequestCommand, de_StartAssociationsOnceCommand, de_StartAutomationExecutionCommand, de_StartChangeRequestExecutionCommand, de_StartExecutionPreviewCommand, de_StartSessionCommand, de_StopAutomationExecutionCommand, de_TerminateSessionCommand, de_UnlabelParameterVersionCommand, de_UpdateAssociationCommand, de_UpdateAssociationStatusCommand, de_UpdateDocumentCommand, de_UpdateDocumentDefaultVersionCommand, de_UpdateDocumentMetadataCommand, de_UpdateMaintenanceWindowCommand, de_UpdateMaintenanceWindowTargetCommand, de_UpdateMaintenanceWindowTaskCommand, de_UpdateManagedInstanceRoleCommand, de_UpdateOpsItemCommand, de_UpdateOpsMetadataCommand, de_UpdatePatchBaselineCommand, de_UpdateResourceDataSyncCommand, de_UpdateServiceSettingCommand, se_AddTagsToResourceCommand, se_AssociateOpsItemRelatedItemCommand, se_CancelCommandCommand, se_CancelMaintenanceWindowExecutionCommand, se_CreateActivationCommand, se_CreateAssociationBatchCommand, se_CreateAssociationCommand, se_CreateDocumentCommand, se_CreateMaintenanceWindowCommand, se_CreateOpsItemCommand, se_CreateOpsMetadataCommand, se_CreatePatchBaselineCommand, se_CreateResourceDataSyncCommand, se_DeleteActivationCommand, se_DeleteAssociationCommand, se_DeleteDocumentCommand, se_DeleteInventoryCommand, se_DeleteMaintenanceWindowCommand, se_DeleteOpsItemCommand, se_DeleteOpsMetadataCommand, se_DeleteParameterCommand, se_DeleteParametersCommand, se_DeletePatchBaselineCommand, se_DeleteResourceDataSyncCommand, se_DeleteResourcePolicyCommand, se_DeregisterManagedInstanceCommand, se_DeregisterPatchBaselineForPatchGroupCommand, se_DeregisterTargetFromMaintenanceWindowCommand, se_DeregisterTaskFromMaintenanceWindowCommand, se_DescribeActivationsCommand, se_DescribeAssociationCommand, se_DescribeAssociationExecutionTargetsCommand, se_DescribeAssociationExecutionsCommand, se_DescribeAutomationExecutionsCommand, se_DescribeAutomationStepExecutionsCommand, se_DescribeAvailablePatchesCommand, se_DescribeDocumentCommand, se_DescribeDocumentPermissionCommand, se_DescribeEffectiveInstanceAssociationsCommand, se_DescribeEffectivePatchesForPatchBaselineCommand, se_DescribeInstanceAssociationsStatusCommand, se_DescribeInstanceInformationCommand, se_DescribeInstancePatchStatesCommand, se_DescribeInstancePatchStatesForPatchGroupCommand, se_DescribeInstancePatchesCommand, se_DescribeInstancePropertiesCommand, se_DescribeInventoryDeletionsCommand, se_DescribeMaintenanceWindowExecutionTaskInvocationsCommand, se_DescribeMaintenanceWindowExecutionTasksCommand, se_DescribeMaintenanceWindowExecutionsCommand, se_DescribeMaintenanceWindowScheduleCommand, se_DescribeMaintenanceWindowTargetsCommand, se_DescribeMaintenanceWindowTasksCommand, se_DescribeMaintenanceWindowsCommand, se_DescribeMaintenanceWindowsForTargetCommand, se_DescribeOpsItemsCommand, se_DescribeParametersCommand, se_DescribePatchBaselinesCommand, se_DescribePatchGroupStateCommand, se_DescribePatchGroupsCommand, se_DescribePatchPropertiesCommand, se_DescribeSessionsCommand, se_DisassociateOpsItemRelatedItemCommand, se_GetAccessTokenCommand, se_GetAutomationExecutionCommand, se_GetCalendarStateCommand, se_GetCommandInvocationCommand, se_GetConnectionStatusCommand, se_GetDefaultPatchBaselineCommand, se_GetDeployablePatchSnapshotForInstanceCommand, se_GetDocumentCommand, se_GetExecutionPreviewCommand, se_GetInventoryCommand, se_GetInventorySchemaCommand, se_GetMaintenanceWindowCommand, se_GetMaintenanceWindowExecutionCommand, se_GetMaintenanceWindowExecutionTaskCommand, se_GetMaintenanceWindowExecutionTaskInvocationCommand, se_GetMaintenanceWindowTaskCommand, se_GetOpsItemCommand, se_GetOpsMetadataCommand, se_GetOpsSummaryCommand, se_GetParameterCommand, se_GetParameterHistoryCommand, se_GetParametersByPathCommand, se_GetParametersCommand, se_GetPatchBaselineCommand, se_GetPatchBaselineForPatchGroupCommand, se_GetResourcePoliciesCommand, se_GetServiceSettingCommand, se_LabelParameterVersionCommand, se_ListAssociationVersionsCommand, se_ListAssociationsCommand, se_ListCommandInvocationsCommand, se_ListCommandsCommand, se_ListComplianceItemsCommand, se_ListComplianceSummariesCommand, se_ListDocumentMetadataHistoryCommand, se_ListDocumentVersionsCommand, se_ListDocumentsCommand, se_ListInventoryEntriesCommand, se_ListNodesCommand, se_ListNodesSummaryCommand, se_ListOpsItemEventsCommand, se_ListOpsItemRelatedItemsCommand, se_ListOpsMetadataCommand, se_ListResourceComplianceSummariesCommand, se_ListResourceDataSyncCommand, se_ListTagsForResourceCommand, se_ModifyDocumentPermissionCommand, se_PutComplianceItemsCommand, se_PutInventoryCommand, se_PutParameterCommand, se_PutResourcePolicyCommand, se_RegisterDefaultPatchBaselineCommand, se_RegisterPatchBaselineForPatchGroupCommand, se_RegisterTargetWithMaintenanceWindowCommand, se_RegisterTaskWithMaintenanceWindowCommand, se_RemoveTagsFromResourceCommand, se_ResetServiceSettingCommand, se_ResumeSessionCommand, se_SendAutomationSignalCommand, se_SendCommandCommand, se_StartAccessRequestCommand, se_StartAssociationsOnceCommand, se_StartAutomationExecutionCommand, se_StartChangeRequestExecutionCommand, se_StartExecutionPreviewCommand, se_StartSessionCommand, se_StopAutomationExecutionCommand, se_TerminateSessionCommand, se_UnlabelParameterVersionCommand, se_UpdateAssociationCommand, se_UpdateAssociationStatusCommand, se_UpdateDocumentCommand, se_UpdateDocumentDefaultVersionCommand, se_UpdateDocumentMetadataCommand, se_UpdateMaintenanceWindowCommand, se_UpdateMaintenanceWindowTargetCommand, se_UpdateMaintenanceWindowTaskCommand, se_UpdateManagedInstanceRoleCommand, se_UpdateOpsItemCommand, se_UpdateOpsMetadataCommand, se_UpdatePatchBaselineCommand, se_UpdateResourceDataSyncCommand, se_UpdateServiceSettingCommand };
//# sourceMappingURL=Aws_json1_1.js.map
