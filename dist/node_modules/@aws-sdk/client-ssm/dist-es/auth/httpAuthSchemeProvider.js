import { getSmithyContext } from '../../../../@smithy/util-middleware/dist-es/getSmithyContext.js';
import { normalizeProvider } from '../../../../@smithy/util-middleware/dist-es/normalizeProvider.js';
import { resolveAwsSdkSigV4Config } from '../../../core/dist-es/submodules/httpAuthSchemes/aws_sdk/resolveAwsSdkSigV4Config.js';

const defaultSSMHttpAuthSchemeParametersProvider = async (config, context, input) => {
    return {
        operation: getSmithyContext(context).operation,
        region: (await normalizeProvider(config.region)()) ||
            (() => {
                throw new Error("expected `region` to be configured for `aws.auth#sigv4`");
            })(),
    };
};
function createAwsAuthSigv4HttpAuthOption(authParameters) {
    return {
        schemeId: "aws.auth#sigv4",
        signingProperties: {
            name: "ssm",
            region: authParameters.region,
        },
        propertiesExtractor: (config, context) => ({
            signingProperties: {
                config,
                context,
            },
        }),
    };
}
const defaultSSMHttpAuthSchemeProvider = (authParameters) => {
    const options = [];
    switch (authParameters.operation) {
        default: {
            options.push(createAwsAuthSigv4HttpAuthOption(authParameters));
        }
    }
    return options;
};
const resolveHttpAuthSchemeConfig = (config) => {
    const config_0 = resolveAwsSdkSigV4Config(config);
    return Object.assign(config_0, {
        authSchemePreference: normalizeProvider(config.authSchemePreference ?? []),
    });
};

export { defaultSSMHttpAuthSchemeParametersProvider, defaultSSMHttpAuthSchemeProvider, resolveHttpAuthSchemeConfig };
//# sourceMappingURL=httpAuthSchemeProvider.js.map
