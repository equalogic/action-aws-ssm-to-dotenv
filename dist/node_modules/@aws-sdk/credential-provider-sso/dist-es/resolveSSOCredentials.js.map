{"version":3,"file":"resolveSSOCredentials.js","sources":["../../../../../node_modules/@aws-sdk/credential-provider-sso/dist-es/resolveSSOCredentials.js"],"sourcesContent":["import { setCredentialFeature } from \"@aws-sdk/core/client\";\nimport { fromSso as getSsoTokenProvider } from \"@aws-sdk/token-providers\";\nimport { CredentialsProviderError } from \"@smithy/property-provider\";\nimport { getSSOTokenFromFile } from \"@smithy/shared-ini-file-loader\";\nconst SHOULD_FAIL_CREDENTIAL_CHAIN = false;\nexport const resolveSSOCredentials = async ({ ssoStartUrl, ssoSession, ssoAccountId, ssoRegion, ssoRoleName, ssoClient, clientConfig, parentClientConfig, profile, logger, }) => {\n    let token;\n    const refreshMessage = `To refresh this SSO session run aws sso login with the corresponding profile.`;\n    if (ssoSession) {\n        try {\n            const _token = await getSsoTokenProvider({ profile })();\n            token = {\n                accessToken: _token.token,\n                expiresAt: new Date(_token.expiration).toISOString(),\n            };\n        }\n        catch (e) {\n            throw new CredentialsProviderError(e.message, {\n                tryNextLink: SHOULD_FAIL_CREDENTIAL_CHAIN,\n                logger,\n            });\n        }\n    }\n    else {\n        try {\n            token = await getSSOTokenFromFile(ssoStartUrl);\n        }\n        catch (e) {\n            throw new CredentialsProviderError(`The SSO session associated with this profile is invalid. ${refreshMessage}`, {\n                tryNextLink: SHOULD_FAIL_CREDENTIAL_CHAIN,\n                logger,\n            });\n        }\n    }\n    if (new Date(token.expiresAt).getTime() - Date.now() <= 0) {\n        throw new CredentialsProviderError(`The SSO session associated with this profile has expired. ${refreshMessage}`, {\n            tryNextLink: SHOULD_FAIL_CREDENTIAL_CHAIN,\n            logger,\n        });\n    }\n    const { accessToken } = token;\n    const { SSOClient, GetRoleCredentialsCommand } = await import(\"./loadSso\");\n    const sso = ssoClient ||\n        new SSOClient(Object.assign({}, clientConfig ?? {}, {\n            logger: clientConfig?.logger ?? parentClientConfig?.logger,\n            region: clientConfig?.region ?? ssoRegion,\n        }));\n    let ssoResp;\n    try {\n        ssoResp = await sso.send(new GetRoleCredentialsCommand({\n            accountId: ssoAccountId,\n            roleName: ssoRoleName,\n            accessToken,\n        }));\n    }\n    catch (e) {\n        throw new CredentialsProviderError(e, {\n            tryNextLink: SHOULD_FAIL_CREDENTIAL_CHAIN,\n            logger,\n        });\n    }\n    const { roleCredentials: { accessKeyId, secretAccessKey, sessionToken, expiration, credentialScope, accountId } = {}, } = ssoResp;\n    if (!accessKeyId || !secretAccessKey || !sessionToken || !expiration) {\n        throw new CredentialsProviderError(\"SSO returns an invalid temporary credential.\", {\n            tryNextLink: SHOULD_FAIL_CREDENTIAL_CHAIN,\n            logger,\n        });\n    }\n    const credentials = {\n        accessKeyId,\n        secretAccessKey,\n        sessionToken,\n        expiration: new Date(expiration),\n        ...(credentialScope && { credentialScope }),\n        ...(accountId && { accountId }),\n    };\n    if (ssoSession) {\n        setCredentialFeature(credentials, \"CREDENTIALS_SSO\", \"s\");\n    }\n    else {\n        setCredentialFeature(credentials, \"CREDENTIALS_SSO_LEGACY\", \"u\");\n    }\n    return credentials;\n};\n"],"names":["getSsoTokenProvider"],"mappings":"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","x_google_ignoreList":[0]}