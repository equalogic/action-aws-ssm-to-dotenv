import { resolveHostHeaderConfig, getHostHeaderPlugin } from '../../../../middleware-host-header/dist-es/index.js';
import { getLoggerPlugin } from '../../../../middleware-logger/dist-es/loggerMiddleware.js';
import { getRecursionDetectionPlugin } from '../../../../middleware-recursion-detection/dist-es/index.js';
import { resolveUserAgentConfig } from '../../../../middleware-user-agent/dist-es/configurations.js';
import { getUserAgentPlugin } from '../../../../middleware-user-agent/dist-es/user-agent-middleware.js';
import '../../../../../@smithy/util-config-provider/dist-es/types.js';
import '../../../../../@smithy/types/dist-es/auth/auth.js';
import '../../../../../@smithy/types/dist-es/auth/HttpApiKeyAuth.js';
import '../../../../../@smithy/types/dist-es/endpoint.js';
import '../../../../../@smithy/types/dist-es/extensions/checksum.js';
import '../../../../../@smithy/types/dist-es/http.js';
import '../../../../../@smithy/types/dist-es/profile.js';
import '../../../../../@smithy/types/dist-es/transfer.js';
import { resolveRegionConfig } from '../../../../../@smithy/config-resolver/dist-es/regionConfig/resolveRegionConfig.js';
import { getContentLengthPlugin } from '../../../../../@smithy/middleware-content-length/dist-es/index.js';
import 'os';
import 'path';
import 'crypto';
import '../../../../../@smithy/shared-ini-file-loader/dist-es/getSSOTokenFromFile.js';
import '../../../../../@smithy/shared-ini-file-loader/dist-es/slurpFile.js';
import '../../../../../@smithy/middleware-endpoint/dist-es/getEndpointPlugin.js';
import { resolveEndpointConfig } from '../../../../../@smithy/middleware-endpoint/dist-es/resolveEndpointConfig.js';
import '../../../../../@smithy/util-retry/dist-es/config.js';
import '../../../../../@smithy/util-retry/dist-es/DefaultRateLimiter.js';
import { resolveRetryConfig } from '../../../../../@smithy/middleware-retry/dist-es/configurations.js';
import { getRetryPlugin } from '../../../../../@smithy/middleware-retry/dist-es/retryMiddleware.js';
import { Client } from '../../../../../@smithy/smithy-client/dist-es/client.js';
import { resolveHttpAuthSchemeConfig, defaultSSOOIDCHttpAuthSchemeParametersProvider } from './auth/httpAuthSchemeProvider.js';
import { resolveClientEndpointParameters } from './endpoint/EndpointParameters.js';
import { getRuntimeConfig } from './runtimeConfig.js';
import { resolveRuntimeExtensions } from './runtimeExtensions.js';
import { getHttpAuthSchemeEndpointRuleSetPlugin } from '../../../../../@smithy/core/dist-es/middleware-http-auth-scheme/getHttpAuthSchemeEndpointRuleSetPlugin.js';
import { DefaultIdentityProviderConfig } from '../../../../../@smithy/core/dist-es/util-identity-and-auth/DefaultIdentityProviderConfig.js';
import { getHttpSigningPlugin } from '../../../../../@smithy/core/dist-es/middleware-http-signing/getHttpSigningMiddleware.js';

class SSOOIDCClient extends Client {
    config;
    constructor(...[configuration]) {
        const _config_0 = getRuntimeConfig(configuration || {});
        super(_config_0);
        this.initConfig = _config_0;
        const _config_1 = resolveClientEndpointParameters(_config_0);
        const _config_2 = resolveUserAgentConfig(_config_1);
        const _config_3 = resolveRetryConfig(_config_2);
        const _config_4 = resolveRegionConfig(_config_3);
        const _config_5 = resolveHostHeaderConfig(_config_4);
        const _config_6 = resolveEndpointConfig(_config_5);
        const _config_7 = resolveHttpAuthSchemeConfig(_config_6);
        const _config_8 = resolveRuntimeExtensions(_config_7, configuration?.extensions || []);
        this.config = _config_8;
        this.middlewareStack.use(getUserAgentPlugin(this.config));
        this.middlewareStack.use(getRetryPlugin(this.config));
        this.middlewareStack.use(getContentLengthPlugin(this.config));
        this.middlewareStack.use(getHostHeaderPlugin(this.config));
        this.middlewareStack.use(getLoggerPlugin(this.config));
        this.middlewareStack.use(getRecursionDetectionPlugin(this.config));
        this.middlewareStack.use(getHttpAuthSchemeEndpointRuleSetPlugin(this.config, {
            httpAuthSchemeParametersProvider: defaultSSOOIDCHttpAuthSchemeParametersProvider,
            identityProviderConfigProvider: async (config) => new DefaultIdentityProviderConfig({
                "aws.auth#sigv4": config.credentials,
            }),
        }));
        this.middlewareStack.use(getHttpSigningPlugin(this.config));
    }
    destroy() {
        super.destroy();
    }
}

export { SSOOIDCClient, Client as __Client };
//# sourceMappingURL=SSOOIDCClient.js.map
