{"version":3,"file":"resolveAwsSdkSigV4Config.js","sources":["../../../../../../../../node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/aws_sdk/resolveAwsSdkSigV4Config.js"],"sourcesContent":["import { setCredentialFeature } from \"@aws-sdk/core/client\";\nimport { doesIdentityRequireRefresh, isIdentityExpired, memoizeIdentityProvider, normalizeProvider, } from \"@smithy/core\";\nimport { SignatureV4 } from \"@smithy/signature-v4\";\nexport const resolveAwsSdkSigV4Config = (config) => {\n    let inputCredentials = config.credentials;\n    let isUserSupplied = !!config.credentials;\n    let resolvedCredentials = undefined;\n    Object.defineProperty(config, \"credentials\", {\n        set(credentials) {\n            if (credentials && credentials !== inputCredentials && credentials !== resolvedCredentials) {\n                isUserSupplied = true;\n            }\n            inputCredentials = credentials;\n            const memoizedProvider = normalizeCredentialProvider(config, {\n                credentials: inputCredentials,\n                credentialDefaultProvider: config.credentialDefaultProvider,\n            });\n            const boundProvider = bindCallerConfig(config, memoizedProvider);\n            if (isUserSupplied && !boundProvider.attributed) {\n                resolvedCredentials = async (options) => boundProvider(options).then((creds) => setCredentialFeature(creds, \"CREDENTIALS_CODE\", \"e\"));\n                resolvedCredentials.memoized = boundProvider.memoized;\n                resolvedCredentials.configBound = boundProvider.configBound;\n                resolvedCredentials.attributed = true;\n            }\n            else {\n                resolvedCredentials = boundProvider;\n            }\n        },\n        get() {\n            return resolvedCredentials;\n        },\n        enumerable: true,\n        configurable: true,\n    });\n    config.credentials = inputCredentials;\n    const { signingEscapePath = true, systemClockOffset = config.systemClockOffset || 0, sha256, } = config;\n    let signer;\n    if (config.signer) {\n        signer = normalizeProvider(config.signer);\n    }\n    else if (config.regionInfoProvider) {\n        signer = () => normalizeProvider(config.region)()\n            .then(async (region) => [\n            (await config.regionInfoProvider(region, {\n                useFipsEndpoint: await config.useFipsEndpoint(),\n                useDualstackEndpoint: await config.useDualstackEndpoint(),\n            })) || {},\n            region,\n        ])\n            .then(([regionInfo, region]) => {\n            const { signingRegion, signingService } = regionInfo;\n            config.signingRegion = config.signingRegion || signingRegion || region;\n            config.signingName = config.signingName || signingService || config.serviceId;\n            const params = {\n                ...config,\n                credentials: config.credentials,\n                region: config.signingRegion,\n                service: config.signingName,\n                sha256,\n                uriEscapePath: signingEscapePath,\n            };\n            const SignerCtor = config.signerConstructor || SignatureV4;\n            return new SignerCtor(params);\n        });\n    }\n    else {\n        signer = async (authScheme) => {\n            authScheme = Object.assign({}, {\n                name: \"sigv4\",\n                signingName: config.signingName || config.defaultSigningName,\n                signingRegion: await normalizeProvider(config.region)(),\n                properties: {},\n            }, authScheme);\n            const signingRegion = authScheme.signingRegion;\n            const signingService = authScheme.signingName;\n            config.signingRegion = config.signingRegion || signingRegion;\n            config.signingName = config.signingName || signingService || config.serviceId;\n            const params = {\n                ...config,\n                credentials: config.credentials,\n                region: config.signingRegion,\n                service: config.signingName,\n                sha256,\n                uriEscapePath: signingEscapePath,\n            };\n            const SignerCtor = config.signerConstructor || SignatureV4;\n            return new SignerCtor(params);\n        };\n    }\n    const resolvedConfig = Object.assign(config, {\n        systemClockOffset,\n        signingEscapePath,\n        signer,\n    });\n    return resolvedConfig;\n};\nexport const resolveAWSSDKSigV4Config = resolveAwsSdkSigV4Config;\nfunction normalizeCredentialProvider(config, { credentials, credentialDefaultProvider, }) {\n    let credentialsProvider;\n    if (credentials) {\n        if (!credentials?.memoized) {\n            credentialsProvider = memoizeIdentityProvider(credentials, isIdentityExpired, doesIdentityRequireRefresh);\n        }\n        else {\n            credentialsProvider = credentials;\n        }\n    }\n    else {\n        if (credentialDefaultProvider) {\n            credentialsProvider = normalizeProvider(credentialDefaultProvider(Object.assign({}, config, {\n                parentClientConfig: config,\n            })));\n        }\n        else {\n            credentialsProvider = async () => {\n                throw new Error(\"@aws-sdk/core::resolveAwsSdkSigV4Config - `credentials` not provided and no credentialDefaultProvider was configured.\");\n            };\n        }\n    }\n    credentialsProvider.memoized = true;\n    return credentialsProvider;\n}\nfunction bindCallerConfig(config, credentialsProvider) {\n    if (credentialsProvider.configBound) {\n        return credentialsProvider;\n    }\n    const fn = async (options) => credentialsProvider({ ...options, callerClientConfig: config });\n    fn.memoized = credentialsProvider.memoized;\n    fn.configBound = true;\n    return fn;\n}\n"],"names":[],"mappings":"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","x_google_ignoreList":[0]}