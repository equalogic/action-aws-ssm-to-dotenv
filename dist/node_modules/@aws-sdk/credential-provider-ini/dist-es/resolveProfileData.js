import { CredentialsProviderError } from '../../../@smithy/property-provider/dist-es/CredentialsProviderError.js';
import { isAssumeRoleProfile, resolveAssumeRoleCredentials } from './resolveAssumeRoleCredentials.js';
import { isProcessProfile, resolveProcessCredentials } from './resolveProcessCredentials.js';
import { isSsoProfile, resolveSsoCredentials } from './resolveSsoCredentials.js';
import { isStaticCredsProfile, resolveStaticCredentials } from './resolveStaticCredentials.js';
import { isWebIdentityProfile, resolveWebIdentityCredentials } from './resolveWebIdentityCredentials.js';

const resolveProfileData = async (profileName, profiles, options, visitedProfiles = {}, isAssumeRoleRecursiveCall = false) => {
    const data = profiles[profileName];
    if (Object.keys(visitedProfiles).length > 0 && isStaticCredsProfile(data)) {
        return resolveStaticCredentials(data, options);
    }
    if (isAssumeRoleRecursiveCall || isAssumeRoleProfile(data, { profile: profileName, logger: options.logger })) {
        return resolveAssumeRoleCredentials(profileName, profiles, options, visitedProfiles);
    }
    if (isStaticCredsProfile(data)) {
        return resolveStaticCredentials(data, options);
    }
    if (isWebIdentityProfile(data)) {
        return resolveWebIdentityCredentials(data, options);
    }
    if (isProcessProfile(data)) {
        return resolveProcessCredentials(options, profileName);
    }
    if (isSsoProfile(data)) {
        return await resolveSsoCredentials(profileName, data, options);
    }
    throw new CredentialsProviderError(`Could not resolve credentials using profile: [${profileName}] in configuration/credentials file(s).`, { logger: options.logger });
};

export { resolveProfileData };
//# sourceMappingURL=resolveProfileData.js.map
