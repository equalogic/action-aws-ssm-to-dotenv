{"version":3,"file":"StandardRetryStrategy.js","sources":["../../../../../node_modules/@smithy/util-retry/dist-es/StandardRetryStrategy.js"],"sourcesContent":["import { DEFAULT_MAX_ATTEMPTS, RETRY_MODES } from \"./config\";\nimport { DEFAULT_RETRY_DELAY_BASE, INITIAL_RETRY_TOKENS, NO_RETRY_INCREMENT, RETRY_COST, THROTTLING_RETRY_DELAY_BASE, TIMEOUT_RETRY_COST, } from \"./constants\";\nimport { getDefaultRetryBackoffStrategy } from \"./defaultRetryBackoffStrategy\";\nimport { createDefaultRetryToken } from \"./defaultRetryToken\";\nexport class StandardRetryStrategy {\n    constructor(maxAttempts) {\n        this.maxAttempts = maxAttempts;\n        this.mode = RETRY_MODES.STANDARD;\n        this.capacity = INITIAL_RETRY_TOKENS;\n        this.retryBackoffStrategy = getDefaultRetryBackoffStrategy();\n        this.maxAttemptsProvider = typeof maxAttempts === \"function\" ? maxAttempts : async () => maxAttempts;\n    }\n    async acquireInitialRetryToken(retryTokenScope) {\n        return createDefaultRetryToken({\n            retryDelay: DEFAULT_RETRY_DELAY_BASE,\n            retryCount: 0,\n        });\n    }\n    async refreshRetryTokenForRetry(token, errorInfo) {\n        const maxAttempts = await this.getMaxAttempts();\n        if (this.shouldRetry(token, errorInfo, maxAttempts)) {\n            const errorType = errorInfo.errorType;\n            this.retryBackoffStrategy.setDelayBase(errorType === \"THROTTLING\" ? THROTTLING_RETRY_DELAY_BASE : DEFAULT_RETRY_DELAY_BASE);\n            const delayFromErrorType = this.retryBackoffStrategy.computeNextBackoffDelay(token.getRetryCount());\n            const retryDelay = errorInfo.retryAfterHint\n                ? Math.max(errorInfo.retryAfterHint.getTime() - Date.now() || 0, delayFromErrorType)\n                : delayFromErrorType;\n            const capacityCost = this.getCapacityCost(errorType);\n            this.capacity -= capacityCost;\n            return createDefaultRetryToken({\n                retryDelay,\n                retryCount: token.getRetryCount() + 1,\n                retryCost: capacityCost,\n            });\n        }\n        throw new Error(\"No retry token available\");\n    }\n    recordSuccess(token) {\n        this.capacity = Math.max(INITIAL_RETRY_TOKENS, this.capacity + (token.getRetryCost() ?? NO_RETRY_INCREMENT));\n    }\n    getCapacity() {\n        return this.capacity;\n    }\n    async getMaxAttempts() {\n        try {\n            return await this.maxAttemptsProvider();\n        }\n        catch (error) {\n            console.warn(`Max attempts provider could not resolve. Using default of ${DEFAULT_MAX_ATTEMPTS}`);\n            return DEFAULT_MAX_ATTEMPTS;\n        }\n    }\n    shouldRetry(tokenToRenew, errorInfo, maxAttempts) {\n        const attempts = tokenToRenew.getRetryCount() + 1;\n        return (attempts < maxAttempts &&\n            this.capacity >= this.getCapacityCost(errorInfo.errorType) &&\n            this.isRetryableError(errorInfo.errorType));\n    }\n    getCapacityCost(errorType) {\n        return errorType === \"TRANSIENT\" ? TIMEOUT_RETRY_COST : RETRY_COST;\n    }\n    isRetryableError(errorType) {\n        return errorType === \"THROTTLING\" || errorType === \"TRANSIENT\";\n    }\n}\n"],"names":[],"mappings":"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","x_google_ignoreList":[0]}