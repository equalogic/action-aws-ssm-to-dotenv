{"version":3,"file":"deserializerMiddleware.js","sources":["../../../../../node_modules/@smithy/middleware-serde/dist-es/deserializerMiddleware.js"],"sourcesContent":["import { HttpResponse } from \"@smithy/protocol-http\";\nexport const deserializerMiddleware = (options, deserializer) => (next, context) => async (args) => {\n    const { response } = await next(args);\n    try {\n        const parsed = await deserializer(response, options);\n        return {\n            response,\n            output: parsed,\n        };\n    }\n    catch (error) {\n        Object.defineProperty(error, \"$response\", {\n            value: response,\n        });\n        if (!(\"$metadata\" in error)) {\n            const hint = `Deserialization error: to see the raw response, inspect the hidden field {error}.$response on this object.`;\n            try {\n                error.message += \"\\n  \" + hint;\n            }\n            catch (e) {\n                if (!context.logger || context.logger?.constructor?.name === \"NoOpLogger\") {\n                    console.warn(hint);\n                }\n                else {\n                    context.logger?.warn?.(hint);\n                }\n            }\n            if (typeof error.$responseBodyText !== \"undefined\") {\n                if (error.$response) {\n                    error.$response.body = error.$responseBodyText;\n                }\n            }\n            try {\n                if (HttpResponse.isInstance(response)) {\n                    const { headers = {} } = response;\n                    const headerEntries = Object.entries(headers);\n                    error.$metadata = {\n                        httpStatusCode: response.statusCode,\n                        requestId: findHeader(/^x-[\\w-]+-request-?id$/, headerEntries),\n                        extendedRequestId: findHeader(/^x-[\\w-]+-id-2$/, headerEntries),\n                        cfId: findHeader(/^x-[\\w-]+-cf-id$/, headerEntries),\n                    };\n                }\n            }\n            catch (e) {\n            }\n        }\n        throw error;\n    }\n};\nconst findHeader = (pattern, headers) => {\n    return (headers.find(([k]) => {\n        return k.match(pattern);\n    }) || [void 0, void 1])[1];\n};\n"],"names":[],"mappings":";;;;;;;;;AACY,MAAC,sBAAsB,GAAG,CAAC,OAAO,EAAE,YAAY,KAAK,CAAC,IAAI,EAAE,OAAO,KAAK,OAAO,IAAI,KAAK;AACpG,IAAI,MAAM,EAAE,QAAQ,EAAE,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC;AACzC,IAAI,IAAI;AACR,QAAQ,MAAM,MAAM,GAAG,MAAM,YAAY,CAAC,QAAQ,EAAE,OAAO,CAAC;AAC5D,QAAQ,OAAO;AACf,YAAY,QAAQ;AACpB,YAAY,MAAM,EAAE,MAAM;AAC1B,SAAS;AACT,IAAI;AACJ,IAAI,OAAO,KAAK,EAAE;AAClB,QAAQ,MAAM,CAAC,cAAc,CAAC,KAAK,EAAE,WAAW,EAAE;AAClD,YAAY,KAAK,EAAE,QAAQ;AAC3B,SAAS,CAAC;AACV,QAAQ,IAAI,EAAE,WAAW,IAAI,KAAK,CAAC,EAAE;AACrC,YAAY,MAAM,IAAI,GAAG,CAAC,0GAA0G,CAAC;AACrI,YAAY,IAAI;AAChB,gBAAgB,KAAK,CAAC,OAAO,IAAI,MAAM,GAAG,IAAI;AAC9C,YAAY;AACZ,YAAY,OAAO,CAAC,EAAE;AACtB,gBAAgB,IAAI,CAAC,OAAO,CAAC,MAAM,IAAI,OAAO,CAAC,MAAM,EAAE,WAAW,EAAE,IAAI,KAAK,YAAY,EAAE;AAC3F,oBAAoB,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC;AACtC,gBAAgB;AAChB,qBAAqB;AACrB,oBAAoB,OAAO,CAAC,MAAM,EAAE,IAAI,GAAG,IAAI,CAAC;AAChD,gBAAgB;AAChB,YAAY;AACZ,YAAY,IAAI,OAAO,KAAK,CAAC,iBAAiB,KAAK,WAAW,EAAE;AAChE,gBAAgB,IAAI,KAAK,CAAC,SAAS,EAAE;AACrC,oBAAoB,KAAK,CAAC,SAAS,CAAC,IAAI,GAAG,KAAK,CAAC,iBAAiB;AAClE,gBAAgB;AAChB,YAAY;AACZ,YAAY,IAAI;AAChB,gBAAgB,IAAI,YAAY,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAE;AACvD,oBAAoB,MAAM,EAAE,OAAO,GAAG,EAAE,EAAE,GAAG,QAAQ;AACrD,oBAAoB,MAAM,aAAa,GAAG,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC;AACjE,oBAAoB,KAAK,CAAC,SAAS,GAAG;AACtC,wBAAwB,cAAc,EAAE,QAAQ,CAAC,UAAU;AAC3D,wBAAwB,SAAS,EAAE,UAAU,CAAC,wBAAwB,EAAE,aAAa,CAAC;AACtF,wBAAwB,iBAAiB,EAAE,UAAU,CAAC,iBAAiB,EAAE,aAAa,CAAC;AACvF,wBAAwB,IAAI,EAAE,UAAU,CAAC,kBAAkB,EAAE,aAAa,CAAC;AAC3E,qBAAqB;AACrB,gBAAgB;AAChB,YAAY;AACZ,YAAY,OAAO,CAAC,EAAE;AACtB,YAAY;AACZ,QAAQ;AACR,QAAQ,MAAM,KAAK;AACnB,IAAI;AACJ;AACA,MAAM,UAAU,GAAG,CAAC,OAAO,EAAE,OAAO,KAAK;AACzC,IAAI,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK;AAClC,QAAQ,OAAO,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC;AAC/B,IAAI,CAAC,CAAC,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,EAAE,CAAC,CAAC;AAC9B,CAAC;;;;","x_google_ignoreList":[0]}