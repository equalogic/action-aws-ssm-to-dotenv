import '../../../types/dist-es/auth/auth.js';
import '../../../types/dist-es/auth/HttpApiKeyAuth.js';
import '../../../types/dist-es/endpoint.js';
import '../../../types/dist-es/extensions/checksum.js';
import '../../../types/dist-es/http.js';
import '../../../types/dist-es/profile.js';
import '../../../types/dist-es/transfer.js';
import { HttpRequest } from '../../../protocol-http/dist-es/httpRequest.js';
import { getSmithyContext } from '../../../util-middleware/dist-es/getSmithyContext.js';

const defaultErrorHandler = (signingProperties) => (error) => {
    throw error;
};
const defaultSuccessHandler = (httpResponse, signingProperties) => { };
const httpSigningMiddleware = (config) => (next, context) => async (args) => {
    if (!HttpRequest.isInstance(args.request)) {
        return next(args);
    }
    const smithyContext = getSmithyContext(context);
    const scheme = smithyContext.selectedHttpAuthScheme;
    if (!scheme) {
        throw new Error(`No HttpAuthScheme was selected: unable to sign request`);
    }
    const { httpAuthOption: { signingProperties = {} }, identity, signer, } = scheme;
    const output = await next({
        ...args,
        request: await signer.sign(args.request, identity, signingProperties),
    }).catch((signer.errorHandler || defaultErrorHandler)(signingProperties));
    (signer.successHandler || defaultSuccessHandler)(output.response, signingProperties);
    return output;
};

export { httpSigningMiddleware };
//# sourceMappingURL=httpSigningMiddleware.js.map
