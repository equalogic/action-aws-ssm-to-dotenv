import '../../../types/dist-es/auth/auth.js';
import '../../../types/dist-es/auth/HttpApiKeyAuth.js';
import '../../../types/dist-es/endpoint.js';
import { AlgorithmId } from '../../../types/dist-es/extensions/checksum.js';
import '../../../types/dist-es/http.js';
import '../../../types/dist-es/profile.js';
import '../../../types/dist-es/transfer.js';

const getChecksumConfiguration = (runtimeConfig) => {
    const checksumAlgorithms = [];
    for (const id in AlgorithmId) {
        const algorithmId = AlgorithmId[id];
        if (runtimeConfig[algorithmId] === undefined) {
            continue;
        }
        checksumAlgorithms.push({
            algorithmId: () => algorithmId,
            checksumConstructor: () => runtimeConfig[algorithmId],
        });
    }
    return {
        addChecksumAlgorithm(algo) {
            checksumAlgorithms.push(algo);
        },
        checksumAlgorithms() {
            return checksumAlgorithms;
        },
    };
};
const resolveChecksumRuntimeConfig = (clientConfig) => {
    const runtimeConfig = {};
    clientConfig.checksumAlgorithms().forEach((checksumAlgorithm) => {
        runtimeConfig[checksumAlgorithm.algorithmId()] = checksumAlgorithm.checksumConstructor();
    });
    return runtimeConfig;
};

export { AlgorithmId, getChecksumConfiguration, resolveChecksumRuntimeConfig };
//# sourceMappingURL=checksum.js.map
