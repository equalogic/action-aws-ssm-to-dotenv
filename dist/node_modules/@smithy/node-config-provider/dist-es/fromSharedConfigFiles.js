import { CredentialsProviderError } from '../../property-provider/dist-es/CredentialsProviderError.js';
import 'os';
import 'path';
import { getProfileName } from '../../shared-ini-file-loader/dist-es/getProfileName.js';
import 'crypto';
import '../../shared-ini-file-loader/dist-es/getSSOTokenFromFile.js';
import { loadSharedConfigFiles } from '../../shared-ini-file-loader/dist-es/loadSharedConfigFiles.js';
import '../../types/dist-es/auth/auth.js';
import '../../types/dist-es/auth/HttpApiKeyAuth.js';
import '../../types/dist-es/endpoint.js';
import '../../types/dist-es/extensions/checksum.js';
import '../../types/dist-es/http.js';
import '../../types/dist-es/profile.js';
import '../../types/dist-es/transfer.js';
import '../../shared-ini-file-loader/dist-es/slurpFile.js';
import { getSelectorName } from './getSelectorName.js';

const fromSharedConfigFiles = (configSelector, { preferredFile = "config", ...init } = {}) => async () => {
    const profile = getProfileName(init);
    const { configFile, credentialsFile } = await loadSharedConfigFiles(init);
    const profileFromCredentials = credentialsFile[profile] || {};
    const profileFromConfig = configFile[profile] || {};
    const mergedProfile = preferredFile === "config"
        ? { ...profileFromCredentials, ...profileFromConfig }
        : { ...profileFromConfig, ...profileFromCredentials };
    try {
        const cfgFile = preferredFile === "config" ? configFile : credentialsFile;
        const configValue = configSelector(mergedProfile, cfgFile);
        if (configValue === undefined) {
            throw new Error();
        }
        return configValue;
    }
    catch (e) {
        throw new CredentialsProviderError(e.message || `Not found in config files w/ profile [${profile}]: ${getSelectorName(configSelector.toString())}`, { logger: init.logger });
    }
};

export { fromSharedConfigFiles };
//# sourceMappingURL=fromSharedConfigFiles.js.map
