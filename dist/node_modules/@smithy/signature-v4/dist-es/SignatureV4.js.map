{"version":3,"file":"SignatureV4.js","sources":["../../../../../node_modules/@smithy/signature-v4/dist-es/SignatureV4.js"],"sourcesContent":["import { toHex } from \"@smithy/util-hex-encoding\";\nimport { toUint8Array } from \"@smithy/util-utf8\";\nimport { ALGORITHM_IDENTIFIER, ALGORITHM_QUERY_PARAM, AMZ_DATE_HEADER, AMZ_DATE_QUERY_PARAM, AUTH_HEADER, CREDENTIAL_QUERY_PARAM, EVENT_ALGORITHM_IDENTIFIER, EXPIRES_QUERY_PARAM, MAX_PRESIGNED_TTL, SHA256_HEADER, SIGNATURE_QUERY_PARAM, SIGNED_HEADERS_QUERY_PARAM, TOKEN_HEADER, TOKEN_QUERY_PARAM, } from \"./constants\";\nimport { createScope, getSigningKey } from \"./credentialDerivation\";\nimport { getCanonicalHeaders } from \"./getCanonicalHeaders\";\nimport { getPayloadHash } from \"./getPayloadHash\";\nimport { HeaderFormatter } from \"./HeaderFormatter\";\nimport { hasHeader } from \"./headerUtil\";\nimport { moveHeadersToQuery } from \"./moveHeadersToQuery\";\nimport { prepareRequest } from \"./prepareRequest\";\nimport { SignatureV4Base } from \"./SignatureV4Base\";\nexport class SignatureV4 extends SignatureV4Base {\n    constructor({ applyChecksum, credentials, region, service, sha256, uriEscapePath = true, }) {\n        super({\n            applyChecksum,\n            credentials,\n            region,\n            service,\n            sha256,\n            uriEscapePath,\n        });\n        this.headerFormatter = new HeaderFormatter();\n    }\n    async presign(originalRequest, options = {}) {\n        const { signingDate = new Date(), expiresIn = 3600, unsignableHeaders, unhoistableHeaders, signableHeaders, hoistableHeaders, signingRegion, signingService, } = options;\n        const credentials = await this.credentialProvider();\n        this.validateResolvedCredentials(credentials);\n        const region = signingRegion ?? (await this.regionProvider());\n        const { longDate, shortDate } = this.formatDate(signingDate);\n        if (expiresIn > MAX_PRESIGNED_TTL) {\n            return Promise.reject(\"Signature version 4 presigned URLs\" + \" must have an expiration date less than one week in\" + \" the future\");\n        }\n        const scope = createScope(shortDate, region, signingService ?? this.service);\n        const request = moveHeadersToQuery(prepareRequest(originalRequest), { unhoistableHeaders, hoistableHeaders });\n        if (credentials.sessionToken) {\n            request.query[TOKEN_QUERY_PARAM] = credentials.sessionToken;\n        }\n        request.query[ALGORITHM_QUERY_PARAM] = ALGORITHM_IDENTIFIER;\n        request.query[CREDENTIAL_QUERY_PARAM] = `${credentials.accessKeyId}/${scope}`;\n        request.query[AMZ_DATE_QUERY_PARAM] = longDate;\n        request.query[EXPIRES_QUERY_PARAM] = expiresIn.toString(10);\n        const canonicalHeaders = getCanonicalHeaders(request, unsignableHeaders, signableHeaders);\n        request.query[SIGNED_HEADERS_QUERY_PARAM] = this.getCanonicalHeaderList(canonicalHeaders);\n        request.query[SIGNATURE_QUERY_PARAM] = await this.getSignature(longDate, scope, this.getSigningKey(credentials, region, shortDate, signingService), this.createCanonicalRequest(request, canonicalHeaders, await getPayloadHash(originalRequest, this.sha256)));\n        return request;\n    }\n    async sign(toSign, options) {\n        if (typeof toSign === \"string\") {\n            return this.signString(toSign, options);\n        }\n        else if (toSign.headers && toSign.payload) {\n            return this.signEvent(toSign, options);\n        }\n        else if (toSign.message) {\n            return this.signMessage(toSign, options);\n        }\n        else {\n            return this.signRequest(toSign, options);\n        }\n    }\n    async signEvent({ headers, payload }, { signingDate = new Date(), priorSignature, signingRegion, signingService }) {\n        const region = signingRegion ?? (await this.regionProvider());\n        const { shortDate, longDate } = this.formatDate(signingDate);\n        const scope = createScope(shortDate, region, signingService ?? this.service);\n        const hashedPayload = await getPayloadHash({ headers: {}, body: payload }, this.sha256);\n        const hash = new this.sha256();\n        hash.update(headers);\n        const hashedHeaders = toHex(await hash.digest());\n        const stringToSign = [\n            EVENT_ALGORITHM_IDENTIFIER,\n            longDate,\n            scope,\n            priorSignature,\n            hashedHeaders,\n            hashedPayload,\n        ].join(\"\\n\");\n        return this.signString(stringToSign, { signingDate, signingRegion: region, signingService });\n    }\n    async signMessage(signableMessage, { signingDate = new Date(), signingRegion, signingService }) {\n        const promise = this.signEvent({\n            headers: this.headerFormatter.format(signableMessage.message.headers),\n            payload: signableMessage.message.body,\n        }, {\n            signingDate,\n            signingRegion,\n            signingService,\n            priorSignature: signableMessage.priorSignature,\n        });\n        return promise.then((signature) => {\n            return { message: signableMessage.message, signature };\n        });\n    }\n    async signString(stringToSign, { signingDate = new Date(), signingRegion, signingService } = {}) {\n        const credentials = await this.credentialProvider();\n        this.validateResolvedCredentials(credentials);\n        const region = signingRegion ?? (await this.regionProvider());\n        const { shortDate } = this.formatDate(signingDate);\n        const hash = new this.sha256(await this.getSigningKey(credentials, region, shortDate, signingService));\n        hash.update(toUint8Array(stringToSign));\n        return toHex(await hash.digest());\n    }\n    async signRequest(requestToSign, { signingDate = new Date(), signableHeaders, unsignableHeaders, signingRegion, signingService, } = {}) {\n        const credentials = await this.credentialProvider();\n        this.validateResolvedCredentials(credentials);\n        const region = signingRegion ?? (await this.regionProvider());\n        const request = prepareRequest(requestToSign);\n        const { longDate, shortDate } = this.formatDate(signingDate);\n        const scope = createScope(shortDate, region, signingService ?? this.service);\n        request.headers[AMZ_DATE_HEADER] = longDate;\n        if (credentials.sessionToken) {\n            request.headers[TOKEN_HEADER] = credentials.sessionToken;\n        }\n        const payloadHash = await getPayloadHash(request, this.sha256);\n        if (!hasHeader(SHA256_HEADER, request.headers) && this.applyChecksum) {\n            request.headers[SHA256_HEADER] = payloadHash;\n        }\n        const canonicalHeaders = getCanonicalHeaders(request, unsignableHeaders, signableHeaders);\n        const signature = await this.getSignature(longDate, scope, this.getSigningKey(credentials, region, shortDate, signingService), this.createCanonicalRequest(request, canonicalHeaders, payloadHash));\n        request.headers[AUTH_HEADER] =\n            `${ALGORITHM_IDENTIFIER} ` +\n                `Credential=${credentials.accessKeyId}/${scope}, ` +\n                `SignedHeaders=${this.getCanonicalHeaderList(canonicalHeaders)}, ` +\n                `Signature=${signature}`;\n        return request;\n    }\n    async getSignature(longDate, credentialScope, keyPromise, canonicalRequest) {\n        const stringToSign = await this.createStringToSign(longDate, credentialScope, canonicalRequest, ALGORITHM_IDENTIFIER);\n        const hash = new this.sha256(await keyPromise);\n        hash.update(toUint8Array(stringToSign));\n        return toHex(await hash.digest());\n    }\n    getSigningKey(credentials, region, shortDate, service) {\n        return getSigningKey(this.sha256, credentials, shortDate, region, service || this.service);\n    }\n}\n"],"names":[],"mappings":"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","x_google_ignoreList":[0]}