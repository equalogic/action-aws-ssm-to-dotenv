{"version":3,"file":"configurations.js","sources":["../../../../../node_modules/@smithy/middleware-retry/dist-es/configurations.js"],"sourcesContent":["import { normalizeProvider } from \"@smithy/util-middleware\";\nimport { AdaptiveRetryStrategy, DEFAULT_MAX_ATTEMPTS, DEFAULT_RETRY_MODE, RETRY_MODES, StandardRetryStrategy, } from \"@smithy/util-retry\";\nexport const ENV_MAX_ATTEMPTS = \"AWS_MAX_ATTEMPTS\";\nexport const CONFIG_MAX_ATTEMPTS = \"max_attempts\";\nexport const NODE_MAX_ATTEMPT_CONFIG_OPTIONS = {\n    environmentVariableSelector: (env) => {\n        const value = env[ENV_MAX_ATTEMPTS];\n        if (!value)\n            return undefined;\n        const maxAttempt = parseInt(value);\n        if (Number.isNaN(maxAttempt)) {\n            throw new Error(`Environment variable ${ENV_MAX_ATTEMPTS} mast be a number, got \"${value}\"`);\n        }\n        return maxAttempt;\n    },\n    configFileSelector: (profile) => {\n        const value = profile[CONFIG_MAX_ATTEMPTS];\n        if (!value)\n            return undefined;\n        const maxAttempt = parseInt(value);\n        if (Number.isNaN(maxAttempt)) {\n            throw new Error(`Shared config file entry ${CONFIG_MAX_ATTEMPTS} mast be a number, got \"${value}\"`);\n        }\n        return maxAttempt;\n    },\n    default: DEFAULT_MAX_ATTEMPTS,\n};\nexport const resolveRetryConfig = (input) => {\n    const { retryStrategy, retryMode: _retryMode, maxAttempts: _maxAttempts } = input;\n    const maxAttempts = normalizeProvider(_maxAttempts ?? DEFAULT_MAX_ATTEMPTS);\n    return Object.assign(input, {\n        maxAttempts,\n        retryStrategy: async () => {\n            if (retryStrategy) {\n                return retryStrategy;\n            }\n            const retryMode = await normalizeProvider(_retryMode)();\n            if (retryMode === RETRY_MODES.ADAPTIVE) {\n                return new AdaptiveRetryStrategy(maxAttempts);\n            }\n            return new StandardRetryStrategy(maxAttempts);\n        },\n    });\n};\nexport const ENV_RETRY_MODE = \"AWS_RETRY_MODE\";\nexport const CONFIG_RETRY_MODE = \"retry_mode\";\nexport const NODE_RETRY_MODE_CONFIG_OPTIONS = {\n    environmentVariableSelector: (env) => env[ENV_RETRY_MODE],\n    configFileSelector: (profile) => profile[CONFIG_RETRY_MODE],\n    default: DEFAULT_RETRY_MODE,\n};\n"],"names":[],"mappings":";;;;;;;;;;;;;AAEY,MAAC,gBAAgB,GAAG;AACpB,MAAC,mBAAmB,GAAG;AACvB,MAAC,+BAA+B,GAAG;AAC/C,IAAI,2BAA2B,EAAE,CAAC,GAAG,KAAK;AAC1C,QAAQ,MAAM,KAAK,GAAG,GAAG,CAAC,gBAAgB,CAAC;AAC3C,QAAQ,IAAI,CAAC,KAAK;AAClB,YAAY,OAAO,SAAS;AAC5B,QAAQ,MAAM,UAAU,GAAG,QAAQ,CAAC,KAAK,CAAC;AAC1C,QAAQ,IAAI,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,EAAE;AACtC,YAAY,MAAM,IAAI,KAAK,CAAC,CAAC,qBAAqB,EAAE,gBAAgB,CAAC,wBAAwB,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC;AACxG,QAAQ;AACR,QAAQ,OAAO,UAAU;AACzB,IAAI,CAAC;AACL,IAAI,kBAAkB,EAAE,CAAC,OAAO,KAAK;AACrC,QAAQ,MAAM,KAAK,GAAG,OAAO,CAAC,mBAAmB,CAAC;AAClD,QAAQ,IAAI,CAAC,KAAK;AAClB,YAAY,OAAO,SAAS;AAC5B,QAAQ,MAAM,UAAU,GAAG,QAAQ,CAAC,KAAK,CAAC;AAC1C,QAAQ,IAAI,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,EAAE;AACtC,YAAY,MAAM,IAAI,KAAK,CAAC,CAAC,yBAAyB,EAAE,mBAAmB,CAAC,wBAAwB,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC;AAC/G,QAAQ;AACR,QAAQ,OAAO,UAAU;AACzB,IAAI,CAAC;AACL,IAAI,OAAO,EAAE,oBAAoB;AACjC;AACY,MAAC,kBAAkB,GAAG,CAAC,KAAK,KAAK;AAC7C,IAAI,MAAM,EAAE,aAAa,EAAE,SAAS,EAAE,UAAU,EAAE,WAAW,EAAE,YAAY,EAAE,GAAG,KAAK;AACrF,IAAI,MAAM,WAAW,GAAG,iBAAiB,CAAC,YAAY,IAAI,oBAAoB,CAAC;AAC/E,IAAI,OAAO,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE;AAChC,QAAQ,WAAW;AACnB,QAAQ,aAAa,EAAE,YAAY;AACnC,YAAY,IAAI,aAAa,EAAE;AAC/B,gBAAgB,OAAO,aAAa;AACpC,YAAY;AACZ,YAAY,MAAM,SAAS,GAAG,MAAM,iBAAiB,CAAC,UAAU,CAAC,EAAE;AACnE,YAAY,IAAI,SAAS,KAAK,WAAW,CAAC,QAAQ,EAAE;AACpD,gBAAgB,OAAO,IAAI,qBAAqB,CAAC,WAAW,CAAC;AAC7D,YAAY;AACZ,YAAY,OAAO,IAAI,qBAAqB,CAAC,WAAW,CAAC;AACzD,QAAQ,CAAC;AACT,KAAK,CAAC;AACN;AACY,MAAC,cAAc,GAAG;AAClB,MAAC,iBAAiB,GAAG;AACrB,MAAC,8BAA8B,GAAG;AAC9C,IAAI,2BAA2B,EAAE,CAAC,GAAG,KAAK,GAAG,CAAC,cAAc,CAAC;AAC7D,IAAI,kBAAkB,EAAE,CAAC,OAAO,KAAK,OAAO,CAAC,iBAAiB,CAAC;AAC/D,IAAI,OAAO,EAAE,kBAAkB;AAC/B;;;;","x_google_ignoreList":[0]}