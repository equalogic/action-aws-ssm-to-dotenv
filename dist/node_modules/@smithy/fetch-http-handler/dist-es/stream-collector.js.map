{"version":3,"file":"stream-collector.js","sources":["../../../../../node_modules/@smithy/fetch-http-handler/dist-es/stream-collector.js"],"sourcesContent":["import { fromBase64 } from \"@smithy/util-base64\";\nexport const streamCollector = async (stream) => {\n    if ((typeof Blob === \"function\" && stream instanceof Blob) || stream.constructor?.name === \"Blob\") {\n        if (Blob.prototype.arrayBuffer !== undefined) {\n            return new Uint8Array(await stream.arrayBuffer());\n        }\n        return collectBlob(stream);\n    }\n    return collectStream(stream);\n};\nasync function collectBlob(blob) {\n    const base64 = await readToBase64(blob);\n    const arrayBuffer = fromBase64(base64);\n    return new Uint8Array(arrayBuffer);\n}\nasync function collectStream(stream) {\n    const chunks = [];\n    const reader = stream.getReader();\n    let isDone = false;\n    let length = 0;\n    while (!isDone) {\n        const { done, value } = await reader.read();\n        if (value) {\n            chunks.push(value);\n            length += value.length;\n        }\n        isDone = done;\n    }\n    const collected = new Uint8Array(length);\n    let offset = 0;\n    for (const chunk of chunks) {\n        collected.set(chunk, offset);\n        offset += chunk.length;\n    }\n    return collected;\n}\nfunction readToBase64(blob) {\n    return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onloadend = () => {\n            if (reader.readyState !== 2) {\n                return reject(new Error(\"Reader aborted too early\"));\n            }\n            const result = (reader.result ?? \"\");\n            const commaIndex = result.indexOf(\",\");\n            const dataOffset = commaIndex > -1 ? commaIndex + 1 : result.length;\n            resolve(result.substring(dataOffset));\n        };\n        reader.onabort = () => reject(new Error(\"Read aborted\"));\n        reader.onerror = () => reject(reader.error);\n        reader.readAsDataURL(blob);\n    });\n}\n"],"names":[],"mappings":";;;AACY,MAAC,eAAe,GAAG,OAAO,MAAM,KAAK;AACjD,IAAI,IAAI,CAAC,OAAO,IAAI,KAAK,UAAU,IAAI,MAAM,YAAY,IAAI,KAAK,MAAM,CAAC,WAAW,EAAE,IAAI,KAAK,MAAM,EAAE;AACvG,QAAQ,IAAI,IAAI,CAAC,SAAS,CAAC,WAAW,KAAK,SAAS,EAAE;AACtD,YAAY,OAAO,IAAI,UAAU,CAAC,MAAM,MAAM,CAAC,WAAW,EAAE,CAAC;AAC7D,QAAQ;AACR,QAAQ,OAAO,WAAW,CAAC,MAAM,CAAC;AAClC,IAAI;AACJ,IAAI,OAAO,aAAa,CAAC,MAAM,CAAC;AAChC;AACA,eAAe,WAAW,CAAC,IAAI,EAAE;AACjC,IAAI,MAAM,MAAM,GAAG,MAAM,YAAY,CAAC,IAAI,CAAC;AAC3C,IAAI,MAAM,WAAW,GAAG,UAAU,CAAC,MAAM,CAAC;AAC1C,IAAI,OAAO,IAAI,UAAU,CAAC,WAAW,CAAC;AACtC;AACA,eAAe,aAAa,CAAC,MAAM,EAAE;AACrC,IAAI,MAAM,MAAM,GAAG,EAAE;AACrB,IAAI,MAAM,MAAM,GAAG,MAAM,CAAC,SAAS,EAAE;AACrC,IAAI,IAAI,MAAM,GAAG,KAAK;AACtB,IAAI,IAAI,MAAM,GAAG,CAAC;AAClB,IAAI,OAAO,CAAC,MAAM,EAAE;AACpB,QAAQ,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,MAAM,CAAC,IAAI,EAAE;AACnD,QAAQ,IAAI,KAAK,EAAE;AACnB,YAAY,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;AAC9B,YAAY,MAAM,IAAI,KAAK,CAAC,MAAM;AAClC,QAAQ;AACR,QAAQ,MAAM,GAAG,IAAI;AACrB,IAAI;AACJ,IAAI,MAAM,SAAS,GAAG,IAAI,UAAU,CAAC,MAAM,CAAC;AAC5C,IAAI,IAAI,MAAM,GAAG,CAAC;AAClB,IAAI,KAAK,MAAM,KAAK,IAAI,MAAM,EAAE;AAChC,QAAQ,SAAS,CAAC,GAAG,CAAC,KAAK,EAAE,MAAM,CAAC;AACpC,QAAQ,MAAM,IAAI,KAAK,CAAC,MAAM;AAC9B,IAAI;AACJ,IAAI,OAAO,SAAS;AACpB;AACA,SAAS,YAAY,CAAC,IAAI,EAAE;AAC5B,IAAI,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,KAAK;AAC5C,QAAQ,MAAM,MAAM,GAAG,IAAI,UAAU,EAAE;AACvC,QAAQ,MAAM,CAAC,SAAS,GAAG,MAAM;AACjC,YAAY,IAAI,MAAM,CAAC,UAAU,KAAK,CAAC,EAAE;AACzC,gBAAgB,OAAO,MAAM,CAAC,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;AACpE,YAAY;AACZ,YAAY,MAAM,MAAM,IAAI,MAAM,CAAC,MAAM,IAAI,EAAE,CAAC;AAChD,YAAY,MAAM,UAAU,GAAG,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC;AAClD,YAAY,MAAM,UAAU,GAAG,UAAU,GAAG,EAAE,GAAG,UAAU,GAAG,CAAC,GAAG,MAAM,CAAC,MAAM;AAC/E,YAAY,OAAO,CAAC,MAAM,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;AACjD,QAAQ,CAAC;AACT,QAAQ,MAAM,CAAC,OAAO,GAAG,MAAM,MAAM,CAAC,IAAI,KAAK,CAAC,cAAc,CAAC,CAAC;AAChE,QAAQ,MAAM,CAAC,OAAO,GAAG,MAAM,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC;AACnD,QAAQ,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC;AAClC,IAAI,CAAC,CAAC;AACN;;;;","x_google_ignoreList":[0]}