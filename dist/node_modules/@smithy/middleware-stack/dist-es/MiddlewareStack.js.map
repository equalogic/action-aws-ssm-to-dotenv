{"version":3,"file":"MiddlewareStack.js","sources":["../../../../../node_modules/@smithy/middleware-stack/dist-es/MiddlewareStack.js"],"sourcesContent":["const getAllAliases = (name, aliases) => {\n    const _aliases = [];\n    if (name) {\n        _aliases.push(name);\n    }\n    if (aliases) {\n        for (const alias of aliases) {\n            _aliases.push(alias);\n        }\n    }\n    return _aliases;\n};\nconst getMiddlewareNameWithAliases = (name, aliases) => {\n    return `${name || \"anonymous\"}${aliases && aliases.length > 0 ? ` (a.k.a. ${aliases.join(\",\")})` : \"\"}`;\n};\nexport const constructStack = () => {\n    let absoluteEntries = [];\n    let relativeEntries = [];\n    let identifyOnResolve = false;\n    const entriesNameSet = new Set();\n    const sort = (entries) => entries.sort((a, b) => stepWeights[b.step] - stepWeights[a.step] ||\n        priorityWeights[b.priority || \"normal\"] - priorityWeights[a.priority || \"normal\"]);\n    const removeByName = (toRemove) => {\n        let isRemoved = false;\n        const filterCb = (entry) => {\n            const aliases = getAllAliases(entry.name, entry.aliases);\n            if (aliases.includes(toRemove)) {\n                isRemoved = true;\n                for (const alias of aliases) {\n                    entriesNameSet.delete(alias);\n                }\n                return false;\n            }\n            return true;\n        };\n        absoluteEntries = absoluteEntries.filter(filterCb);\n        relativeEntries = relativeEntries.filter(filterCb);\n        return isRemoved;\n    };\n    const removeByReference = (toRemove) => {\n        let isRemoved = false;\n        const filterCb = (entry) => {\n            if (entry.middleware === toRemove) {\n                isRemoved = true;\n                for (const alias of getAllAliases(entry.name, entry.aliases)) {\n                    entriesNameSet.delete(alias);\n                }\n                return false;\n            }\n            return true;\n        };\n        absoluteEntries = absoluteEntries.filter(filterCb);\n        relativeEntries = relativeEntries.filter(filterCb);\n        return isRemoved;\n    };\n    const cloneTo = (toStack) => {\n        absoluteEntries.forEach((entry) => {\n            toStack.add(entry.middleware, { ...entry });\n        });\n        relativeEntries.forEach((entry) => {\n            toStack.addRelativeTo(entry.middleware, { ...entry });\n        });\n        toStack.identifyOnResolve?.(stack.identifyOnResolve());\n        return toStack;\n    };\n    const expandRelativeMiddlewareList = (from) => {\n        const expandedMiddlewareList = [];\n        from.before.forEach((entry) => {\n            if (entry.before.length === 0 && entry.after.length === 0) {\n                expandedMiddlewareList.push(entry);\n            }\n            else {\n                expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));\n            }\n        });\n        expandedMiddlewareList.push(from);\n        from.after.reverse().forEach((entry) => {\n            if (entry.before.length === 0 && entry.after.length === 0) {\n                expandedMiddlewareList.push(entry);\n            }\n            else {\n                expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));\n            }\n        });\n        return expandedMiddlewareList;\n    };\n    const getMiddlewareList = (debug = false) => {\n        const normalizedAbsoluteEntries = [];\n        const normalizedRelativeEntries = [];\n        const normalizedEntriesNameMap = {};\n        absoluteEntries.forEach((entry) => {\n            const normalizedEntry = {\n                ...entry,\n                before: [],\n                after: [],\n            };\n            for (const alias of getAllAliases(normalizedEntry.name, normalizedEntry.aliases)) {\n                normalizedEntriesNameMap[alias] = normalizedEntry;\n            }\n            normalizedAbsoluteEntries.push(normalizedEntry);\n        });\n        relativeEntries.forEach((entry) => {\n            const normalizedEntry = {\n                ...entry,\n                before: [],\n                after: [],\n            };\n            for (const alias of getAllAliases(normalizedEntry.name, normalizedEntry.aliases)) {\n                normalizedEntriesNameMap[alias] = normalizedEntry;\n            }\n            normalizedRelativeEntries.push(normalizedEntry);\n        });\n        normalizedRelativeEntries.forEach((entry) => {\n            if (entry.toMiddleware) {\n                const toMiddleware = normalizedEntriesNameMap[entry.toMiddleware];\n                if (toMiddleware === undefined) {\n                    if (debug) {\n                        return;\n                    }\n                    throw new Error(`${entry.toMiddleware} is not found when adding ` +\n                        `${getMiddlewareNameWithAliases(entry.name, entry.aliases)} ` +\n                        `middleware ${entry.relation} ${entry.toMiddleware}`);\n                }\n                if (entry.relation === \"after\") {\n                    toMiddleware.after.push(entry);\n                }\n                if (entry.relation === \"before\") {\n                    toMiddleware.before.push(entry);\n                }\n            }\n        });\n        const mainChain = sort(normalizedAbsoluteEntries)\n            .map(expandRelativeMiddlewareList)\n            .reduce((wholeList, expandedMiddlewareList) => {\n            wholeList.push(...expandedMiddlewareList);\n            return wholeList;\n        }, []);\n        return mainChain;\n    };\n    const stack = {\n        add: (middleware, options = {}) => {\n            const { name, override, aliases: _aliases } = options;\n            const entry = {\n                step: \"initialize\",\n                priority: \"normal\",\n                middleware,\n                ...options,\n            };\n            const aliases = getAllAliases(name, _aliases);\n            if (aliases.length > 0) {\n                if (aliases.some((alias) => entriesNameSet.has(alias))) {\n                    if (!override)\n                        throw new Error(`Duplicate middleware name '${getMiddlewareNameWithAliases(name, _aliases)}'`);\n                    for (const alias of aliases) {\n                        const toOverrideIndex = absoluteEntries.findIndex((entry) => entry.name === alias || entry.aliases?.some((a) => a === alias));\n                        if (toOverrideIndex === -1) {\n                            continue;\n                        }\n                        const toOverride = absoluteEntries[toOverrideIndex];\n                        if (toOverride.step !== entry.step || entry.priority !== toOverride.priority) {\n                            throw new Error(`\"${getMiddlewareNameWithAliases(toOverride.name, toOverride.aliases)}\" middleware with ` +\n                                `${toOverride.priority} priority in ${toOverride.step} step cannot ` +\n                                `be overridden by \"${getMiddlewareNameWithAliases(name, _aliases)}\" middleware with ` +\n                                `${entry.priority} priority in ${entry.step} step.`);\n                        }\n                        absoluteEntries.splice(toOverrideIndex, 1);\n                    }\n                }\n                for (const alias of aliases) {\n                    entriesNameSet.add(alias);\n                }\n            }\n            absoluteEntries.push(entry);\n        },\n        addRelativeTo: (middleware, options) => {\n            const { name, override, aliases: _aliases } = options;\n            const entry = {\n                middleware,\n                ...options,\n            };\n            const aliases = getAllAliases(name, _aliases);\n            if (aliases.length > 0) {\n                if (aliases.some((alias) => entriesNameSet.has(alias))) {\n                    if (!override)\n                        throw new Error(`Duplicate middleware name '${getMiddlewareNameWithAliases(name, _aliases)}'`);\n                    for (const alias of aliases) {\n                        const toOverrideIndex = relativeEntries.findIndex((entry) => entry.name === alias || entry.aliases?.some((a) => a === alias));\n                        if (toOverrideIndex === -1) {\n                            continue;\n                        }\n                        const toOverride = relativeEntries[toOverrideIndex];\n                        if (toOverride.toMiddleware !== entry.toMiddleware || toOverride.relation !== entry.relation) {\n                            throw new Error(`\"${getMiddlewareNameWithAliases(toOverride.name, toOverride.aliases)}\" middleware ` +\n                                `${toOverride.relation} \"${toOverride.toMiddleware}\" middleware cannot be overridden ` +\n                                `by \"${getMiddlewareNameWithAliases(name, _aliases)}\" middleware ${entry.relation} ` +\n                                `\"${entry.toMiddleware}\" middleware.`);\n                        }\n                        relativeEntries.splice(toOverrideIndex, 1);\n                    }\n                }\n                for (const alias of aliases) {\n                    entriesNameSet.add(alias);\n                }\n            }\n            relativeEntries.push(entry);\n        },\n        clone: () => cloneTo(constructStack()),\n        use: (plugin) => {\n            plugin.applyToStack(stack);\n        },\n        remove: (toRemove) => {\n            if (typeof toRemove === \"string\")\n                return removeByName(toRemove);\n            else\n                return removeByReference(toRemove);\n        },\n        removeByTag: (toRemove) => {\n            let isRemoved = false;\n            const filterCb = (entry) => {\n                const { tags, name, aliases: _aliases } = entry;\n                if (tags && tags.includes(toRemove)) {\n                    const aliases = getAllAliases(name, _aliases);\n                    for (const alias of aliases) {\n                        entriesNameSet.delete(alias);\n                    }\n                    isRemoved = true;\n                    return false;\n                }\n                return true;\n            };\n            absoluteEntries = absoluteEntries.filter(filterCb);\n            relativeEntries = relativeEntries.filter(filterCb);\n            return isRemoved;\n        },\n        concat: (from) => {\n            const cloned = cloneTo(constructStack());\n            cloned.use(from);\n            cloned.identifyOnResolve(identifyOnResolve || cloned.identifyOnResolve() || (from.identifyOnResolve?.() ?? false));\n            return cloned;\n        },\n        applyToStack: cloneTo,\n        identify: () => {\n            return getMiddlewareList(true).map((mw) => {\n                const step = mw.step ??\n                    mw.relation +\n                        \" \" +\n                        mw.toMiddleware;\n                return getMiddlewareNameWithAliases(mw.name, mw.aliases) + \" - \" + step;\n            });\n        },\n        identifyOnResolve(toggle) {\n            if (typeof toggle === \"boolean\")\n                identifyOnResolve = toggle;\n            return identifyOnResolve;\n        },\n        resolve: (handler, context) => {\n            for (const middleware of getMiddlewareList()\n                .map((entry) => entry.middleware)\n                .reverse()) {\n                handler = middleware(handler, context);\n            }\n            if (identifyOnResolve) {\n                console.log(stack.identify());\n            }\n            return handler;\n        },\n    };\n    return stack;\n};\nconst stepWeights = {\n    initialize: 5,\n    serialize: 4,\n    build: 3,\n    finalizeRequest: 2,\n    deserialize: 1,\n};\nconst priorityWeights = {\n    high: 3,\n    normal: 2,\n    low: 1,\n};\n"],"names":[],"mappings":"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","x_google_ignoreList":[0]}