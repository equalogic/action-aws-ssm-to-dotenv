import { loadConfig } from '../../../node-config-provider/dist-es/configLoader.js';
import { parseUrl } from '../../../url-parser/dist-es/index.js';
import { Endpoint } from '../config/Endpoint.js';
import { ENDPOINT_CONFIG_OPTIONS } from '../config/EndpointConfigOptions.js';
import { EndpointMode } from '../config/EndpointMode.js';
import { ENDPOINT_MODE_CONFIG_OPTIONS } from '../config/EndpointModeConfigOptions.js';

const getInstanceMetadataEndpoint = async () => parseUrl((await getFromEndpointConfig()) || (await getFromEndpointModeConfig()));
const getFromEndpointConfig = async () => loadConfig(ENDPOINT_CONFIG_OPTIONS)();
const getFromEndpointModeConfig = async () => {
    const endpointMode = await loadConfig(ENDPOINT_MODE_CONFIG_OPTIONS)();
    switch (endpointMode) {
        case EndpointMode.IPv4:
            return Endpoint.IPv4;
        case EndpointMode.IPv6:
            return Endpoint.IPv6;
        default:
            throw new Error(`Unsupported endpoint mode: ${endpointMode}.` + ` Select from ${Object.values(EndpointMode)}`);
    }
};

export { getInstanceMetadataEndpoint };
//# sourceMappingURL=getInstanceMetadataEndpoint.js.map
