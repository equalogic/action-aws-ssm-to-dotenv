{"version":3,"file":"fromInstanceMetadata.js","sources":["../../../../../node_modules/@smithy/credential-provider-imds/dist-es/fromInstanceMetadata.js"],"sourcesContent":["import { loadConfig } from \"@smithy/node-config-provider\";\nimport { CredentialsProviderError } from \"@smithy/property-provider\";\nimport { InstanceMetadataV1FallbackError } from \"./error/InstanceMetadataV1FallbackError\";\nimport { httpRequest } from \"./remoteProvider/httpRequest\";\nimport { fromImdsCredentials, isImdsCredentials } from \"./remoteProvider/ImdsCredentials\";\nimport { providerConfigFromInit } from \"./remoteProvider/RemoteProviderInit\";\nimport { retry } from \"./remoteProvider/retry\";\nimport { getInstanceMetadataEndpoint } from \"./utils/getInstanceMetadataEndpoint\";\nimport { staticStabilityProvider } from \"./utils/staticStabilityProvider\";\nconst IMDS_PATH = \"/latest/meta-data/iam/security-credentials/\";\nconst IMDS_TOKEN_PATH = \"/latest/api/token\";\nconst AWS_EC2_METADATA_V1_DISABLED = \"AWS_EC2_METADATA_V1_DISABLED\";\nconst PROFILE_AWS_EC2_METADATA_V1_DISABLED = \"ec2_metadata_v1_disabled\";\nconst X_AWS_EC2_METADATA_TOKEN = \"x-aws-ec2-metadata-token\";\nexport const fromInstanceMetadata = (init = {}) => staticStabilityProvider(getInstanceMetadataProvider(init), { logger: init.logger });\nconst getInstanceMetadataProvider = (init = {}) => {\n    let disableFetchToken = false;\n    const { logger, profile } = init;\n    const { timeout, maxRetries } = providerConfigFromInit(init);\n    const getCredentials = async (maxRetries, options) => {\n        const isImdsV1Fallback = disableFetchToken || options.headers?.[X_AWS_EC2_METADATA_TOKEN] == null;\n        if (isImdsV1Fallback) {\n            let fallbackBlockedFromProfile = false;\n            let fallbackBlockedFromProcessEnv = false;\n            const configValue = await loadConfig({\n                environmentVariableSelector: (env) => {\n                    const envValue = env[AWS_EC2_METADATA_V1_DISABLED];\n                    fallbackBlockedFromProcessEnv = !!envValue && envValue !== \"false\";\n                    if (envValue === undefined) {\n                        throw new CredentialsProviderError(`${AWS_EC2_METADATA_V1_DISABLED} not set in env, checking config file next.`, { logger: init.logger });\n                    }\n                    return fallbackBlockedFromProcessEnv;\n                },\n                configFileSelector: (profile) => {\n                    const profileValue = profile[PROFILE_AWS_EC2_METADATA_V1_DISABLED];\n                    fallbackBlockedFromProfile = !!profileValue && profileValue !== \"false\";\n                    return fallbackBlockedFromProfile;\n                },\n                default: false,\n            }, {\n                profile,\n            })();\n            if (init.ec2MetadataV1Disabled || configValue) {\n                const causes = [];\n                if (init.ec2MetadataV1Disabled)\n                    causes.push(\"credential provider initialization (runtime option ec2MetadataV1Disabled)\");\n                if (fallbackBlockedFromProfile)\n                    causes.push(`config file profile (${PROFILE_AWS_EC2_METADATA_V1_DISABLED})`);\n                if (fallbackBlockedFromProcessEnv)\n                    causes.push(`process environment variable (${AWS_EC2_METADATA_V1_DISABLED})`);\n                throw new InstanceMetadataV1FallbackError(`AWS EC2 Metadata v1 fallback has been blocked by AWS SDK configuration in the following: [${causes.join(\", \")}].`);\n            }\n        }\n        const imdsProfile = (await retry(async () => {\n            let profile;\n            try {\n                profile = await getProfile(options);\n            }\n            catch (err) {\n                if (err.statusCode === 401) {\n                    disableFetchToken = false;\n                }\n                throw err;\n            }\n            return profile;\n        }, maxRetries)).trim();\n        return retry(async () => {\n            let creds;\n            try {\n                creds = await getCredentialsFromProfile(imdsProfile, options, init);\n            }\n            catch (err) {\n                if (err.statusCode === 401) {\n                    disableFetchToken = false;\n                }\n                throw err;\n            }\n            return creds;\n        }, maxRetries);\n    };\n    return async () => {\n        const endpoint = await getInstanceMetadataEndpoint();\n        if (disableFetchToken) {\n            logger?.debug(\"AWS SDK Instance Metadata\", \"using v1 fallback (no token fetch)\");\n            return getCredentials(maxRetries, { ...endpoint, timeout });\n        }\n        else {\n            let token;\n            try {\n                token = (await getMetadataToken({ ...endpoint, timeout })).toString();\n            }\n            catch (error) {\n                if (error?.statusCode === 400) {\n                    throw Object.assign(error, {\n                        message: \"EC2 Metadata token request returned error\",\n                    });\n                }\n                else if (error.message === \"TimeoutError\" || [403, 404, 405].includes(error.statusCode)) {\n                    disableFetchToken = true;\n                }\n                logger?.debug(\"AWS SDK Instance Metadata\", \"using v1 fallback (initial)\");\n                return getCredentials(maxRetries, { ...endpoint, timeout });\n            }\n            return getCredentials(maxRetries, {\n                ...endpoint,\n                headers: {\n                    [X_AWS_EC2_METADATA_TOKEN]: token,\n                },\n                timeout,\n            });\n        }\n    };\n};\nconst getMetadataToken = async (options) => httpRequest({\n    ...options,\n    path: IMDS_TOKEN_PATH,\n    method: \"PUT\",\n    headers: {\n        \"x-aws-ec2-metadata-token-ttl-seconds\": \"21600\",\n    },\n});\nconst getProfile = async (options) => (await httpRequest({ ...options, path: IMDS_PATH })).toString();\nconst getCredentialsFromProfile = async (profile, options, init) => {\n    const credentialsResponse = JSON.parse((await httpRequest({\n        ...options,\n        path: IMDS_PATH + profile,\n    })).toString());\n    if (!isImdsCredentials(credentialsResponse)) {\n        throw new CredentialsProviderError(\"Invalid response received from instance metadata service.\", {\n            logger: init.logger,\n        });\n    }\n    return fromImdsCredentials(credentialsResponse);\n};\n"],"names":[],"mappings":"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","x_google_ignoreList":[0]}