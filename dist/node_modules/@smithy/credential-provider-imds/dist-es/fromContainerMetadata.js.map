{"version":3,"file":"fromContainerMetadata.js","sources":["../../../../../node_modules/@smithy/credential-provider-imds/dist-es/fromContainerMetadata.js"],"sourcesContent":["import { CredentialsProviderError } from \"@smithy/property-provider\";\nimport { parse } from \"url\";\nimport { httpRequest } from \"./remoteProvider/httpRequest\";\nimport { fromImdsCredentials, isImdsCredentials } from \"./remoteProvider/ImdsCredentials\";\nimport { providerConfigFromInit } from \"./remoteProvider/RemoteProviderInit\";\nimport { retry } from \"./remoteProvider/retry\";\nexport const ENV_CMDS_FULL_URI = \"AWS_CONTAINER_CREDENTIALS_FULL_URI\";\nexport const ENV_CMDS_RELATIVE_URI = \"AWS_CONTAINER_CREDENTIALS_RELATIVE_URI\";\nexport const ENV_CMDS_AUTH_TOKEN = \"AWS_CONTAINER_AUTHORIZATION_TOKEN\";\nexport const fromContainerMetadata = (init = {}) => {\n    const { timeout, maxRetries } = providerConfigFromInit(init);\n    return () => retry(async () => {\n        const requestOptions = await getCmdsUri({ logger: init.logger });\n        const credsResponse = JSON.parse(await requestFromEcsImds(timeout, requestOptions));\n        if (!isImdsCredentials(credsResponse)) {\n            throw new CredentialsProviderError(\"Invalid response received from instance metadata service.\", {\n                logger: init.logger,\n            });\n        }\n        return fromImdsCredentials(credsResponse);\n    }, maxRetries);\n};\nconst requestFromEcsImds = async (timeout, options) => {\n    if (process.env[ENV_CMDS_AUTH_TOKEN]) {\n        options.headers = {\n            ...options.headers,\n            Authorization: process.env[ENV_CMDS_AUTH_TOKEN],\n        };\n    }\n    const buffer = await httpRequest({\n        ...options,\n        timeout,\n    });\n    return buffer.toString();\n};\nconst CMDS_IP = \"169.254.170.2\";\nconst GREENGRASS_HOSTS = {\n    localhost: true,\n    \"127.0.0.1\": true,\n};\nconst GREENGRASS_PROTOCOLS = {\n    \"http:\": true,\n    \"https:\": true,\n};\nconst getCmdsUri = async ({ logger }) => {\n    if (process.env[ENV_CMDS_RELATIVE_URI]) {\n        return {\n            hostname: CMDS_IP,\n            path: process.env[ENV_CMDS_RELATIVE_URI],\n        };\n    }\n    if (process.env[ENV_CMDS_FULL_URI]) {\n        const parsed = parse(process.env[ENV_CMDS_FULL_URI]);\n        if (!parsed.hostname || !(parsed.hostname in GREENGRASS_HOSTS)) {\n            throw new CredentialsProviderError(`${parsed.hostname} is not a valid container metadata service hostname`, {\n                tryNextLink: false,\n                logger,\n            });\n        }\n        if (!parsed.protocol || !(parsed.protocol in GREENGRASS_PROTOCOLS)) {\n            throw new CredentialsProviderError(`${parsed.protocol} is not a valid container metadata service protocol`, {\n                tryNextLink: false,\n                logger,\n            });\n        }\n        return {\n            ...parsed,\n            port: parsed.port ? parseInt(parsed.port, 10) : undefined,\n        };\n    }\n    throw new CredentialsProviderError(\"The container metadata credential provider cannot be used unless\" +\n        ` the ${ENV_CMDS_RELATIVE_URI} or ${ENV_CMDS_FULL_URI} environment` +\n        \" variable is set\", {\n        tryNextLink: false,\n        logger,\n    });\n};\n"],"names":[],"mappings":"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","x_google_ignoreList":[0]}